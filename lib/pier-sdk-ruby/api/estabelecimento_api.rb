=begin
PIER Labs

Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require "uri"

module Pier
  class EstabelecimentoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Alterar Origem Comercial
    # Altera uma origem comercial.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da origem comercial
    # @param origem_comercial_update origemComercialUpdate
    # @param [Hash] opts the optional parameters
    # @return [OrigemComercialResponse]
    def alterar_origem_comercial_using_put(id, origem_comercial_update, opts = {})
      data, _status_code, _headers = alterar_origem_comercial_using_put_with_http_info(id, origem_comercial_update, opts)
      return data
    end

    # Alterar Origem Comercial
    # Altera uma origem comercial.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da origem comercial
    # @param origem_comercial_update origemComercialUpdate
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrigemComercialResponse, Fixnum, Hash)>] OrigemComercialResponse data, response status code and response headers
    def alterar_origem_comercial_using_put_with_http_info(id, origem_comercial_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.alterar_origem_comercial_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.alterar_origem_comercial_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'origem_comercial_update' is set
      fail ArgumentError, "Missing the required parameter 'origem_comercial_update' when calling EstabelecimentoApi.alterar_origem_comercial_using_put" if origem_comercial_update.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/origens-comerciais/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(origem_comercial_update)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrigemComercialResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#alterar_origem_comercial_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Altera uma Maquineta
    # Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o das maquinetas dos estabelecimentos.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Maquineta (id).
    # @param maquineta_update maquinetaUpdate
    # @param [Hash] opts the optional parameters
    # @return [MaquinetaResponse]
    def alterar_using_put10(id, maquineta_update, opts = {})
      data, _status_code, _headers = alterar_using_put10_with_http_info(id, maquineta_update, opts)
      return data
    end

    # Altera uma Maquineta
    # Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o das maquinetas dos estabelecimentos.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Maquineta (id).
    # @param maquineta_update maquinetaUpdate
    # @param [Hash] opts the optional parameters
    # @return [Array<(MaquinetaResponse, Fixnum, Hash)>] MaquinetaResponse data, response status code and response headers
    def alterar_using_put10_with_http_info(id, maquineta_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.alterar_using_put10 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.alterar_using_put10" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'maquineta_update' is set
      fail ArgumentError, "Missing the required parameter 'maquineta_update' when calling EstabelecimentoApi.alterar_using_put10" if maquineta_update.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/maquinetas/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(maquineta_update)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MaquinetaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#alterar_using_put10\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Altera uma Regra Opera\u00C3\u00A7\u00C3\u00A3o
    # Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o de uma regra opera\u00C3\u00A7\u00C3\u00A3o.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Regra Opera\u00C3\u00A7\u00C3\u00A3o (id).
    # @param operacao_credor_update operacaoCredorUpdate
    # @param [Hash] opts the optional parameters
    # @return [OperacaoCredorResponse]
    def alterar_using_put11(id, operacao_credor_update, opts = {})
      data, _status_code, _headers = alterar_using_put11_with_http_info(id, operacao_credor_update, opts)
      return data
    end

    # Altera uma Regra Opera\u00C3\u00A7\u00C3\u00A3o
    # Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o de uma regra opera\u00C3\u00A7\u00C3\u00A3o.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Regra Opera\u00C3\u00A7\u00C3\u00A3o (id).
    # @param operacao_credor_update operacaoCredorUpdate
    # @param [Hash] opts the optional parameters
    # @return [Array<(OperacaoCredorResponse, Fixnum, Hash)>] OperacaoCredorResponse data, response status code and response headers
    def alterar_using_put11_with_http_info(id, operacao_credor_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.alterar_using_put11 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.alterar_using_put11" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'operacao_credor_update' is set
      fail ArgumentError, "Missing the required parameter 'operacao_credor_update' when calling EstabelecimentoApi.alterar_using_put11" if operacao_credor_update.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/regras-operacoes-estabelecimentos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(operacao_credor_update)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OperacaoCredorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#alterar_using_put11\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Altera um Telefone do estabelecimento
    # Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o dos telefones dos estabelecimentos.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone Estabelecimento (id).
    # @param ddd C\u00C3\u00B3digo DDD do telefone (id).
    # @param telefone N\u00C3\u00BAmero do telefone.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ramal N\u00C3\u00BAmero do ramal.
    # @return [TelefoneEstabelecimentoResponse]
    def alterar_using_put15(id, ddd, telefone, opts = {})
      data, _status_code, _headers = alterar_using_put15_with_http_info(id, ddd, telefone, opts)
      return data
    end

    # Altera um Telefone do estabelecimento
    # Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o dos telefones dos estabelecimentos.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone Estabelecimento (id).
    # @param ddd C\u00C3\u00B3digo DDD do telefone (id).
    # @param telefone N\u00C3\u00BAmero do telefone.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ramal N\u00C3\u00BAmero do ramal.
    # @return [Array<(TelefoneEstabelecimentoResponse, Fixnum, Hash)>] TelefoneEstabelecimentoResponse data, response status code and response headers
    def alterar_using_put15_with_http_info(id, ddd, telefone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.alterar_using_put15 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.alterar_using_put15" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'ddd' is set
      fail ArgumentError, "Missing the required parameter 'ddd' when calling EstabelecimentoApi.alterar_using_put15" if ddd.nil?
      
      
      
      
      
      
      # verify the required parameter 'telefone' is set
      fail ArgumentError, "Missing the required parameter 'telefone' when calling EstabelecimentoApi.alterar_using_put15" if telefone.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/telefones-estabelecimentos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ddd'] = ddd
      query_params[:'telefone'] = telefone
      query_params[:'ramal'] = opts[:'ramal'] if opts[:'ramal']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TelefoneEstabelecimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#alterar_using_put15\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Altera um Terminal
    # Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o dos Terminais.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do terminal (id).
    # @param terminal_update terminalUpdate
    # @param [Hash] opts the optional parameters
    # @return [TerminalResponse]
    def alterar_using_put17(id, terminal_update, opts = {})
      data, _status_code, _headers = alterar_using_put17_with_http_info(id, terminal_update, opts)
      return data
    end

    # Altera um Terminal
    # Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o dos Terminais.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do terminal (id).
    # @param terminal_update terminalUpdate
    # @param [Hash] opts the optional parameters
    # @return [Array<(TerminalResponse, Fixnum, Hash)>] TerminalResponse data, response status code and response headers
    def alterar_using_put17_with_http_info(id, terminal_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.alterar_using_put17 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.alterar_using_put17" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'terminal_update' is set
      fail ArgumentError, "Missing the required parameter 'terminal_update' when calling EstabelecimentoApi.alterar_using_put17" if terminal_update.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/terminais/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(terminal_update)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TerminalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#alterar_using_put17\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Alterar um estabelecimento
    # Altera um estabelecimento
    # @param id Id
    # @param update update
    # @param [Hash] opts the optional parameters
    # @return [EstabelecimentoResponse]
    def alterar_using_put6(id, update, opts = {})
      data, _status_code, _headers = alterar_using_put6_with_http_info(id, update, opts)
      return data
    end

    # Alterar um estabelecimento
    # Altera um estabelecimento
    # @param id Id
    # @param update update
    # @param [Hash] opts the optional parameters
    # @return [Array<(EstabelecimentoResponse, Fixnum, Hash)>] EstabelecimentoResponse data, response status code and response headers
    def alterar_using_put6_with_http_info(id, update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.alterar_using_put6 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.alterar_using_put6" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'update' is set
      fail ArgumentError, "Missing the required parameter 'update' when calling EstabelecimentoApi.alterar_using_put6" if update.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/estabelecimentos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EstabelecimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#alterar_using_put6\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Alterar Grupo Econ\u00C3\u00B4mico
    # Altera um grupo econ\u00C3\u00B4mico.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do grupo econ\u00C3\u00B4mico
    # @param grupo_economico_dto grupoEconomicoDTO
    # @param [Hash] opts the optional parameters
    # @return [GrupoEconomicoResponse]
    def alterar_using_put8(id, grupo_economico_dto, opts = {})
      data, _status_code, _headers = alterar_using_put8_with_http_info(id, grupo_economico_dto, opts)
      return data
    end

    # Alterar Grupo Econ\u00C3\u00B4mico
    # Altera um grupo econ\u00C3\u00B4mico.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do grupo econ\u00C3\u00B4mico
    # @param grupo_economico_dto grupoEconomicoDTO
    # @param [Hash] opts the optional parameters
    # @return [Array<(GrupoEconomicoResponse, Fixnum, Hash)>] GrupoEconomicoResponse data, response status code and response headers
    def alterar_using_put8_with_http_info(id, grupo_economico_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.alterar_using_put8 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.alterar_using_put8" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'grupo_economico_dto' is set
      fail ArgumentError, "Missing the required parameter 'grupo_economico_dto' when calling EstabelecimentoApi.alterar_using_put8" if grupo_economico_dto.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/grupos-economicos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(grupo_economico_dto)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GrupoEconomicoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#alterar_using_put8\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cadastrar Origem Comercial
    # Cadastra uma origem comercial.
    # @param origem_comercial_persist origemComercialPersist
    # @param [Hash] opts the optional parameters
    # @return [OrigemComercialResponse]
    def cadastrar_origem_comercial_using_post(origem_comercial_persist, opts = {})
      data, _status_code, _headers = cadastrar_origem_comercial_using_post_with_http_info(origem_comercial_persist, opts)
      return data
    end

    # Cadastrar Origem Comercial
    # Cadastra uma origem comercial.
    # @param origem_comercial_persist origemComercialPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrigemComercialResponse, Fixnum, Hash)>] OrigemComercialResponse data, response status code and response headers
    def cadastrar_origem_comercial_using_post_with_http_info(origem_comercial_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.cadastrar_origem_comercial_using_post ..."
      end
      
      
      # verify the required parameter 'origem_comercial_persist' is set
      fail ArgumentError, "Missing the required parameter 'origem_comercial_persist' when calling EstabelecimentoApi.cadastrar_origem_comercial_using_post" if origem_comercial_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/origens-comerciais".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(origem_comercial_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrigemComercialResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#cadastrar_origem_comercial_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cadastrar um estabelecimento
    # Cadastra um novo estabelecimento
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [EstabelecimentoResponse]
    def cadastrar_using_post2(persist, opts = {})
      data, _status_code, _headers = cadastrar_using_post2_with_http_info(persist, opts)
      return data
    end

    # Cadastrar um estabelecimento
    # Cadastra um novo estabelecimento
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [Array<(EstabelecimentoResponse, Fixnum, Hash)>] EstabelecimentoResponse data, response status code and response headers
    def cadastrar_using_post2_with_http_info(persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.cadastrar_using_post2 ..."
      end
      
      
      # verify the required parameter 'persist' is set
      fail ArgumentError, "Missing the required parameter 'persist' when calling EstabelecimentoApi.cadastrar_using_post2" if persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/estabelecimentos".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EstabelecimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#cadastrar_using_post2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cadastrar Grupo Econ\u00C3\u00B4mico
    # Cadastra um grupo econ\u00C3\u00B4mico.
    # @param grupo_economico_dto GrupoEconomicoDTO
    # @param [Hash] opts the optional parameters
    # @return [GrupoEconomicoResponse]
    def cadastrar_using_post3(grupo_economico_dto, opts = {})
      data, _status_code, _headers = cadastrar_using_post3_with_http_info(grupo_economico_dto, opts)
      return data
    end

    # Cadastrar Grupo Econ\u00C3\u00B4mico
    # Cadastra um grupo econ\u00C3\u00B4mico.
    # @param grupo_economico_dto GrupoEconomicoDTO
    # @param [Hash] opts the optional parameters
    # @return [Array<(GrupoEconomicoResponse, Fixnum, Hash)>] GrupoEconomicoResponse data, response status code and response headers
    def cadastrar_using_post3_with_http_info(grupo_economico_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.cadastrar_using_post3 ..."
      end
      
      
      # verify the required parameter 'grupo_economico_dto' is set
      fail ArgumentError, "Missing the required parameter 'grupo_economico_dto' when calling EstabelecimentoApi.cadastrar_using_post3" if grupo_economico_dto.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/grupos-economicos".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(grupo_economico_dto)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GrupoEconomicoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#cadastrar_using_post3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apresenta dados de um determinado tipo de opera\u00C3\u00A7\u00C3\u00A3o
    # Este recurso permite consultar dados de um determinado tipo opera\u00C3\u00A7\u00C3\u00A3o a partir do idoperacao
    # @param id C\u00C3\u00B3digo de processamento da opera\u00C3\u00A7\u00C3\u00A3o (idOperacao).
    # @param [Hash] opts the optional parameters
    # @return [DetalheOperacaoResponse]
    def consulta_operacao_using_get(id, opts = {})
      data, _status_code, _headers = consulta_operacao_using_get_with_http_info(id, opts)
      return data
    end

    # Apresenta dados de um determinado tipo de opera\u00C3\u00A7\u00C3\u00A3o
    # Este recurso permite consultar dados de um determinado tipo opera\u00C3\u00A7\u00C3\u00A3o a partir do idoperacao
    # @param id C\u00C3\u00B3digo de processamento da opera\u00C3\u00A7\u00C3\u00A3o (idOperacao).
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetalheOperacaoResponse, Fixnum, Hash)>] DetalheOperacaoResponse data, response status code and response headers
    def consulta_operacao_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consulta_operacao_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consulta_operacao_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-operacoes-estabelecimentos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetalheOperacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consulta_operacao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar Origem Comercial
    # Consulta uma origem comercial atrav\u00C3\u00A9s do seu identificador.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da origem comercial
    # @param [Hash] opts the optional parameters
    # @return [OrigemComercialResponse]
    def consultar_origem_comercial_using_get(id, opts = {})
      data, _status_code, _headers = consultar_origem_comercial_using_get_with_http_info(id, opts)
      return data
    end

    # Consultar Origem Comercial
    # Consulta uma origem comercial atrav\u00C3\u00A9s do seu identificador.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da origem comercial
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrigemComercialResponse, Fixnum, Hash)>] OrigemComercialResponse data, response status code and response headers
    def consultar_origem_comercial_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consultar_origem_comercial_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consultar_origem_comercial_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/origens-comerciais/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrigemComercialResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consultar_origem_comercial_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar estabelecimento por id
    # Consulta os detalhes de um determinado estabelecimento
    # @param id Id
    # @param [Hash] opts the optional parameters
    # @return [EstabelecimentoResponse]
    def consultar_using_get15(id, opts = {})
      data, _status_code, _headers = consultar_using_get15_with_http_info(id, opts)
      return data
    end

    # Consultar estabelecimento por id
    # Consulta os detalhes de um determinado estabelecimento
    # @param id Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(EstabelecimentoResponse, Fixnum, Hash)>] EstabelecimentoResponse data, response status code and response headers
    def consultar_using_get15_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consultar_using_get15 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consultar_using_get15" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/estabelecimentos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EstabelecimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consultar_using_get15\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar grupo econ\u00C3\u00B4mico
    # Consulta um grupo econ\u00C3\u00B4mico atrav\u00C3\u00A9s do seu identificador.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do grupo econ\u00C3\u00B4mico
    # @param [Hash] opts the optional parameters
    # @return [GrupoEconomicoResponse]
    def consultar_using_get17(id, opts = {})
      data, _status_code, _headers = consultar_using_get17_with_http_info(id, opts)
      return data
    end

    # Consultar grupo econ\u00C3\u00B4mico
    # Consulta um grupo econ\u00C3\u00B4mico atrav\u00C3\u00A9s do seu identificador.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do grupo econ\u00C3\u00B4mico
    # @param [Hash] opts the optional parameters
    # @return [Array<(GrupoEconomicoResponse, Fixnum, Hash)>] GrupoEconomicoResponse data, response status code and response headers
    def consultar_using_get17_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consultar_using_get17 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consultar_using_get17" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/grupos-economicos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GrupoEconomicoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consultar_using_get17\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apresenta os dados de uma determinada maquineta
    # Este m\u00C3\u00A9todo permite consultar uma determinada maquineta a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Maquineta (id).
    # @param [Hash] opts the optional parameters
    # @return [MaquinetaResponse]
    def consultar_using_get19(id, opts = {})
      data, _status_code, _headers = consultar_using_get19_with_http_info(id, opts)
      return data
    end

    # Apresenta os dados de uma determinada maquineta
    # Este m\u00C3\u00A9todo permite consultar uma determinada maquineta a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Maquineta (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(MaquinetaResponse, Fixnum, Hash)>] MaquinetaResponse data, response status code and response headers
    def consultar_using_get19_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consultar_using_get19 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consultar_using_get19" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/maquinetas/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MaquinetaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consultar_using_get19\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apresenta os dados de uma determinada Regra Opera\u00C3\u00A7\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite consultar uma determinada regra opera\u00C3\u00A7\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Regra Opera\u00C3\u00A7\u00C3\u00A3o (id).
    # @param [Hash] opts the optional parameters
    # @return [OperacaoCredorResponse]
    def consultar_using_get20(id, opts = {})
      data, _status_code, _headers = consultar_using_get20_with_http_info(id, opts)
      return data
    end

    # Apresenta os dados de uma determinada Regra Opera\u00C3\u00A7\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite consultar uma determinada regra opera\u00C3\u00A7\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Regra Opera\u00C3\u00A7\u00C3\u00A3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(OperacaoCredorResponse, Fixnum, Hash)>] OperacaoCredorResponse data, response status code and response headers
    def consultar_using_get20_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consultar_using_get20 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consultar_using_get20" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/regras-operacoes-estabelecimentos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OperacaoCredorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consultar_using_get20\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apresenta os dados de um determinado telefone de um estabelecimento
    # Este m\u00C3\u00A9todo permite consultar um determinado telefone de um estabelecimento a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone Estabelecimento (id).
    # @param [Hash] opts the optional parameters
    # @return [TelefoneEstabelecimentoResponse]
    def consultar_using_get28(id, opts = {})
      data, _status_code, _headers = consultar_using_get28_with_http_info(id, opts)
      return data
    end

    # Apresenta os dados de um determinado telefone de um estabelecimento
    # Este m\u00C3\u00A9todo permite consultar um determinado telefone de um estabelecimento a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone Estabelecimento (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(TelefoneEstabelecimentoResponse, Fixnum, Hash)>] TelefoneEstabelecimentoResponse data, response status code and response headers
    def consultar_using_get28_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consultar_using_get28 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consultar_using_get28" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/telefones-estabelecimentos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TelefoneEstabelecimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consultar_using_get28\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apresenta os dados de um determinado Terminal
    # Este m\u00C3\u00A9todo permite consultar um determinado Terminal a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Terminal (id).
    # @param [Hash] opts the optional parameters
    # @return [TerminalResponse]
    def consultar_using_get30(id, opts = {})
      data, _status_code, _headers = consultar_using_get30_with_http_info(id, opts)
      return data
    end

    # Apresenta os dados de um determinado Terminal
    # Este m\u00C3\u00A9todo permite consultar um determinado Terminal a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Terminal (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(TerminalResponse, Fixnum, Hash)>] TerminalResponse data, response status code and response headers
    def consultar_using_get30_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consultar_using_get30 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consultar_using_get30" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/terminais/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TerminalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consultar_using_get30\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apresenta os dados de um determinado V\u00C3\u00ADnculo
    # Este m\u00C3\u00A9todo permite consultar um determinado V\u00C3\u00ADnculo a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do V\u00C3\u008Dnculo (id).
    # @param [Hash] opts the optional parameters
    # @return [VinculoEstabelecimentoAdquirenteResponse]
    def consultar_using_get42(id, opts = {})
      data, _status_code, _headers = consultar_using_get42_with_http_info(id, opts)
      return data
    end

    # Apresenta os dados de um determinado V\u00C3\u00ADnculo
    # Este m\u00C3\u00A9todo permite consultar um determinado V\u00C3\u00ADnculo a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do V\u00C3\u008Dnculo (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(VinculoEstabelecimentoAdquirenteResponse, Fixnum, Hash)>] VinculoEstabelecimentoAdquirenteResponse data, response status code and response headers
    def consultar_using_get42_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consultar_using_get42 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consultar_using_get42" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/adquirentes-estabelecimento/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VinculoEstabelecimentoAdquirenteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consultar_using_get42\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Desabilitar um V\u00C3\u00ADnculo
    # Este m\u00C3\u00A9todo realiza a desativa\u00C3\u00A7\u00C3\u00A3o de um v\u00C3\u00ADnculo.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do V\u00C3\u00ADnculo (id).
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def desabilitar_vinculo_using_post(id, opts = {})
      data, _status_code, _headers = desabilitar_vinculo_using_post_with_http_info(id, opts)
      return data
    end

    # Desabilitar um V\u00C3\u00ADnculo
    # Este m\u00C3\u00A9todo realiza a desativa\u00C3\u00A7\u00C3\u00A3o de um v\u00C3\u00ADnculo.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do V\u00C3\u00ADnculo (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def desabilitar_vinculo_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.desabilitar_vinculo_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.desabilitar_vinculo_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/adquirentes-estabelecimento/{id}/desabilitar".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#desabilitar_vinculo_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Desabilitar um v\u00C3\u00ADnculo opera\u00C3\u00A7\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite desabilitar um v\u00C3\u00ADnculo.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id).
    # @param vinculo_operacao_persist vinculoOperacaoPersist
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def desabilitar_vinculo_using_post1(id, vinculo_operacao_persist, opts = {})
      data, _status_code, _headers = desabilitar_vinculo_using_post1_with_http_info(id, vinculo_operacao_persist, opts)
      return data
    end

    # Desabilitar um v\u00C3\u00ADnculo opera\u00C3\u00A7\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite desabilitar um v\u00C3\u00ADnculo.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id).
    # @param vinculo_operacao_persist vinculoOperacaoPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def desabilitar_vinculo_using_post1_with_http_info(id, vinculo_operacao_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.desabilitar_vinculo_using_post1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.desabilitar_vinculo_using_post1" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'vinculo_operacao_persist' is set
      fail ArgumentError, "Missing the required parameter 'vinculo_operacao_persist' when calling EstabelecimentoApi.desabilitar_vinculo_using_post1" if vinculo_operacao_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/estabelecimentos/{id}/desabilitar-operacao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vinculo_operacao_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#desabilitar_vinculo_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Habilitar um V\u00C3\u00ADnculo
    # Este m\u00C3\u00A9todo realiza a ativa\u00C3\u00A7\u00C3\u00A3o de um v\u00C3\u00ADnculo.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do V\u00C3\u00ADnculo (id).
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def habilitar_vinculo_using_post(id, opts = {})
      data, _status_code, _headers = habilitar_vinculo_using_post_with_http_info(id, opts)
      return data
    end

    # Habilitar um V\u00C3\u00ADnculo
    # Este m\u00C3\u00A9todo realiza a ativa\u00C3\u00A7\u00C3\u00A3o de um v\u00C3\u00ADnculo.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do V\u00C3\u00ADnculo (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def habilitar_vinculo_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.habilitar_vinculo_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.habilitar_vinculo_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/adquirentes-estabelecimento/{id}/habilitar".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#habilitar_vinculo_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Habilitar um v\u00C3\u00ADnculo opera\u00C3\u00A7\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite habilitar um v\u00C3\u00ADnculo.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id).
    # @param vinculo_operacao_persist vinculoOperacaoPersist
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def habilitar_vinculo_using_post1(id, vinculo_operacao_persist, opts = {})
      data, _status_code, _headers = habilitar_vinculo_using_post1_with_http_info(id, vinculo_operacao_persist, opts)
      return data
    end

    # Habilitar um v\u00C3\u00ADnculo opera\u00C3\u00A7\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite habilitar um v\u00C3\u00ADnculo.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id).
    # @param vinculo_operacao_persist vinculoOperacaoPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def habilitar_vinculo_using_post1_with_http_info(id, vinculo_operacao_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.habilitar_vinculo_using_post1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.habilitar_vinculo_using_post1" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'vinculo_operacao_persist' is set
      fail ArgumentError, "Missing the required parameter 'vinculo_operacao_persist' when calling EstabelecimentoApi.habilitar_vinculo_using_post1" if vinculo_operacao_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/estabelecimentos/{id}/habilitar-operacao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vinculo_operacao_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#habilitar_vinculo_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apresenta dados de opera\u00C3\u00A7\u00C3\u00B5es em uma lista
    # Este recurso permite listar as opera\u00C3\u00A7\u00C3\u00A3o
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_operacao C\u00C3\u00B3digo que identifica a opera\u00C3\u00A7\u00C3\u00A3o
    # @option opts [String] :codigo_processamento C\u00C3\u00B3digo de processamento usado em transa\u00C3\u00A7\u00C3\u00B5es com o autorizador
    # @return [PageOperacaoResponse]
    def lista_operacao_using_get(opts = {})
      data, _status_code, _headers = lista_operacao_using_get_with_http_info(opts)
      return data
    end

    # Apresenta dados de opera\u00C3\u00A7\u00C3\u00B5es em uma lista
    # Este recurso permite listar as opera\u00C3\u00A7\u00C3\u00A3o
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_operacao C\u00C3\u00B3digo que identifica a opera\u00C3\u00A7\u00C3\u00A3o
    # @option opts [String] :codigo_processamento C\u00C3\u00B3digo de processamento usado em transa\u00C3\u00A7\u00C3\u00B5es com o autorizador
    # @return [Array<(PageOperacaoResponse, Fixnum, Hash)>] PageOperacaoResponse data, response status code and response headers
    def lista_operacao_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.lista_operacao_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-operacoes-estabelecimentos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idOperacao'] = opts[:'id_operacao'] if opts[:'id_operacao']
      query_params[:'codigoProcessamento'] = opts[:'codigo_processamento'] if opts[:'codigo_processamento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOperacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#lista_operacao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista os MCCs
    # Este m\u00C3\u00A9todo permite que sejam listados os MCCs existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @return [PageMCCResponse]
    def listar_mcc_using_get(opts = {})
      data, _status_code, _headers = listar_mcc_using_get_with_http_info(opts)
      return data
    end

    # Lista os MCCs
    # Este m\u00C3\u00A9todo permite que sejam listados os MCCs existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @return [Array<(PageMCCResponse, Fixnum, Hash)>] PageMCCResponse data, response status code and response headers
    def listar_mcc_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_mcc_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/mcc-estabelecimentos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageMCCResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_mcc_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar Origens Comerciais
    # Lista origens comerciais cadastradas.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id Id da origem comercial
    # @option opts [String] :nome Nome da origem comercial
    # @option opts [Integer] :status Indica o status da origem comercial
    # @option opts [Integer] :id_estabelecimento Identificador do estabelecimento
    # @option opts [Integer] :id_produto Identificador do produto
    # @option opts [String] :descricao Descri\u00C3\u00A7\u00C3\u00A3o da origem comercial
    # @option opts [Integer] :id_tipo_origem_comercial Identificador do tipo de origem comercial
    # @option opts [Integer] :id_grupo_origem_comercial Identificador do grupo de origem comercial
    # @option opts [BOOLEAN] :flag_pre_aprovado Indica se permite pr\u00C3\u00A9 aprova\u00C3\u00A7\u00C3\u00A3o
    # @option opts [BOOLEAN] :flag_aprovacao_imediata Indica se permite aprova\u00C3\u00A7\u00C3\u00A3o imediata
    # @option opts [String] :nome_fantasia_plastico Nome fantasia impresso no pl\u00C3\u00A1stico
    # @option opts [BOOLEAN] :flag_cartao_provisorio Indica se permite cart\u00C3\u00A3o provis\u00C3\u00B3rio
    # @option opts [BOOLEAN] :flag_cartao_definitivo Indica se permite cart\u00C3\u00A3o definitivo
    # @option opts [String] :usuario Usu\u00C3\u00A1rio para autentica\u00C3\u00A7\u00C3\u00A3o
    # @option opts [String] :senha Senha para autentica\u00C3\u00A7\u00C3\u00A3o
    # @option opts [BOOLEAN] :flag_origem_externa Indica se \u00C3\u00A9 origem externa
    # @option opts [BOOLEAN] :flag_modificado Indica se h\u00C3\u00A1 modifica\u00C3\u00A7\u00C3\u00A3o
    # @option opts [BOOLEAN] :flag_envia_fatura_usuario Indica se envia fatura
    # @option opts [BOOLEAN] :flag_credito_faturamento Indica se permite cr\u00C3\u00A9dito de faturamento
    # @option opts [BOOLEAN] :flag_concede_limite_provisorio Indica se concede limite provis\u00C3\u00B3rio
    # @option opts [BOOLEAN] :flag_digitalizar_doc Indica se digitaliza documento
    # @option opts [BOOLEAN] :flag_embossing_loja Indica se realiza embossing em loja
    # @option opts [BOOLEAN] :flag_consulta_previa Indica se realiza consulta pr\u00C3\u00A9via
    # @option opts [String] :tipo_pessoa Tipo de pessoa
    # @return [PageOrigemComercialResponse]
    def listar_origens_comerciais_using_get(opts = {})
      data, _status_code, _headers = listar_origens_comerciais_using_get_with_http_info(opts)
      return data
    end

    # Listar Origens Comerciais
    # Lista origens comerciais cadastradas.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id Id da origem comercial
    # @option opts [String] :nome Nome da origem comercial
    # @option opts [Integer] :status Indica o status da origem comercial
    # @option opts [Integer] :id_estabelecimento Identificador do estabelecimento
    # @option opts [Integer] :id_produto Identificador do produto
    # @option opts [String] :descricao Descri\u00C3\u00A7\u00C3\u00A3o da origem comercial
    # @option opts [Integer] :id_tipo_origem_comercial Identificador do tipo de origem comercial
    # @option opts [Integer] :id_grupo_origem_comercial Identificador do grupo de origem comercial
    # @option opts [BOOLEAN] :flag_pre_aprovado Indica se permite pr\u00C3\u00A9 aprova\u00C3\u00A7\u00C3\u00A3o
    # @option opts [BOOLEAN] :flag_aprovacao_imediata Indica se permite aprova\u00C3\u00A7\u00C3\u00A3o imediata
    # @option opts [String] :nome_fantasia_plastico Nome fantasia impresso no pl\u00C3\u00A1stico
    # @option opts [BOOLEAN] :flag_cartao_provisorio Indica se permite cart\u00C3\u00A3o provis\u00C3\u00B3rio
    # @option opts [BOOLEAN] :flag_cartao_definitivo Indica se permite cart\u00C3\u00A3o definitivo
    # @option opts [String] :usuario Usu\u00C3\u00A1rio para autentica\u00C3\u00A7\u00C3\u00A3o
    # @option opts [String] :senha Senha para autentica\u00C3\u00A7\u00C3\u00A3o
    # @option opts [BOOLEAN] :flag_origem_externa Indica se \u00C3\u00A9 origem externa
    # @option opts [BOOLEAN] :flag_modificado Indica se h\u00C3\u00A1 modifica\u00C3\u00A7\u00C3\u00A3o
    # @option opts [BOOLEAN] :flag_envia_fatura_usuario Indica se envia fatura
    # @option opts [BOOLEAN] :flag_credito_faturamento Indica se permite cr\u00C3\u00A9dito de faturamento
    # @option opts [BOOLEAN] :flag_concede_limite_provisorio Indica se concede limite provis\u00C3\u00B3rio
    # @option opts [BOOLEAN] :flag_digitalizar_doc Indica se digitaliza documento
    # @option opts [BOOLEAN] :flag_embossing_loja Indica se realiza embossing em loja
    # @option opts [BOOLEAN] :flag_consulta_previa Indica se realiza consulta pr\u00C3\u00A9via
    # @option opts [String] :tipo_pessoa Tipo de pessoa
    # @return [Array<(PageOrigemComercialResponse, Fixnum, Hash)>] PageOrigemComercialResponse data, response status code and response headers
    def listar_origens_comerciais_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_origens_comerciais_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'tipo_pessoa'] && !['PESSOA_FISICA', 'PESSOA_JURIDICA'].include?(opts[:'tipo_pessoa'])
        fail ArgumentError, 'invalid value for "tipo_pessoa", must be one of PESSOA_FISICA, PESSOA_JURIDICA'
      end
      
      
      
      
      # resource path
      local_var_path = "/api/origens-comerciais".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']
      query_params[:'status'] = opts[:'status'] if opts[:'status']
      query_params[:'idEstabelecimento'] = opts[:'id_estabelecimento'] if opts[:'id_estabelecimento']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']
      query_params[:'descricao'] = opts[:'descricao'] if opts[:'descricao']
      query_params[:'idTipoOrigemComercial'] = opts[:'id_tipo_origem_comercial'] if opts[:'id_tipo_origem_comercial']
      query_params[:'idGrupoOrigemComercial'] = opts[:'id_grupo_origem_comercial'] if opts[:'id_grupo_origem_comercial']
      query_params[:'flagPreAprovado'] = opts[:'flag_pre_aprovado'] if opts[:'flag_pre_aprovado']
      query_params[:'flagAprovacaoImediata'] = opts[:'flag_aprovacao_imediata'] if opts[:'flag_aprovacao_imediata']
      query_params[:'nomeFantasiaPlastico'] = opts[:'nome_fantasia_plastico'] if opts[:'nome_fantasia_plastico']
      query_params[:'flagCartaoProvisorio'] = opts[:'flag_cartao_provisorio'] if opts[:'flag_cartao_provisorio']
      query_params[:'flagCartaoDefinitivo'] = opts[:'flag_cartao_definitivo'] if opts[:'flag_cartao_definitivo']
      query_params[:'usuario'] = opts[:'usuario'] if opts[:'usuario']
      query_params[:'senha'] = opts[:'senha'] if opts[:'senha']
      query_params[:'flagOrigemExterna'] = opts[:'flag_origem_externa'] if opts[:'flag_origem_externa']
      query_params[:'flagModificado'] = opts[:'flag_modificado'] if opts[:'flag_modificado']
      query_params[:'flagEnviaFaturaUsuario'] = opts[:'flag_envia_fatura_usuario'] if opts[:'flag_envia_fatura_usuario']
      query_params[:'flagCreditoFaturamento'] = opts[:'flag_credito_faturamento'] if opts[:'flag_credito_faturamento']
      query_params[:'flagConcedeLimiteProvisorio'] = opts[:'flag_concede_limite_provisorio'] if opts[:'flag_concede_limite_provisorio']
      query_params[:'flagDigitalizarDoc'] = opts[:'flag_digitalizar_doc'] if opts[:'flag_digitalizar_doc']
      query_params[:'flagEmbossingLoja'] = opts[:'flag_embossing_loja'] if opts[:'flag_embossing_loja']
      query_params[:'flagConsultaPrevia'] = opts[:'flag_consulta_previa'] if opts[:'flag_consulta_previa']
      query_params[:'tipoPessoa'] = opts[:'tipo_pessoa'] if opts[:'tipo_pessoa']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOrigemComercialResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_origens_comerciais_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista os Tipos de adquirentes
    # Este m\u00C3\u00A9todo permite que sejam listados os tipos de adquirentes.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @return [PageEntidadeResponse]
    def listar_tipos_adquirentes_using_get(opts = {})
      data, _status_code, _headers = listar_tipos_adquirentes_using_get_with_http_info(opts)
      return data
    end

    # Lista os Tipos de adquirentes
    # Este m\u00C3\u00A9todo permite que sejam listados os tipos de adquirentes.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @return [Array<(PageEntidadeResponse, Fixnum, Hash)>] PageEntidadeResponse data, response status code and response headers
    def listar_tipos_adquirentes_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_tipos_adquirentes_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-adquirentes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageEntidadeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_tipos_adquirentes_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista os Tipos de  Maquinetas
    # Este m\u00C3\u00A9todo permite que sejam listadas os Tipos de maquinetas existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @return [PageCampoCodificadoDescricaoResponse]
    def listar_tipos_maquinetas_using_get(opts = {})
      data, _status_code, _headers = listar_tipos_maquinetas_using_get_with_http_info(opts)
      return data
    end

    # Lista os Tipos de  Maquinetas
    # Este m\u00C3\u00A9todo permite que sejam listadas os Tipos de maquinetas existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @return [Array<(PageCampoCodificadoDescricaoResponse, Fixnum, Hash)>] PageCampoCodificadoDescricaoResponse data, response status code and response headers
    def listar_tipos_maquinetas_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_tipos_maquinetas_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-maquinetas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCampoCodificadoDescricaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_tipos_maquinetas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista os Tipos Terminais
    # Este m\u00C3\u00A9todo permite que sejam listados os tipos de terminais existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @return [PageTipoTerminalResponse]
    def listar_tipos_terminais_using_get1(opts = {})
      data, _status_code, _headers = listar_tipos_terminais_using_get1_with_http_info(opts)
      return data
    end

    # Lista os Tipos Terminais
    # Este m\u00C3\u00A9todo permite que sejam listados os tipos de terminais existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @return [Array<(PageTipoTerminalResponse, Fixnum, Hash)>] PageTipoTerminalResponse data, response status code and response headers
    def listar_tipos_terminais_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_tipos_terminais_using_get1 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-terminais-estabelecimento".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTipoTerminalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_tipos_terminais_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista Estabelecimentos
    # Lista todas os Estabelecimentos
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id).
    # @option opts [Integer] :id_credor Apresenta o n\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do Credor.
    # @option opts [String] :numero_receita_federal Apresenta o n\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento na Receita Federal.
    # @option opts [String] :nome Nome do Estabelecimento.
    # @option opts [String] :descricao Raz\u00C3\u00A3o Social do Estabelecimento.
    # @option opts [String] :nome_fantasia T\u00C3\u00ADtulo Comercial do Estabelecimento.
    # @option opts [String] :cep C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP).
    # @option opts [String] :nome_logradouro Nome do Logradouro.
    # @option opts [Integer] :numero_endereco N\u00C3\u00BAmero do endere\u00C3\u00A7o.
    # @option opts [String] :complemento Descri\u00C3\u00A7\u00C3\u00B5es complementares referente ao endere\u00C3\u00A7o.
    # @option opts [String] :bairro Nome do bairro do endere\u00C3\u00A7o.
    # @option opts [String] :cidade Nome da cidade do endere\u00C3\u00A7o.
    # @option opts [String] :uf Sigla de identifica\u00C3\u00A7\u00C3\u00A3o da Unidade Federativa do endere\u00C3\u00A7o.
    # @option opts [String] :pais Nome do pa\u00C3\u00ADs.
    # @option opts [String] :data_cadastramento Data de Cadastro do Estabelecimento, no formato yyyy-MM-dd.
    # @option opts [String] :contato Nome da pessoa para contato com o Estabelecimento.
    # @option opts [String] :email E-mail da pessoa para contato com o Estabelecimento.
    # @option opts [Integer] :flag_arquivo_secr_fazenda Indica se o estabelecimento ser\u00C3\u00A1 inclu\u00C3\u00ADdo no arquivo de registro para a Secretaria da Fazenda Estadual.
    # @option opts [Integer] :flag_cartao_digitado Indica se o estabelecimento poder\u00C3\u00A1 originar transa\u00C3\u00A7\u00C3\u00B5es sem a leitura da tarja ou do chip do cart\u00C3\u00A3o.
    # @option opts [Integer] :inativo Indica se o estabelecimento est\u00C3\u00A1 inativo.
    # @option opts [Integer] :id_pais Identificador de Pa\u00C3\u00ADs.
    # @option opts [Integer] :mcc C\u00C3\u00B3digo de Categoria de Mercado
    # @option opts [Integer] :id_tipo_estabelecimento C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento.
    # @option opts [Integer] :id_moeda C\u00C3\u00B3digo identificador da moeda.
    # @option opts [String] :tipo_pagamento Tipo do regime de pagamento do estabelecimento.
    # @option opts [String] :numero_estabelecimento N\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento na Conductor.
    # @option opts [String] :cep2 C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP).
    # @option opts [String] :nome_logradouro2 Nome do Logradouro.
    # @option opts [Integer] :numero_endereco2 N\u00C3\u00BAmero do endere\u00C3\u00A7o.
    # @option opts [String] :complemento2 Descri\u00C3\u00A7\u00C3\u00B5es complementares referente ao endere\u00C3\u00A7o.
    # @option opts [String] :bairro2 Nome do bairro do endere\u00C3\u00A7o.
    # @option opts [String] :cidade2 Nome da cidade do endere\u00C3\u00A7o.
    # @option opts [String] :uf2 Sigla de identifica\u00C3\u00A7\u00C3\u00A3o da Unidade Federativa do endere\u00C3\u00A7o.
    # @option opts [Integer] :flag_matriz Indica se \u00C3\u00A9 matriz ou filial.
    # @return [PageEstabelecimentoResponse]
    def listar_using_get18(opts = {})
      data, _status_code, _headers = listar_using_get18_with_http_info(opts)
      return data
    end

    # Lista Estabelecimentos
    # Lista todas os Estabelecimentos
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id).
    # @option opts [Integer] :id_credor Apresenta o n\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do Credor.
    # @option opts [String] :numero_receita_federal Apresenta o n\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento na Receita Federal.
    # @option opts [String] :nome Nome do Estabelecimento.
    # @option opts [String] :descricao Raz\u00C3\u00A3o Social do Estabelecimento.
    # @option opts [String] :nome_fantasia T\u00C3\u00ADtulo Comercial do Estabelecimento.
    # @option opts [String] :cep C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP).
    # @option opts [String] :nome_logradouro Nome do Logradouro.
    # @option opts [Integer] :numero_endereco N\u00C3\u00BAmero do endere\u00C3\u00A7o.
    # @option opts [String] :complemento Descri\u00C3\u00A7\u00C3\u00B5es complementares referente ao endere\u00C3\u00A7o.
    # @option opts [String] :bairro Nome do bairro do endere\u00C3\u00A7o.
    # @option opts [String] :cidade Nome da cidade do endere\u00C3\u00A7o.
    # @option opts [String] :uf Sigla de identifica\u00C3\u00A7\u00C3\u00A3o da Unidade Federativa do endere\u00C3\u00A7o.
    # @option opts [String] :pais Nome do pa\u00C3\u00ADs.
    # @option opts [String] :data_cadastramento Data de Cadastro do Estabelecimento, no formato yyyy-MM-dd.
    # @option opts [String] :contato Nome da pessoa para contato com o Estabelecimento.
    # @option opts [String] :email E-mail da pessoa para contato com o Estabelecimento.
    # @option opts [Integer] :flag_arquivo_secr_fazenda Indica se o estabelecimento ser\u00C3\u00A1 inclu\u00C3\u00ADdo no arquivo de registro para a Secretaria da Fazenda Estadual.
    # @option opts [Integer] :flag_cartao_digitado Indica se o estabelecimento poder\u00C3\u00A1 originar transa\u00C3\u00A7\u00C3\u00B5es sem a leitura da tarja ou do chip do cart\u00C3\u00A3o.
    # @option opts [Integer] :inativo Indica se o estabelecimento est\u00C3\u00A1 inativo.
    # @option opts [Integer] :id_pais Identificador de Pa\u00C3\u00ADs.
    # @option opts [Integer] :mcc C\u00C3\u00B3digo de Categoria de Mercado
    # @option opts [Integer] :id_tipo_estabelecimento C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento.
    # @option opts [Integer] :id_moeda C\u00C3\u00B3digo identificador da moeda.
    # @option opts [String] :tipo_pagamento Tipo do regime de pagamento do estabelecimento.
    # @option opts [String] :numero_estabelecimento N\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento na Conductor.
    # @option opts [String] :cep2 C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP).
    # @option opts [String] :nome_logradouro2 Nome do Logradouro.
    # @option opts [Integer] :numero_endereco2 N\u00C3\u00BAmero do endere\u00C3\u00A7o.
    # @option opts [String] :complemento2 Descri\u00C3\u00A7\u00C3\u00B5es complementares referente ao endere\u00C3\u00A7o.
    # @option opts [String] :bairro2 Nome do bairro do endere\u00C3\u00A7o.
    # @option opts [String] :cidade2 Nome da cidade do endere\u00C3\u00A7o.
    # @option opts [String] :uf2 Sigla de identifica\u00C3\u00A7\u00C3\u00A3o da Unidade Federativa do endere\u00C3\u00A7o.
    # @option opts [Integer] :flag_matriz Indica se \u00C3\u00A9 matriz ou filial.
    # @return [Array<(PageEstabelecimentoResponse, Fixnum, Hash)>] PageEstabelecimentoResponse data, response status code and response headers
    def listar_using_get18_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_using_get18 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'tipo_pagamento'] && !['CENTRALIZADO', 'PV'].include?(opts[:'tipo_pagamento'])
        fail ArgumentError, 'invalid value for "tipo_pagamento", must be one of CENTRALIZADO, PV'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/estabelecimentos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'idCredor'] = opts[:'id_credor'] if opts[:'id_credor']
      query_params[:'numeroReceitaFederal'] = opts[:'numero_receita_federal'] if opts[:'numero_receita_federal']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']
      query_params[:'descricao'] = opts[:'descricao'] if opts[:'descricao']
      query_params[:'nomeFantasia'] = opts[:'nome_fantasia'] if opts[:'nome_fantasia']
      query_params[:'cep'] = opts[:'cep'] if opts[:'cep']
      query_params[:'nomeLogradouro'] = opts[:'nome_logradouro'] if opts[:'nome_logradouro']
      query_params[:'numeroEndereco'] = opts[:'numero_endereco'] if opts[:'numero_endereco']
      query_params[:'complemento'] = opts[:'complemento'] if opts[:'complemento']
      query_params[:'bairro'] = opts[:'bairro'] if opts[:'bairro']
      query_params[:'cidade'] = opts[:'cidade'] if opts[:'cidade']
      query_params[:'uf'] = opts[:'uf'] if opts[:'uf']
      query_params[:'pais'] = opts[:'pais'] if opts[:'pais']
      query_params[:'dataCadastramento'] = opts[:'data_cadastramento'] if opts[:'data_cadastramento']
      query_params[:'contato'] = opts[:'contato'] if opts[:'contato']
      query_params[:'email'] = opts[:'email'] if opts[:'email']
      query_params[:'flagArquivoSecrFazenda'] = opts[:'flag_arquivo_secr_fazenda'] if opts[:'flag_arquivo_secr_fazenda']
      query_params[:'flagCartaoDigitado'] = opts[:'flag_cartao_digitado'] if opts[:'flag_cartao_digitado']
      query_params[:'inativo'] = opts[:'inativo'] if opts[:'inativo']
      query_params[:'idPais'] = opts[:'id_pais'] if opts[:'id_pais']
      query_params[:'mcc'] = opts[:'mcc'] if opts[:'mcc']
      query_params[:'idTipoEstabelecimento'] = opts[:'id_tipo_estabelecimento'] if opts[:'id_tipo_estabelecimento']
      query_params[:'idMoeda'] = opts[:'id_moeda'] if opts[:'id_moeda']
      query_params[:'tipoPagamento'] = opts[:'tipo_pagamento'] if opts[:'tipo_pagamento']
      query_params[:'numeroEstabelecimento'] = opts[:'numero_estabelecimento'] if opts[:'numero_estabelecimento']
      query_params[:'cep2'] = opts[:'cep2'] if opts[:'cep2']
      query_params[:'nomeLogradouro2'] = opts[:'nome_logradouro2'] if opts[:'nome_logradouro2']
      query_params[:'numeroEndereco2'] = opts[:'numero_endereco2'] if opts[:'numero_endereco2']
      query_params[:'complemento2'] = opts[:'complemento2'] if opts[:'complemento2']
      query_params[:'bairro2'] = opts[:'bairro2'] if opts[:'bairro2']
      query_params[:'cidade2'] = opts[:'cidade2'] if opts[:'cidade2']
      query_params[:'uf2'] = opts[:'uf2'] if opts[:'uf2']
      query_params[:'flagMatriz'] = opts[:'flag_matriz'] if opts[:'flag_matriz']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageEstabelecimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_using_get18\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar grupos econ\u00C3\u00B4micos
    # Lista grupos econ\u00C3\u00B4micos cadastrados. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [String] :razao_social Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @option opts [String] :nome_credor Nome do credor
    # @option opts [String] :numero_receita_federal N\u00C3\u00BAmero da Receita Federal
    # @option opts [String] :inscricao_estadual N\u00C3\u00BAmero da inscri\u00C3\u00A7\u00C3\u00A3o estadual
    # @option opts [String] :contato Nome da pessoa para entrar em contato
    # @option opts [Integer] :banco C\u00C3\u00B3digo do banco
    # @option opts [Integer] :agencia Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @option opts [String] :digito_agencia D\u00C3\u00ADgito Verificador da ag\u00C3\u00AAncia
    # @option opts [String] :conta_corrente C\u00C3\u00B3digo da Conta Corrente
    # @option opts [String] :digito_conta_corrente D\u00C3\u00ADgito Verificador da Conta Corrente
    # @option opts [String] :periodicidade Periodicidade do pagamento
    # @option opts [String] :pagamento_semanal Dia para pagamento semanal
    # @option opts [Integer] :pagamento_mensal Dia da data para o pagamento mensal
    # @option opts [Integer] :pagamento_decendial_primeiro Dia da data para o primeiro pagamento decendial
    # @option opts [Integer] :pagamento_decendial_segundo Dia da data para o segundo pagamento decendial
    # @option opts [Integer] :pagamento_decendial_terceiro Dia da data para o terceiro pagamento decendial
    # @option opts [Integer] :pagamento_quinzenal_primeiro Dia da data para o primeiro pagamento quinzenal
    # @option opts [Integer] :pagamento_quinzenal_segundo Dia da data para o segundo pagamento quinzenal
    # @option opts [Float] :percentual_rav Valor percentual do RAV do credor
    # @option opts [String] :recebe_rav Indica se o credor recebe RAV e o tipo
    # @option opts [Float] :percentual_multiplica Percentual Multiplica
    # @option opts [Float] :taxa_adm Taxa Administrativa
    # @option opts [Float] :taxa_banco Taxa do Banco
    # @option opts [Float] :limite_rav Valor limite do RAV
    # @option opts [Integer] :id_credor_rav C\u00C3\u00B3digo identificador do credor RAV
    # @return [PageGrupoEconomicoResponse]
    def listar_using_get20(opts = {})
      data, _status_code, _headers = listar_using_get20_with_http_info(opts)
      return data
    end

    # Listar grupos econ\u00C3\u00B4micos
    # Lista grupos econ\u00C3\u00B4micos cadastrados. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [String] :razao_social Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @option opts [String] :nome_credor Nome do credor
    # @option opts [String] :numero_receita_federal N\u00C3\u00BAmero da Receita Federal
    # @option opts [String] :inscricao_estadual N\u00C3\u00BAmero da inscri\u00C3\u00A7\u00C3\u00A3o estadual
    # @option opts [String] :contato Nome da pessoa para entrar em contato
    # @option opts [Integer] :banco C\u00C3\u00B3digo do banco
    # @option opts [Integer] :agencia Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @option opts [String] :digito_agencia D\u00C3\u00ADgito Verificador da ag\u00C3\u00AAncia
    # @option opts [String] :conta_corrente C\u00C3\u00B3digo da Conta Corrente
    # @option opts [String] :digito_conta_corrente D\u00C3\u00ADgito Verificador da Conta Corrente
    # @option opts [String] :periodicidade Periodicidade do pagamento
    # @option opts [String] :pagamento_semanal Dia para pagamento semanal
    # @option opts [Integer] :pagamento_mensal Dia da data para o pagamento mensal
    # @option opts [Integer] :pagamento_decendial_primeiro Dia da data para o primeiro pagamento decendial
    # @option opts [Integer] :pagamento_decendial_segundo Dia da data para o segundo pagamento decendial
    # @option opts [Integer] :pagamento_decendial_terceiro Dia da data para o terceiro pagamento decendial
    # @option opts [Integer] :pagamento_quinzenal_primeiro Dia da data para o primeiro pagamento quinzenal
    # @option opts [Integer] :pagamento_quinzenal_segundo Dia da data para o segundo pagamento quinzenal
    # @option opts [Float] :percentual_rav Valor percentual do RAV do credor
    # @option opts [String] :recebe_rav Indica se o credor recebe RAV e o tipo
    # @option opts [Float] :percentual_multiplica Percentual Multiplica
    # @option opts [Float] :taxa_adm Taxa Administrativa
    # @option opts [Float] :taxa_banco Taxa do Banco
    # @option opts [Float] :limite_rav Valor limite do RAV
    # @option opts [Integer] :id_credor_rav C\u00C3\u00B3digo identificador do credor RAV
    # @return [Array<(PageGrupoEconomicoResponse, Fixnum, Hash)>] PageGrupoEconomicoResponse data, response status code and response headers
    def listar_using_get20_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_using_get20 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'periodicidade'] && !['DIARIO', 'SEMANAL', 'MENSAL', 'DECENDIAL', 'QUINZENAL'].include?(opts[:'periodicidade'])
        fail ArgumentError, 'invalid value for "periodicidade", must be one of DIARIO, SEMANAL, MENSAL, DECENDIAL, QUINZENAL'
      end
      
      
      
      
      
      
      
      if opts[:'pagamento_semanal'] && !['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO', 'DOMINGO'].include?(opts[:'pagamento_semanal'])
        fail ArgumentError, 'invalid value for "pagamento_semanal", must be one of SEGUNDA, TERCA, QUARTA, QUINTA, SEXTA, SABADO, DOMINGO'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'recebe_rav'] && !['NAO_TEM_PERMISSAO_RAV', 'CREDITO_RAV', 'DEBITO_RAV'].include?(opts[:'recebe_rav'])
        fail ArgumentError, 'invalid value for "recebe_rav", must be one of NAO_TEM_PERMISSAO_RAV, CREDITO_RAV, DEBITO_RAV'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/grupos-economicos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'razaoSocial'] = opts[:'razao_social'] if opts[:'razao_social']
      query_params[:'nomeCredor'] = opts[:'nome_credor'] if opts[:'nome_credor']
      query_params[:'numeroReceitaFederal'] = opts[:'numero_receita_federal'] if opts[:'numero_receita_federal']
      query_params[:'inscricaoEstadual'] = opts[:'inscricao_estadual'] if opts[:'inscricao_estadual']
      query_params[:'contato'] = opts[:'contato'] if opts[:'contato']
      query_params[:'banco'] = opts[:'banco'] if opts[:'banco']
      query_params[:'agencia'] = opts[:'agencia'] if opts[:'agencia']
      query_params[:'digitoAgencia'] = opts[:'digito_agencia'] if opts[:'digito_agencia']
      query_params[:'contaCorrente'] = opts[:'conta_corrente'] if opts[:'conta_corrente']
      query_params[:'digitoContaCorrente'] = opts[:'digito_conta_corrente'] if opts[:'digito_conta_corrente']
      query_params[:'periodicidade'] = opts[:'periodicidade'] if opts[:'periodicidade']
      query_params[:'pagamentoSemanal'] = opts[:'pagamento_semanal'] if opts[:'pagamento_semanal']
      query_params[:'pagamentoMensal'] = opts[:'pagamento_mensal'] if opts[:'pagamento_mensal']
      query_params[:'pagamentoDecendialPrimeiro'] = opts[:'pagamento_decendial_primeiro'] if opts[:'pagamento_decendial_primeiro']
      query_params[:'pagamentoDecendialSegundo'] = opts[:'pagamento_decendial_segundo'] if opts[:'pagamento_decendial_segundo']
      query_params[:'pagamentoDecendialTerceiro'] = opts[:'pagamento_decendial_terceiro'] if opts[:'pagamento_decendial_terceiro']
      query_params[:'pagamentoQuinzenalPrimeiro'] = opts[:'pagamento_quinzenal_primeiro'] if opts[:'pagamento_quinzenal_primeiro']
      query_params[:'pagamentoQuinzenalSegundo'] = opts[:'pagamento_quinzenal_segundo'] if opts[:'pagamento_quinzenal_segundo']
      query_params[:'percentualRAV'] = opts[:'percentual_rav'] if opts[:'percentual_rav']
      query_params[:'recebeRAV'] = opts[:'recebe_rav'] if opts[:'recebe_rav']
      query_params[:'percentualMultiplica'] = opts[:'percentual_multiplica'] if opts[:'percentual_multiplica']
      query_params[:'taxaAdm'] = opts[:'taxa_adm'] if opts[:'taxa_adm']
      query_params[:'taxaBanco'] = opts[:'taxa_banco'] if opts[:'taxa_banco']
      query_params[:'limiteRAV'] = opts[:'limite_rav'] if opts[:'limite_rav']
      query_params[:'idCredorRAV'] = opts[:'id_credor_rav'] if opts[:'id_credor_rav']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageGrupoEconomicoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_using_get20\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista as Maquinetas
    # Este m\u00C3\u00A9todo permite que sejam listadas as maquinetas existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_estabelecimento C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Estabelecimento (id).
    # @return [PageMaquinetaResponse]
    def listar_using_get22(opts = {})
      data, _status_code, _headers = listar_using_get22_with_http_info(opts)
      return data
    end

    # Lista as Maquinetas
    # Este m\u00C3\u00A9todo permite que sejam listadas as maquinetas existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_estabelecimento C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Estabelecimento (id).
    # @return [Array<(PageMaquinetaResponse, Fixnum, Hash)>] PageMaquinetaResponse data, response status code and response headers
    def listar_using_get22_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_using_get22 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/maquinetas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idEstabelecimento'] = opts[:'id_estabelecimento'] if opts[:'id_estabelecimento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageMaquinetaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_using_get22\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista os tipos de moedas do emissor 
    # Este recurso permite que sejam listados os tipos de moedas existentes na base de dados do emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [String] :codigo_moeda C\u00C3\u00B3digo identificador do tipo de moeda.
    # @option opts [String] :simbolo S\u00C3\u00ADmbolo da Moeda.
    # @option opts [String] :descricao Descri\u00C3\u00A7\u00C3\u00A3o do tipo da moeda.
    # @return [PageMoedaResponse]
    def listar_using_get23(opts = {})
      data, _status_code, _headers = listar_using_get23_with_http_info(opts)
      return data
    end

    # Lista os tipos de moedas do emissor 
    # Este recurso permite que sejam listados os tipos de moedas existentes na base de dados do emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [String] :codigo_moeda C\u00C3\u00B3digo identificador do tipo de moeda.
    # @option opts [String] :simbolo S\u00C3\u00ADmbolo da Moeda.
    # @option opts [String] :descricao Descri\u00C3\u00A7\u00C3\u00A3o do tipo da moeda.
    # @return [Array<(PageMoedaResponse, Fixnum, Hash)>] PageMoedaResponse data, response status code and response headers
    def listar_using_get23_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_using_get23 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-moedas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'codigoMoeda'] = opts[:'codigo_moeda'] if opts[:'codigo_moeda']
      query_params[:'simbolo'] = opts[:'simbolo'] if opts[:'simbolo']
      query_params[:'descricao'] = opts[:'descricao'] if opts[:'descricao']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageMoedaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_using_get23\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista as Regras Opera\u00C3\u00A7\u00C3\u00B5es
    # Este m\u00C3\u00A9todo permite que sejam listados as Regras opera\u00C3\u00A7\u00C3\u00B5es existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_operacao Apresenta o id da Opera\u00C3\u00A7\u00C3\u00A3o.
    # @option opts [Integer] :id_credor Apresenta o id do Credor.
    # @option opts [Integer] :id_produto Apresenta o id do produto que vai ser alterado.
    # @return [PageOperacaoCredorResponse]
    def listar_using_get24(opts = {})
      data, _status_code, _headers = listar_using_get24_with_http_info(opts)
      return data
    end

    # Lista as Regras Opera\u00C3\u00A7\u00C3\u00B5es
    # Este m\u00C3\u00A9todo permite que sejam listados as Regras opera\u00C3\u00A7\u00C3\u00B5es existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_operacao Apresenta o id da Opera\u00C3\u00A7\u00C3\u00A3o.
    # @option opts [Integer] :id_credor Apresenta o id do Credor.
    # @option opts [Integer] :id_produto Apresenta o id do produto que vai ser alterado.
    # @return [Array<(PageOperacaoCredorResponse, Fixnum, Hash)>] PageOperacaoCredorResponse data, response status code and response headers
    def listar_using_get24_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_using_get24 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/regras-operacoes-estabelecimentos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idOperacao'] = opts[:'id_operacao'] if opts[:'id_operacao']
      query_params[:'idCredor'] = opts[:'id_credor'] if opts[:'id_credor']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOperacaoCredorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_using_get24\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista os Telefones Estabelecimentos
    # Este m\u00C3\u00A9todo permite que sejam listados os telefones dos estabelecimentos existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_estabelecimento C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Estabelecimento (id).
    # @return [PageTelefoneEstabelecimentoResponse]
    def listar_using_get35(opts = {})
      data, _status_code, _headers = listar_using_get35_with_http_info(opts)
      return data
    end

    # Lista os Telefones Estabelecimentos
    # Este m\u00C3\u00A9todo permite que sejam listados os telefones dos estabelecimentos existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_estabelecimento C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Estabelecimento (id).
    # @return [Array<(PageTelefoneEstabelecimentoResponse, Fixnum, Hash)>] PageTelefoneEstabelecimentoResponse data, response status code and response headers
    def listar_using_get35_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_using_get35 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/telefones-estabelecimentos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idEstabelecimento'] = opts[:'id_estabelecimento'] if opts[:'id_estabelecimento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTelefoneEstabelecimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_using_get35\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista os Terminais cadastrados no Emissor
    # Este m\u00C3\u00A9todo permite que sejam listados os terminais existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Terminal (id).
    # @option opts [String] :terminal C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do terminal.
    # @option opts [Integer] :numero_estabelecimento N\u00C3\u00BAmero do estabelecimento a qual o terminal pertence.
    # @option opts [Integer] :id_estabelecimento N\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento a qual o terminal pertence.
    # @return [PageTerminalResponse]
    def listar_using_get37(opts = {})
      data, _status_code, _headers = listar_using_get37_with_http_info(opts)
      return data
    end

    # Lista os Terminais cadastrados no Emissor
    # Este m\u00C3\u00A9todo permite que sejam listados os terminais existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Terminal (id).
    # @option opts [String] :terminal C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do terminal.
    # @option opts [Integer] :numero_estabelecimento N\u00C3\u00BAmero do estabelecimento a qual o terminal pertence.
    # @option opts [Integer] :id_estabelecimento N\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento a qual o terminal pertence.
    # @return [Array<(PageTerminalResponse, Fixnum, Hash)>] PageTerminalResponse data, response status code and response headers
    def listar_using_get37_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_using_get37 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/terminais".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'terminal'] = opts[:'terminal'] if opts[:'terminal']
      query_params[:'numeroEstabelecimento'] = opts[:'numero_estabelecimento'] if opts[:'numero_estabelecimento']
      query_params[:'idEstabelecimento'] = opts[:'id_estabelecimento'] if opts[:'id_estabelecimento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTerminalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_using_get37\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista os V\u00C3\u00ADnculos dos estabelecimento com os adquirentes
    # Este m\u00C3\u00A9todo permite que sejam listados os V\u00C3\u00ADnculos dos estabelecimento com os adquirentes.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_adquirente C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do adquirente (id).
    # @option opts [Integer] :id_estabelecimento C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento.
    # @option opts [String] :codigo_estabelecimento_adquirente C\u00C3\u00B3digo do v\u00C3\u00ADnculo entre o estabelecimento e o adquirente.
    # @return [PageVinculoEstabelecimentoAdquirenteResponse]
    def listar_using_get48(opts = {})
      data, _status_code, _headers = listar_using_get48_with_http_info(opts)
      return data
    end

    # Lista os V\u00C3\u00ADnculos dos estabelecimento com os adquirentes
    # Este m\u00C3\u00A9todo permite que sejam listados os V\u00C3\u00ADnculos dos estabelecimento com os adquirentes.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_adquirente C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do adquirente (id).
    # @option opts [Integer] :id_estabelecimento C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento.
    # @option opts [String] :codigo_estabelecimento_adquirente C\u00C3\u00B3digo do v\u00C3\u00ADnculo entre o estabelecimento e o adquirente.
    # @return [Array<(PageVinculoEstabelecimentoAdquirenteResponse, Fixnum, Hash)>] PageVinculoEstabelecimentoAdquirenteResponse data, response status code and response headers
    def listar_using_get48_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_using_get48 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/adquirentes-estabelecimento".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idAdquirente'] = opts[:'id_adquirente'] if opts[:'id_adquirente']
      query_params[:'idEstabelecimento'] = opts[:'id_estabelecimento'] if opts[:'id_estabelecimento']
      query_params[:'codigoEstabelecimentoAdquirente'] = opts[:'codigo_estabelecimento_adquirente'] if opts[:'codigo_estabelecimento_adquirente']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageVinculoEstabelecimentoAdquirenteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_using_get48\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista os v\u00C3\u00ADnculos cadastrados no Emissor
    # Este m\u00C3\u00A9todo permite que sejam listados os v\u00C3\u00ADnculos opera\u00C3\u00A7\u00C3\u00B5es existentes na base de dados do Emissor.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_produto C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id).
    # @option opts [Integer] :id_operacao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Opera\u00C3\u00A7\u00C3\u00A3o (id).
    # @option opts [Integer] :codigo_mcc C\u00C3\u00B3digo MCC.
    # @return [PageVinculoOperacaoResponse]
    def listar_using_get49(id, opts = {})
      data, _status_code, _headers = listar_using_get49_with_http_info(id, opts)
      return data
    end

    # Lista os v\u00C3\u00ADnculos cadastrados no Emissor
    # Este m\u00C3\u00A9todo permite que sejam listados os v\u00C3\u00ADnculos opera\u00C3\u00A7\u00C3\u00B5es existentes na base de dados do Emissor.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_produto C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id).
    # @option opts [Integer] :id_operacao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Opera\u00C3\u00A7\u00C3\u00A3o (id).
    # @option opts [Integer] :codigo_mcc C\u00C3\u00B3digo MCC.
    # @return [Array<(PageVinculoOperacaoResponse, Fixnum, Hash)>] PageVinculoOperacaoResponse data, response status code and response headers
    def listar_using_get49_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_using_get49 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.listar_using_get49" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/estabelecimentos/{id}/operacoes".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']
      query_params[:'idOperacao'] = opts[:'id_operacao'] if opts[:'id_operacao']
      query_params[:'codigoMCC'] = opts[:'codigo_mcc'] if opts[:'codigo_mcc']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageVinculoOperacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_using_get49\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza o cadastro de uma nova maquineta para um estabelecimento 
    # Este m\u00C3\u00A9todo permite que seja cadastrada uma nova maquineta para um estabelecimento.
    # @param maquineta_persist maquinetaPersist
    # @param [Hash] opts the optional parameters
    # @return [MaquinetaResponse]
    def salvar_using_post15(maquineta_persist, opts = {})
      data, _status_code, _headers = salvar_using_post15_with_http_info(maquineta_persist, opts)
      return data
    end

    # Realiza o cadastro de uma nova maquineta para um estabelecimento 
    # Este m\u00C3\u00A9todo permite que seja cadastrada uma nova maquineta para um estabelecimento.
    # @param maquineta_persist maquinetaPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(MaquinetaResponse, Fixnum, Hash)>] MaquinetaResponse data, response status code and response headers
    def salvar_using_post15_with_http_info(maquineta_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.salvar_using_post15 ..."
      end
      
      
      # verify the required parameter 'maquineta_persist' is set
      fail ArgumentError, "Missing the required parameter 'maquineta_persist' when calling EstabelecimentoApi.salvar_using_post15" if maquineta_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/maquinetas".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(maquineta_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MaquinetaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#salvar_using_post15\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza o cadastro de uma nova Regra Opera\u00C3\u00A7\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite que seja cadastrada uma nova Regra Opera\u00C3\u00A7\u00C3\u00A3o.
    # @param oprecao_credor_persist oprecaoCredorPersist
    # @param [Hash] opts the optional parameters
    # @return [OperacaoCredorResponse]
    def salvar_using_post16(oprecao_credor_persist, opts = {})
      data, _status_code, _headers = salvar_using_post16_with_http_info(oprecao_credor_persist, opts)
      return data
    end

    # Realiza o cadastro de uma nova Regra Opera\u00C3\u00A7\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite que seja cadastrada uma nova Regra Opera\u00C3\u00A7\u00C3\u00A3o.
    # @param oprecao_credor_persist oprecaoCredorPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(OperacaoCredorResponse, Fixnum, Hash)>] OperacaoCredorResponse data, response status code and response headers
    def salvar_using_post16_with_http_info(oprecao_credor_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.salvar_using_post16 ..."
      end
      
      
      # verify the required parameter 'oprecao_credor_persist' is set
      fail ArgumentError, "Missing the required parameter 'oprecao_credor_persist' when calling EstabelecimentoApi.salvar_using_post16" if oprecao_credor_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/regras-operacoes-estabelecimentos".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(oprecao_credor_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OperacaoCredorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#salvar_using_post16\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza o cadastro de um novo telefone para um estabelecimento 
    # Este m\u00C3\u00A9todo permite que seja cadastrado um novo telefone para um estabelecimento.
    # @param id_estabelecimento C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento (id).
    # @param ddd C\u00C3\u00B3digo DDD do telefone (id).
    # @param telefone N\u00C3\u00BAmero do telefone.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ramal N\u00C3\u00BAmero do ramal.
    # @return [TelefoneEstabelecimentoResponse]
    def salvar_using_post21(id_estabelecimento, ddd, telefone, opts = {})
      data, _status_code, _headers = salvar_using_post21_with_http_info(id_estabelecimento, ddd, telefone, opts)
      return data
    end

    # Realiza o cadastro de um novo telefone para um estabelecimento 
    # Este m\u00C3\u00A9todo permite que seja cadastrado um novo telefone para um estabelecimento.
    # @param id_estabelecimento C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento (id).
    # @param ddd C\u00C3\u00B3digo DDD do telefone (id).
    # @param telefone N\u00C3\u00BAmero do telefone.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ramal N\u00C3\u00BAmero do ramal.
    # @return [Array<(TelefoneEstabelecimentoResponse, Fixnum, Hash)>] TelefoneEstabelecimentoResponse data, response status code and response headers
    def salvar_using_post21_with_http_info(id_estabelecimento, ddd, telefone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.salvar_using_post21 ..."
      end
      
      
      # verify the required parameter 'id_estabelecimento' is set
      fail ArgumentError, "Missing the required parameter 'id_estabelecimento' when calling EstabelecimentoApi.salvar_using_post21" if id_estabelecimento.nil?
      
      
      
      
      
      
      # verify the required parameter 'ddd' is set
      fail ArgumentError, "Missing the required parameter 'ddd' when calling EstabelecimentoApi.salvar_using_post21" if ddd.nil?
      
      
      
      
      
      
      # verify the required parameter 'telefone' is set
      fail ArgumentError, "Missing the required parameter 'telefone' when calling EstabelecimentoApi.salvar_using_post21" if telefone.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/telefones-estabelecimentos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idEstabelecimento'] = id_estabelecimento
      query_params[:'ddd'] = ddd
      query_params[:'telefone'] = telefone
      query_params[:'ramal'] = opts[:'ramal'] if opts[:'ramal']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TelefoneEstabelecimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#salvar_using_post21\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza o cadastro de um novo Terminal
    # Este m\u00C3\u00A9todo permite que seja cadastrado um novo Terminal.
    # @param terminal_persist terminalPersist
    # @param [Hash] opts the optional parameters
    # @return [TerminalResponse]
    def salvar_using_post23(terminal_persist, opts = {})
      data, _status_code, _headers = salvar_using_post23_with_http_info(terminal_persist, opts)
      return data
    end

    # Realiza o cadastro de um novo Terminal
    # Este m\u00C3\u00A9todo permite que seja cadastrado um novo Terminal.
    # @param terminal_persist terminalPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(TerminalResponse, Fixnum, Hash)>] TerminalResponse data, response status code and response headers
    def salvar_using_post23_with_http_info(terminal_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.salvar_using_post23 ..."
      end
      
      
      # verify the required parameter 'terminal_persist' is set
      fail ArgumentError, "Missing the required parameter 'terminal_persist' when calling EstabelecimentoApi.salvar_using_post23" if terminal_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/terminais".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(terminal_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TerminalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#salvar_using_post23\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza o cadastro de um novo VinculoEstabelecimentoAdquirente
    # Este m\u00C3\u00A9todo permite que seja cadastrado um novo VinculoEstabelecimentoAdquirente.
    # @param vinculo_estabelecimento_adquirente_persist vinculoEstabelecimentoAdquirentePersist
    # @param [Hash] opts the optional parameters
    # @return [VinculoEstabelecimentoAdquirenteResponse]
    def salvar_using_post28(vinculo_estabelecimento_adquirente_persist, opts = {})
      data, _status_code, _headers = salvar_using_post28_with_http_info(vinculo_estabelecimento_adquirente_persist, opts)
      return data
    end

    # Realiza o cadastro de um novo VinculoEstabelecimentoAdquirente
    # Este m\u00C3\u00A9todo permite que seja cadastrado um novo VinculoEstabelecimentoAdquirente.
    # @param vinculo_estabelecimento_adquirente_persist vinculoEstabelecimentoAdquirentePersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(VinculoEstabelecimentoAdquirenteResponse, Fixnum, Hash)>] VinculoEstabelecimentoAdquirenteResponse data, response status code and response headers
    def salvar_using_post28_with_http_info(vinculo_estabelecimento_adquirente_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.salvar_using_post28 ..."
      end
      
      
      # verify the required parameter 'vinculo_estabelecimento_adquirente_persist' is set
      fail ArgumentError, "Missing the required parameter 'vinculo_estabelecimento_adquirente_persist' when calling EstabelecimentoApi.salvar_using_post28" if vinculo_estabelecimento_adquirente_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/adquirentes-estabelecimento".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(vinculo_estabelecimento_adquirente_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VinculoEstabelecimentoAdquirenteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#salvar_using_post28\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
