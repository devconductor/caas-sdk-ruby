=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'date'

module Pier
  # Representa\u00C3\u00A7\u00C3\u00A3o da resposta do boleto de fatura
  class BoletoResponse
    # N\u00C3\u00BAmero do documento \u00C3\u00A9 o c\u00C3\u00B3digo informado pelo banco para identifica\u00C3\u00A7\u00C3\u00A3o do cliente
    attr_accessor :numero_do_documento

    # Data do processamento (emiss\u00C3\u00A3o ou faturamento) do boleto
    attr_accessor :data_processamento

    # Data do documento (impress\u00C3\u00A3o)
    attr_accessor :data_documento

    # Data do vencimento
    attr_accessor :data_vencimento

    # Data do fechamento
    attr_accessor :data_fechamento

    # Valor do Boleto.
    attr_accessor :valor_boleto

    # Benefici\u00C3\u00A1rio \u00C3\u00A9 a pessoa/empresa que gera o boleto
    attr_accessor :nome_beneficiario

    # Documento do Beneficiario.
    attr_accessor :documento_beneficiario

    # Ag\u00C3\u00AAncia.
    attr_accessor :agencia

    # C\u00C3\u00B3digo do benefici\u00C3\u00A1rio
    attr_accessor :codigo_beneficiario

    # N\u00C3\u00BAmero do conv\u00C3\u00AAnio fornecido pelo banco \u00C3\u00A9 o c\u00C3\u00B3digo que identifica um emissor junto ao seu banco para associar seus boletos.
    attr_accessor :numero_convenio

    # D\u00C3\u00ADgito do c\u00C3\u00B3digo do benefici\u00C3\u00A1rio
    attr_accessor :digito_codigo_beneficiario

    # Carteira \u00C3\u00A9 o c\u00C3\u00B3digo informado pelo banco pra identifica\u00C3\u00A7\u00C3\u00A3o do tipo do boleto
    attr_accessor :carteira

    # Nosso n\u00C3\u00BAmero \u00C3\u00A9 o c\u00C3\u00B3digo que o benefici\u00C3\u00A1rio escolhe para manter controle sobre seus boletos. Esse valor serve para o cedente identificar quais boletos foram pagos ou n\u00C3\u00A3o. Recomenda-se o uso de n\u00C3\u00BAmeros sequ\u00C3\u00AAnciais, na gera\u00C3\u00A7\u00C3\u00A3o de diversos boletos, para facilitar a identifica\u00C3\u00A7\u00C3\u00A3o dos boletos pagos
    attr_accessor :nosso_numero

    # D\u00C3\u00ADgito do nosso n\u00C3\u00BAmero
    attr_accessor :digito_nosso_numero

    # Banco
    attr_accessor :banco

    # Aceite informa ao banco se deve aceitar o boleto ap\u00C3\u00B3s a data de vencimento (padr\u00C3\u00A3o: \"N\")
    attr_accessor :aceite

    # Esp\u00C3\u00A9cie do documento \u00C3\u00A9 o identificador do tipo de boleto (padr\u00C3\u00A3o: \"DV\")
    attr_accessor :especie_do_documento

    # Esp\u00C3\u00A9cie \u00C3\u00A9 o identificador da moeda do boleto (padr\u00C3\u00A3o: \"R$\")
    attr_accessor :especie

    # Instru\u00C3\u00A7\u00C3\u00B5es para o benefici\u00C3\u00A1rio
    attr_accessor :instrucoes

    # Locais de pagamento
    attr_accessor :locais_de_pagamento

    # Pagador \u00C3\u00A9 a pessoa/empresa que deve pagar o boleto
    attr_accessor :nome_pagador

    # Documento do pagador (CPF ou CNPJ)
    attr_accessor :documento_pagador

    # Logradouro do pagador
    attr_accessor :logradouro_pagador

    # Bairro do pagador
    attr_accessor :bairro_pagador

    # CEP do pagador
    attr_accessor :cep_pagador

    # Cidade do pagador
    attr_accessor :cidade_pagador

    # Unidade federativa do pagador
    attr_accessor :uf_pagador

    # Valor num\u00C3\u00A9rico do c\u00C3\u00B3digo de barras
    attr_accessor :codigo_de_barras

    # Linha digit\u00C3\u00A1vel formatada
    attr_accessor :linha_digitavel


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'numero_do_documento' => :'numeroDoDocumento',
        
        :'data_processamento' => :'dataProcessamento',
        
        :'data_documento' => :'dataDocumento',
        
        :'data_vencimento' => :'dataVencimento',
        
        :'data_fechamento' => :'dataFechamento',
        
        :'valor_boleto' => :'valorBoleto',
        
        :'nome_beneficiario' => :'nomeBeneficiario',
        
        :'documento_beneficiario' => :'documentoBeneficiario',
        
        :'agencia' => :'agencia',
        
        :'codigo_beneficiario' => :'codigoBeneficiario',
        
        :'numero_convenio' => :'numeroConvenio',
        
        :'digito_codigo_beneficiario' => :'digitoCodigoBeneficiario',
        
        :'carteira' => :'carteira',
        
        :'nosso_numero' => :'nossoNumero',
        
        :'digito_nosso_numero' => :'digitoNossoNumero',
        
        :'banco' => :'banco',
        
        :'aceite' => :'aceite',
        
        :'especie_do_documento' => :'especieDoDocumento',
        
        :'especie' => :'especie',
        
        :'instrucoes' => :'instrucoes',
        
        :'locais_de_pagamento' => :'locaisDePagamento',
        
        :'nome_pagador' => :'nomePagador',
        
        :'documento_pagador' => :'documentoPagador',
        
        :'logradouro_pagador' => :'logradouroPagador',
        
        :'bairro_pagador' => :'bairroPagador',
        
        :'cep_pagador' => :'cepPagador',
        
        :'cidade_pagador' => :'cidadePagador',
        
        :'uf_pagador' => :'ufPagador',
        
        :'codigo_de_barras' => :'codigoDeBarras',
        
        :'linha_digitavel' => :'linhaDigitavel'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'numero_do_documento' => :'String',
        
        :'data_processamento' => :'String',
        
        :'data_documento' => :'String',
        
        :'data_vencimento' => :'String',
        
        :'data_fechamento' => :'String',
        
        :'valor_boleto' => :'Float',
        
        :'nome_beneficiario' => :'String',
        
        :'documento_beneficiario' => :'String',
        
        :'agencia' => :'String',
        
        :'codigo_beneficiario' => :'String',
        
        :'numero_convenio' => :'String',
        
        :'digito_codigo_beneficiario' => :'String',
        
        :'carteira' => :'String',
        
        :'nosso_numero' => :'String',
        
        :'digito_nosso_numero' => :'String',
        
        :'banco' => :'String',
        
        :'aceite' => :'BOOLEAN',
        
        :'especie_do_documento' => :'String',
        
        :'especie' => :'String',
        
        :'instrucoes' => :'Array<String>',
        
        :'locais_de_pagamento' => :'Array<String>',
        
        :'nome_pagador' => :'String',
        
        :'documento_pagador' => :'String',
        
        :'logradouro_pagador' => :'String',
        
        :'bairro_pagador' => :'String',
        
        :'cep_pagador' => :'String',
        
        :'cidade_pagador' => :'String',
        
        :'uf_pagador' => :'String',
        
        :'codigo_de_barras' => :'String',
        
        :'linha_digitavel' => :'String'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'numeroDoDocumento']
        
        
        self.numero_do_documento = attributes[:'numeroDoDocumento']
        
      
      end

      
      if attributes[:'dataProcessamento']
        
        
        self.data_processamento = attributes[:'dataProcessamento']
        
      
      end

      
      if attributes[:'dataDocumento']
        
        
        self.data_documento = attributes[:'dataDocumento']
        
      
      end

      
      if attributes[:'dataVencimento']
        
        
        self.data_vencimento = attributes[:'dataVencimento']
        
      
      end

      
      if attributes[:'dataFechamento']
        
        
        self.data_fechamento = attributes[:'dataFechamento']
        
      
      end

      
      if attributes[:'valorBoleto']
        
        
        self.valor_boleto = attributes[:'valorBoleto']
        
      
      end

      
      if attributes[:'nomeBeneficiario']
        
        
        self.nome_beneficiario = attributes[:'nomeBeneficiario']
        
      
      end

      
      if attributes[:'documentoBeneficiario']
        
        
        self.documento_beneficiario = attributes[:'documentoBeneficiario']
        
      
      end

      
      if attributes[:'agencia']
        
        
        self.agencia = attributes[:'agencia']
        
      
      end

      
      if attributes[:'codigoBeneficiario']
        
        
        self.codigo_beneficiario = attributes[:'codigoBeneficiario']
        
      
      end

      
      if attributes[:'numeroConvenio']
        
        
        self.numero_convenio = attributes[:'numeroConvenio']
        
      
      end

      
      if attributes[:'digitoCodigoBeneficiario']
        
        
        self.digito_codigo_beneficiario = attributes[:'digitoCodigoBeneficiario']
        
      
      end

      
      if attributes[:'carteira']
        
        
        self.carteira = attributes[:'carteira']
        
      
      end

      
      if attributes[:'nossoNumero']
        
        
        self.nosso_numero = attributes[:'nossoNumero']
        
      
      end

      
      if attributes[:'digitoNossoNumero']
        
        
        self.digito_nosso_numero = attributes[:'digitoNossoNumero']
        
      
      end

      
      if attributes[:'banco']
        
        
        self.banco = attributes[:'banco']
        
      
      end

      
      if attributes[:'aceite']
        
        
        self.aceite = attributes[:'aceite']
        
      
      end

      
      if attributes[:'especieDoDocumento']
        
        
        self.especie_do_documento = attributes[:'especieDoDocumento']
        
      
      end

      
      if attributes[:'especie']
        
        
        self.especie = attributes[:'especie']
        
      
      end

      
      if attributes[:'instrucoes']
        
        if (value = attributes[:'instrucoes']).is_a?(Array)
          self.instrucoes = value
        end
        
        
      
      end

      
      if attributes[:'locaisDePagamento']
        
        if (value = attributes[:'locaisDePagamento']).is_a?(Array)
          self.locais_de_pagamento = value
        end
        
        
      
      end

      
      if attributes[:'nomePagador']
        
        
        self.nome_pagador = attributes[:'nomePagador']
        
      
      end

      
      if attributes[:'documentoPagador']
        
        
        self.documento_pagador = attributes[:'documentoPagador']
        
      
      end

      
      if attributes[:'logradouroPagador']
        
        
        self.logradouro_pagador = attributes[:'logradouroPagador']
        
      
      end

      
      if attributes[:'bairroPagador']
        
        
        self.bairro_pagador = attributes[:'bairroPagador']
        
      
      end

      
      if attributes[:'cepPagador']
        
        
        self.cep_pagador = attributes[:'cepPagador']
        
      
      end

      
      if attributes[:'cidadePagador']
        
        
        self.cidade_pagador = attributes[:'cidadePagador']
        
      
      end

      
      if attributes[:'ufPagador']
        
        
        self.uf_pagador = attributes[:'ufPagador']
        
      
      end

      
      if attributes[:'codigoDeBarras']
        
        
        self.codigo_de_barras = attributes[:'codigoDeBarras']
        
      
      end

      
      if attributes[:'linhaDigitavel']
        
        
        self.linha_digitavel = attributes[:'linhaDigitavel']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          numero_do_documento == o.numero_do_documento &&
          data_processamento == o.data_processamento &&
          data_documento == o.data_documento &&
          data_vencimento == o.data_vencimento &&
          data_fechamento == o.data_fechamento &&
          valor_boleto == o.valor_boleto &&
          nome_beneficiario == o.nome_beneficiario &&
          documento_beneficiario == o.documento_beneficiario &&
          agencia == o.agencia &&
          codigo_beneficiario == o.codigo_beneficiario &&
          numero_convenio == o.numero_convenio &&
          digito_codigo_beneficiario == o.digito_codigo_beneficiario &&
          carteira == o.carteira &&
          nosso_numero == o.nosso_numero &&
          digito_nosso_numero == o.digito_nosso_numero &&
          banco == o.banco &&
          aceite == o.aceite &&
          especie_do_documento == o.especie_do_documento &&
          especie == o.especie &&
          instrucoes == o.instrucoes &&
          locais_de_pagamento == o.locais_de_pagamento &&
          nome_pagador == o.nome_pagador &&
          documento_pagador == o.documento_pagador &&
          logradouro_pagador == o.logradouro_pagador &&
          bairro_pagador == o.bairro_pagador &&
          cep_pagador == o.cep_pagador &&
          cidade_pagador == o.cidade_pagador &&
          uf_pagador == o.uf_pagador &&
          codigo_de_barras == o.codigo_de_barras &&
          linha_digitavel == o.linha_digitavel
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [numero_do_documento, data_processamento, data_documento, data_vencimento, data_fechamento, valor_boleto, nome_beneficiario, documento_beneficiario, agencia, codigo_beneficiario, numero_convenio, digito_codigo_beneficiario, carteira, nosso_numero, digito_nosso_numero, banco, aceite, especie_do_documento, especie, instrucoes, locais_de_pagamento, nome_pagador, documento_pagador, logradouro_pagador, bairro_pagador, cep_pagador, cidade_pagador, uf_pagador, codigo_de_barras, linha_digitavel].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end


end
