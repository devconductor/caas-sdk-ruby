=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class ContaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # Lan\u00C3\u00A7a um ajuste para a conta do id informado
    # Este recurso insere um ajuste para a conta do id informado
    # @param id Id Conta
    # @param id_tipo_ajuste C\u00C3\u00B3digo identificador do tipo de ajuste.
    # @param data_ajuste Data do ajuste.
    # @param valor_ajuste Valor do ajuste
    # @param [Hash] opts the optional parameters
    # @return [AjusteResponse]
    def ajustar_conta_using_post(id, id_tipo_ajuste, data_ajuste, valor_ajuste, opts = {})
      data, _status_code, _headers = ajustar_conta_using_post_with_http_info(id, id_tipo_ajuste, data_ajuste, valor_ajuste, opts)
      return data
    end

    # Lan\u00C3\u00A7a um ajuste para a conta do id informado
    # Este recurso insere um ajuste para a conta do id informado
    # @param id Id Conta
    # @param id_tipo_ajuste C\u00C3\u00B3digo identificador do tipo de ajuste.
    # @param data_ajuste Data do ajuste.
    # @param valor_ajuste Valor do ajuste
    # @param [Hash] opts the optional parameters
    # @return [Array<(AjusteResponse, Fixnum, Hash)>] AjusteResponse data, response status code and response headers
    def ajustar_conta_using_post_with_http_info(id, id_tipo_ajuste, data_ajuste, valor_ajuste, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.ajustar_conta_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.ajustar_conta_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_tipo_ajuste' is set
      fail ArgumentError, "Missing the required parameter 'id_tipo_ajuste' when calling ContaApi.ajustar_conta_using_post" if id_tipo_ajuste.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_ajuste' is set
      fail ArgumentError, "Missing the required parameter 'data_ajuste' when calling ContaApi.ajustar_conta_using_post" if data_ajuste.nil?
      
      
      
      
      
      
      # verify the required parameter 'valor_ajuste' is set
      fail ArgumentError, "Missing the required parameter 'valor_ajuste' when calling ContaApi.ajustar_conta_using_post" if valor_ajuste.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/ajustes-financeiros".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'idTipoAjuste'] = id_tipo_ajuste
      query_params[:'dataAjuste'] = data_ajuste
      query_params[:'valorAjuste'] = valor_ajuste

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AjusteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#ajustar_conta_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realiza a altera\u00C3\u00A7\u00C3\u00A3o dos limites da conta
    # Esse recurso permite realizar a altera\u00C3\u00A7\u00C3\u00A3o dos Limites de uma determinada Conta.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param limite_global Apresenta o valor do limite de cr\u00C3\u00A9dito que o portador do cart\u00C3\u00A3o possui.
    # @param limite_compra Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador possui para uso exclusivo em Compras Nacionais.
    # @param limite_parcelado Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador possui para realizar transa\u00C3\u00A7\u00C3\u00B5es de compras parceladas.
    # @param limite_parcelas Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que portador pode acumular a partir da soma das parcelas das compras que forem realizadas nesta modalidade.
    # @param limite_saque_global Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador pode utilizar para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Nacional.
    # @param limite_saque_periodo Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador pode utilizar para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Nacional dentro de cada ciclo de faturamento.
    # @param limite_consignado Quando utilizado pelo emissor, este campo apresenta o valor da margem de cr\u00C3\u00A9dito que ele poder\u00C3\u00A1 utilizar para ser cobrado de forma consignada (desconto em folha) em seu sal\u00C3\u00A1rio/vencimentos.
    # @param limite_internacional_compra Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador possui para uso exclusivo em Compras Internacionais.
    # @param limite_internacional_parcelado Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador possui para realizar transa\u00C3\u00A7\u00C3\u00B5es Internacionais de Compras Parceladas.
    # @param limite_internacional_parcelas Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que portador pode acumular a partir da soma das parcelas das compras internacionais que forem realizadas nesta modalidade.
    # @param limite_internacional_saque_global Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador pode utilizar para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Internacional.
    # @param limite_internacional_saque_periodo Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador pode utilizar para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Internacional dentro de cada ciclo de faturamento.
    # @param [Hash] opts the optional parameters
    # @return [LimiteDisponibilidade]
    def alterar_limite_using_put(id, limite_global, limite_compra, limite_parcelado, limite_parcelas, limite_saque_global, limite_saque_periodo, limite_consignado, limite_internacional_compra, limite_internacional_parcelado, limite_internacional_parcelas, limite_internacional_saque_global, limite_internacional_saque_periodo, opts = {})
      data, _status_code, _headers = alterar_limite_using_put_with_http_info(id, limite_global, limite_compra, limite_parcelado, limite_parcelas, limite_saque_global, limite_saque_periodo, limite_consignado, limite_internacional_compra, limite_internacional_parcelado, limite_internacional_parcelas, limite_internacional_saque_global, limite_internacional_saque_periodo, opts)
      return data
    end

    # Realiza a altera\u00C3\u00A7\u00C3\u00A3o dos limites da conta
    # Esse recurso permite realizar a altera\u00C3\u00A7\u00C3\u00A3o dos Limites de uma determinada Conta.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param limite_global Apresenta o valor do limite de cr\u00C3\u00A9dito que o portador do cart\u00C3\u00A3o possui.
    # @param limite_compra Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador possui para uso exclusivo em Compras Nacionais.
    # @param limite_parcelado Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador possui para realizar transa\u00C3\u00A7\u00C3\u00B5es de compras parceladas.
    # @param limite_parcelas Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que portador pode acumular a partir da soma das parcelas das compras que forem realizadas nesta modalidade.
    # @param limite_saque_global Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador pode utilizar para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Nacional.
    # @param limite_saque_periodo Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador pode utilizar para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Nacional dentro de cada ciclo de faturamento.
    # @param limite_consignado Quando utilizado pelo emissor, este campo apresenta o valor da margem de cr\u00C3\u00A9dito que ele poder\u00C3\u00A1 utilizar para ser cobrado de forma consignada (desconto em folha) em seu sal\u00C3\u00A1rio/vencimentos.
    # @param limite_internacional_compra Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador possui para uso exclusivo em Compras Internacionais.
    # @param limite_internacional_parcelado Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador possui para realizar transa\u00C3\u00A7\u00C3\u00B5es Internacionais de Compras Parceladas.
    # @param limite_internacional_parcelas Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que portador pode acumular a partir da soma das parcelas das compras internacionais que forem realizadas nesta modalidade.
    # @param limite_internacional_saque_global Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador pode utilizar para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Internacional.
    # @param limite_internacional_saque_periodo Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador pode utilizar para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Internacional dentro de cada ciclo de faturamento.
    # @param [Hash] opts the optional parameters
    # @return [Array<(LimiteDisponibilidade, Fixnum, Hash)>] LimiteDisponibilidade data, response status code and response headers
    def alterar_limite_using_put_with_http_info(id, limite_global, limite_compra, limite_parcelado, limite_parcelas, limite_saque_global, limite_saque_periodo, limite_consignado, limite_internacional_compra, limite_internacional_parcelado, limite_internacional_parcelas, limite_internacional_saque_global, limite_internacional_saque_periodo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.alterar_limite_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.alterar_limite_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'limite_global' is set
      fail ArgumentError, "Missing the required parameter 'limite_global' when calling ContaApi.alterar_limite_using_put" if limite_global.nil?
      
      
      
      
      
      
      # verify the required parameter 'limite_compra' is set
      fail ArgumentError, "Missing the required parameter 'limite_compra' when calling ContaApi.alterar_limite_using_put" if limite_compra.nil?
      
      
      
      
      
      
      # verify the required parameter 'limite_parcelado' is set
      fail ArgumentError, "Missing the required parameter 'limite_parcelado' when calling ContaApi.alterar_limite_using_put" if limite_parcelado.nil?
      
      
      
      
      
      
      # verify the required parameter 'limite_parcelas' is set
      fail ArgumentError, "Missing the required parameter 'limite_parcelas' when calling ContaApi.alterar_limite_using_put" if limite_parcelas.nil?
      
      
      
      
      
      
      # verify the required parameter 'limite_saque_global' is set
      fail ArgumentError, "Missing the required parameter 'limite_saque_global' when calling ContaApi.alterar_limite_using_put" if limite_saque_global.nil?
      
      
      
      
      
      
      # verify the required parameter 'limite_saque_periodo' is set
      fail ArgumentError, "Missing the required parameter 'limite_saque_periodo' when calling ContaApi.alterar_limite_using_put" if limite_saque_periodo.nil?
      
      
      
      
      
      
      # verify the required parameter 'limite_consignado' is set
      fail ArgumentError, "Missing the required parameter 'limite_consignado' when calling ContaApi.alterar_limite_using_put" if limite_consignado.nil?
      
      
      
      
      
      
      # verify the required parameter 'limite_internacional_compra' is set
      fail ArgumentError, "Missing the required parameter 'limite_internacional_compra' when calling ContaApi.alterar_limite_using_put" if limite_internacional_compra.nil?
      
      
      
      
      
      
      # verify the required parameter 'limite_internacional_parcelado' is set
      fail ArgumentError, "Missing the required parameter 'limite_internacional_parcelado' when calling ContaApi.alterar_limite_using_put" if limite_internacional_parcelado.nil?
      
      
      
      
      
      
      # verify the required parameter 'limite_internacional_parcelas' is set
      fail ArgumentError, "Missing the required parameter 'limite_internacional_parcelas' when calling ContaApi.alterar_limite_using_put" if limite_internacional_parcelas.nil?
      
      
      
      
      
      
      # verify the required parameter 'limite_internacional_saque_global' is set
      fail ArgumentError, "Missing the required parameter 'limite_internacional_saque_global' when calling ContaApi.alterar_limite_using_put" if limite_internacional_saque_global.nil?
      
      
      
      
      
      
      # verify the required parameter 'limite_internacional_saque_periodo' is set
      fail ArgumentError, "Missing the required parameter 'limite_internacional_saque_periodo' when calling ContaApi.alterar_limite_using_put" if limite_internacional_saque_periodo.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/alterar-limites".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'limiteGlobal'] = limite_global
      query_params[:'limiteCompra'] = limite_compra
      query_params[:'limiteParcelado'] = limite_parcelado
      query_params[:'limiteParcelas'] = limite_parcelas
      query_params[:'limiteSaqueGlobal'] = limite_saque_global
      query_params[:'limiteSaquePeriodo'] = limite_saque_periodo
      query_params[:'limiteConsignado'] = limite_consignado
      query_params[:'limiteInternacionalCompra'] = limite_internacional_compra
      query_params[:'limiteInternacionalParcelado'] = limite_internacional_parcelado
      query_params[:'limiteInternacionalParcelas'] = limite_internacional_parcelas
      query_params[:'limiteInternacionalSaqueGlobal'] = limite_internacional_saque_global
      query_params[:'limiteInternacionalSaquePeriodo'] = limite_internacional_saque_periodo

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LimiteDisponibilidade')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#alterar_limite_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realiza a altera\u00C3\u00A7\u00C3\u00A3o de uma Pessoa tilular da conta
    # Esta m\u00C3\u00A9todo permite altera a pessoa de uma conta.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id)
    # @param id_pessoa C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o de uma Pessoa (id).
    # @param [Hash] opts the optional parameters
    # @return [ContaResponse]
    def alterar_titular_using_post(id, id_pessoa, opts = {})
      data, _status_code, _headers = alterar_titular_using_post_with_http_info(id, id_pessoa, opts)
      return data
    end

    # Realiza a altera\u00C3\u00A7\u00C3\u00A3o de uma Pessoa tilular da conta
    # Esta m\u00C3\u00A9todo permite altera a pessoa de uma conta.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id)
    # @param id_pessoa C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o de uma Pessoa (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContaResponse, Fixnum, Hash)>] ContaResponse data, response status code and response headers
    def alterar_titular_using_post_with_http_info(id, id_pessoa, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.alterar_titular_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.alterar_titular_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_pessoa' is set
      fail ArgumentError, "Missing the required parameter 'id_pessoa' when calling ContaApi.alterar_titular_using_post" if id_pessoa.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/alterar-titular".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_pessoa'] = id_pessoa

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#alterar_titular_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realiza a altera\u00C3\u00A7\u00C3\u00A3o do dia de vencimento das faturas da conta
    # Esse recurso permite alterar o vencimento de uma conta especifica.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param novo_dia_vencimento Novo dia de vencimento.
    # @param [Hash] opts the optional parameters
    # @return [ContaResponse]
    def alterar_vencimento_using_put(id, novo_dia_vencimento, opts = {})
      data, _status_code, _headers = alterar_vencimento_using_put_with_http_info(id, novo_dia_vencimento, opts)
      return data
    end

    # Realiza a altera\u00C3\u00A7\u00C3\u00A3o do dia de vencimento das faturas da conta
    # Esse recurso permite alterar o vencimento de uma conta especifica.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param novo_dia_vencimento Novo dia de vencimento.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContaResponse, Fixnum, Hash)>] ContaResponse data, response status code and response headers
    def alterar_vencimento_using_put_with_http_info(id, novo_dia_vencimento, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.alterar_vencimento_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.alterar_vencimento_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'novo_dia_vencimento' is set
      fail ArgumentError, "Missing the required parameter 'novo_dia_vencimento' when calling ContaApi.alterar_vencimento_using_put" if novo_dia_vencimento.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/alterar-vencimento".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'novo_dia_vencimento'] = novo_dia_vencimento

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#alterar_vencimento_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    #  Ativa o servi\u00C3\u00A7o de envio de fatura por email
    # Este recurso ativa o servi\u00C3\u00A7o de envio de fatura por email
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def ativar_envio_fatura_email_using_post(id, opts = {})
      data, _status_code, _headers = ativar_envio_fatura_email_using_post_with_http_info(id, opts)
      return data
    end

    #  Ativa o servi\u00C3\u00A7o de envio de fatura por email
    # Este recurso ativa o servi\u00C3\u00A7o de envio de fatura por email
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def ativar_envio_fatura_email_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.ativar_envio_fatura_email_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.ativar_envio_fatura_email_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/ativar-fatura-email".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#ativar_envio_fatura_email_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Consulta os dados de um determinado boleto da fatura
    # Este recurso consulta um boleto da fatura
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @return [BoletoDeFatura]
    def consultar_boleto_emitido_using_get(id, opts = {})
      data, _status_code, _headers = consultar_boleto_emitido_using_get_with_http_info(id, opts)
      return data
    end

    # Consulta os dados de um determinado boleto da fatura
    # Este recurso consulta um boleto da fatura
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @return [Array<(BoletoDeFatura, Fixnum, Hash)>] BoletoDeFatura data, response status code and response headers
    def consultar_boleto_emitido_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.consultar_boleto_emitido_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.consultar_boleto_emitido_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/consultar-dados-pagamento-fatura".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BoletoDeFatura')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#consultar_boleto_emitido_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Consulta a d\u00C3\u00ADvida atualizada do cliente
    # Este recurso consulta a d\u00C3\u00ADvida atualizada do cliente
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Date] :data_vencimento Data do vencimento
    # @option opts [Integer] :id_escritorio_cobranca C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do escrit\u00C3\u00B3rio de cobran\u00C3\u00A7a
    # @return [DividaClienteResponse]
    def consultar_divida_atualizada_cliente_using_get(id, opts = {})
      data, _status_code, _headers = consultar_divida_atualizada_cliente_using_get_with_http_info(id, opts)
      return data
    end

    # Consulta a d\u00C3\u00ADvida atualizada do cliente
    # Este recurso consulta a d\u00C3\u00ADvida atualizada do cliente
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Date] :data_vencimento Data do vencimento
    # @option opts [Integer] :id_escritorio_cobranca C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do escrit\u00C3\u00B3rio de cobran\u00C3\u00A7a
    # @return [Array<(DividaClienteResponse, Fixnum, Hash)>] DividaClienteResponse data, response status code and response headers
    def consultar_divida_atualizada_cliente_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.consultar_divida_atualizada_cliente_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.consultar_divida_atualizada_cliente_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/recuperar-divida-atualizada".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'dataVencimento'] = opts[:'data_vencimento'] if opts[:'data_vencimento']
      query_params[:'idEscritorioCobranca'] = opts[:'id_escritorio_cobranca'] if opts[:'id_escritorio_cobranca']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DividaClienteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#consultar_divida_atualizada_cliente_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Consultar a fatura consignadas abertas da conta
    # Atrav\u00C3\u00A9s desta opera\u00C3\u00A7\u00C3\u00A3o os Emissores ou Portadores poder\u00C3\u00A3o consultar a fatura consignada em aberto
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :data_vencimento Data Vencimento
    # @return [DetalhesFaturaConsignadaResponse]
    def consultar_fatura_consignada_aberta_using_get(id, opts = {})
      data, _status_code, _headers = consultar_fatura_consignada_aberta_using_get_with_http_info(id, opts)
      return data
    end

    # Consultar a fatura consignadas abertas da conta
    # Atrav\u00C3\u00A9s desta opera\u00C3\u00A7\u00C3\u00A3o os Emissores ou Portadores poder\u00C3\u00A3o consultar a fatura consignada em aberto
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :data_vencimento Data Vencimento
    # @return [Array<(DetalhesFaturaConsignadaResponse, Fixnum, Hash)>] DetalhesFaturaConsignadaResponse data, response status code and response headers
    def consultar_fatura_consignada_aberta_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.consultar_fatura_consignada_aberta_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.consultar_fatura_consignada_aberta_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/faturas-consignadas/consultar-aberta".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'dataVencimento'] = opts[:'data_vencimento'] if opts[:'data_vencimento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetalhesFaturaConsignadaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#consultar_fatura_consignada_aberta_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Apresenta dados de uma determinada fatura consignada
    # Atrav\u00C3\u00A9s desta opera\u00C3\u00A7\u00C3\u00A3o os Emissores ou Portadores poder\u00C3\u00A3o consultar uma fatura, atrav\u00C3\u00A9s do id da conta e o id da fatura.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param id_fatura C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da fatura (id_fatura).
    # @param [Hash] opts the optional parameters
    # @return [FaturaConsignadaDetalheResponse]
    def consultar_fatura_consignada_using_get(id, id_fatura, opts = {})
      data, _status_code, _headers = consultar_fatura_consignada_using_get_with_http_info(id, id_fatura, opts)
      return data
    end

    # Apresenta dados de uma determinada fatura consignada
    # Atrav\u00C3\u00A9s desta opera\u00C3\u00A7\u00C3\u00A3o os Emissores ou Portadores poder\u00C3\u00A3o consultar uma fatura, atrav\u00C3\u00A9s do id da conta e o id da fatura.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param id_fatura C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da fatura (id_fatura).
    # @param [Hash] opts the optional parameters
    # @return [Array<(FaturaConsignadaDetalheResponse, Fixnum, Hash)>] FaturaConsignadaDetalheResponse data, response status code and response headers
    def consultar_fatura_consignada_using_get_with_http_info(id, id_fatura, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.consultar_fatura_consignada_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.consultar_fatura_consignada_using_get" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_fatura' is set
      fail ArgumentError, "Missing the required parameter 'id_fatura' when calling ContaApi.consultar_fatura_consignada_using_get" if id_fatura.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/faturas-consignadas/{id_fatura}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'id_fatura' + '}', id_fatura.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FaturaConsignadaDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#consultar_fatura_consignada_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Consultar Fatura da Conta
    # Atrav\u00C3\u00A9s desta opera\u00C3\u00A7\u00C3\u00A3o os Emissores ou Portadores poder\u00C3\u00A3o consultar os detalhes de uma fatura vinculados a uma determinada conta.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param data_vencimento Data Vencimento.
    # @param [Hash] opts the optional parameters
    # @return [DetalhesFaturaResponse]
    def consultar_fatura_using_get(id, data_vencimento, opts = {})
      data, _status_code, _headers = consultar_fatura_using_get_with_http_info(id, data_vencimento, opts)
      return data
    end

    # Consultar Fatura da Conta
    # Atrav\u00C3\u00A9s desta opera\u00C3\u00A7\u00C3\u00A3o os Emissores ou Portadores poder\u00C3\u00A3o consultar os detalhes de uma fatura vinculados a uma determinada conta.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param data_vencimento Data Vencimento.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetalhesFaturaResponse, Fixnum, Hash)>] DetalhesFaturaResponse data, response status code and response headers
    def consultar_fatura_using_get_with_http_info(id, data_vencimento, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.consultar_fatura_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.consultar_fatura_using_get" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_vencimento' is set
      fail ArgumentError, "Missing the required parameter 'data_vencimento' when calling ContaApi.consultar_fatura_using_get" if data_vencimento.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/faturas/consultar-fechada".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'dataVencimento'] = data_vencimento

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetalhesFaturaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#consultar_fatura_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Consultar Lan\u00C3\u00A7amentos Futuros da Fatura de uma Conta
    # Atrav\u00C3\u00A9s desta opera\u00C3\u00A7\u00C3\u00A3o os Emissores ou Portadores poder\u00C3\u00A3o consultar os detalhes dos lan\u00C3\u00A7amentos futuros de uma fatura vinculados a uma determinada conta.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :data_vencimento Data Vencimento
    # @return [DetalhesFaturaResponse]
    def consultar_lancamentos_futuros_fatura_using_get(id, opts = {})
      data, _status_code, _headers = consultar_lancamentos_futuros_fatura_using_get_with_http_info(id, opts)
      return data
    end

    # Consultar Lan\u00C3\u00A7amentos Futuros da Fatura de uma Conta
    # Atrav\u00C3\u00A9s desta opera\u00C3\u00A7\u00C3\u00A3o os Emissores ou Portadores poder\u00C3\u00A3o consultar os detalhes dos lan\u00C3\u00A7amentos futuros de uma fatura vinculados a uma determinada conta.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :data_vencimento Data Vencimento
    # @return [Array<(DetalhesFaturaResponse, Fixnum, Hash)>] DetalhesFaturaResponse data, response status code and response headers
    def consultar_lancamentos_futuros_fatura_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.consultar_lancamentos_futuros_fatura_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.consultar_lancamentos_futuros_fatura_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/faturas/consultar-aberta".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'dataVencimento'] = opts[:'data_vencimento'] if opts[:'data_vencimento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetalhesFaturaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#consultar_lancamentos_futuros_fatura_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Apresenta os limites da conta
    # Este m\u00C3\u00A9todo permite consultar os Limites configurados para uma determinada Conta, a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @return [LimiteDisponibilidade]
    def consultar_limite_disponibilidade_using_get1(id, opts = {})
      data, _status_code, _headers = consultar_limite_disponibilidade_using_get1_with_http_info(id, opts)
      return data
    end

    # Apresenta os limites da conta
    # Este m\u00C3\u00A9todo permite consultar os Limites configurados para uma determinada Conta, a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @return [Array<(LimiteDisponibilidade, Fixnum, Hash)>] LimiteDisponibilidade data, response status code and response headers
    def consultar_limite_disponibilidade_using_get1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.consultar_limite_disponibilidade_using_get1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.consultar_limite_disponibilidade_using_get1" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/limites-disponibilidades".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LimiteDisponibilidade')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#consultar_limite_disponibilidade_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Consultar uma transfer\u00C3\u00AAncia banc\u00C3\u00A1ria para um banco
    # Este recurso permite consultar os detalhes de uma determinada transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito realizada para uma conta banc\u00C3\u00A1ria. De modo geral, esta opera\u00C3\u00A7\u00C3\u00A3o poder\u00C3\u00A1 ser utilizada para uma consulta simples destes detalhes ou para realizar a montagem de um comprovante de 2\u00C2\u00AA via de transfer\u00C3\u00AAncia entre contas.
    # @param id Id Conta
    # @param id_transferencia Id Transfer\u00C3\u00AAncia
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_conta_bancaria_destino C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria de destino (id)
    # @return [LinkTransferenciaBancariaResponse]
    def consultar_using_get20(id, id_transferencia, opts = {})
      data, _status_code, _headers = consultar_using_get20_with_http_info(id, id_transferencia, opts)
      return data
    end

    # Consultar uma transfer\u00C3\u00AAncia banc\u00C3\u00A1ria para um banco
    # Este recurso permite consultar os detalhes de uma determinada transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito realizada para uma conta banc\u00C3\u00A1ria. De modo geral, esta opera\u00C3\u00A7\u00C3\u00A3o poder\u00C3\u00A1 ser utilizada para uma consulta simples destes detalhes ou para realizar a montagem de um comprovante de 2\u00C2\u00AA via de transfer\u00C3\u00AAncia entre contas.
    # @param id Id Conta
    # @param id_transferencia Id Transfer\u00C3\u00AAncia
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_conta_bancaria_destino C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria de destino (id)
    # @return [Array<(LinkTransferenciaBancariaResponse, Fixnum, Hash)>] LinkTransferenciaBancariaResponse data, response status code and response headers
    def consultar_using_get20_with_http_info(id, id_transferencia, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.consultar_using_get20 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.consultar_using_get20" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_transferencia' is set
      fail ArgumentError, "Missing the required parameter 'id_transferencia' when calling ContaApi.consultar_using_get20" if id_transferencia.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/transferencias-creditos-contas-bancarias/{id_transferencia}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'id_transferencia' + '}', id_transferencia.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_conta_bancaria_destino'] = opts[:'id_conta_bancaria_destino'] if opts[:'id_conta_bancaria_destino']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LinkTransferenciaBancariaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#consultar_using_get20\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Consulta os detalhes de uma determinada transfer\u00C3\u00AAncia
    # Este m\u00C3\u00A9todo permite consultar os detalhes de uma determinada transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito realizada entre contas.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param id_transferencia C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da transfer\u00C3\u00AAncia (id_transferencia).
    # @param [Hash] opts the optional parameters
    # @return [PageTransferencias]
    def consultar_using_get21(id, id_transferencia, opts = {})
      data, _status_code, _headers = consultar_using_get21_with_http_info(id, id_transferencia, opts)
      return data
    end

    # Consulta os detalhes de uma determinada transfer\u00C3\u00AAncia
    # Este m\u00C3\u00A9todo permite consultar os detalhes de uma determinada transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito realizada entre contas.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param id_transferencia C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da transfer\u00C3\u00AAncia (id_transferencia).
    # @param [Hash] opts the optional parameters
    # @return [Array<(PageTransferencias, Fixnum, Hash)>] PageTransferencias data, response status code and response headers
    def consultar_using_get21_with_http_info(id, id_transferencia, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.consultar_using_get21 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.consultar_using_get21" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_transferencia' is set
      fail ArgumentError, "Missing the required parameter 'id_transferencia' when calling ContaApi.consultar_using_get21" if id_transferencia.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/transferencias-creditos-cartoes/{id_transferencia}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'id_transferencia' + '}', id_transferencia.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTransferencias')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#consultar_using_get21\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Apresenta dados de uma determinada conta
    # Este m\u00C3\u00A9todo permite consultar dados de uma determinada conta a partir de seu codigo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @return [ContaDetalheResponse]
    def consultar_using_get3(id, opts = {})
      data, _status_code, _headers = consultar_using_get3_with_http_info(id, opts)
      return data
    end

    # Apresenta dados de uma determinada conta
    # Este m\u00C3\u00A9todo permite consultar dados de uma determinada conta a partir de seu codigo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContaDetalheResponse, Fixnum, Hash)>] ContaDetalheResponse data, response status code and response headers
    def consultar_using_get3_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.consultar_using_get3 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.consultar_using_get3" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContaDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#consultar_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Desativa o servi\u00C3\u00A7o de envio de fatura por email
    # Este recurso desativa o servi\u00C3\u00A7o de envio de fatura por email
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def desativar_envio_fatura_email_using_post(id, opts = {})
      data, _status_code, _headers = desativar_envio_fatura_email_using_post_with_http_info(id, opts)
      return data
    end

    # Desativa o servi\u00C3\u00A7o de envio de fatura por email
    # Este recurso desativa o servi\u00C3\u00A7o de envio de fatura por email
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def desativar_envio_fatura_email_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.desativar_envio_fatura_email_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.desativar_envio_fatura_email_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/desativar-fatura-email".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#desativar_envio_fatura_email_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Gera um boleto de recarga
    # Este recurso gera um boleto de recarga
    # @param id Id Conta
    # @param valor 
    # @param data_vencimento 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [BoletoDeFatura]
    def gerar_boleto_recarga_using_post(id, valor, data_vencimento, opts = {})
      data, _status_code, _headers = gerar_boleto_recarga_using_post_with_http_info(id, valor, data_vencimento, opts)
      return data
    end

    # Gera um boleto de recarga
    # Este recurso gera um boleto de recarga
    # @param id Id Conta
    # @param valor 
    # @param data_vencimento 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [Array<(BoletoDeFatura, Fixnum, Hash)>] BoletoDeFatura data, response status code and response headers
    def gerar_boleto_recarga_using_post_with_http_info(id, valor, data_vencimento, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.gerar_boleto_recarga_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.gerar_boleto_recarga_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'valor' is set
      fail ArgumentError, "Missing the required parameter 'valor' when calling ContaApi.gerar_boleto_recarga_using_post" if valor.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_vencimento' is set
      fail ArgumentError, "Missing the required parameter 'data_vencimento' when calling ContaApi.gerar_boleto_recarga_using_post" if data_vencimento.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/gerar-boleto-recarga".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'valor'] = valor
      query_params[:'dataVencimento'] = data_vencimento
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BoletoDeFatura')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#gerar_boleto_recarga_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realiza a gera\u00C3\u00A7\u00C3\u00A3o de um novo cart\u00C3\u00A3o para impress\u00C3\u00A3o avulsa
    # Este recurso permite que seja gerado um novo Cart\u00C3\u00A3o para um determinado Portador que esteja vinculado a uma Conta. Para isso, ser\u00C3\u00A1 preciso informar o c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id), o idPessoa do Portador e o idTipoPlastico do Cart\u00C3\u00A3o que dever\u00C3\u00A1 ser gerado para impress\u00C3\u00A3o. Esta funcionalidade poder\u00C3\u00A1 ser utilizada para realizar a impress\u00C3\u00A3o de cart\u00C3\u00B5es em Lojas, Quiosques, Escrit\u00C3\u00B3rios, Terminais de Auto Atendimento, ou outro local que o Emissor escolher, desde que se possua uma impressora de Cart\u00C3\u00B5es habilidade para o fazer, no local.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param id_pessoa C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da pessoa (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_tipo_plastico C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do TipoPlastico (id).
    # @return [CartaoImpressao]
    def gerar_cartao_using_post(id, id_pessoa, opts = {})
      data, _status_code, _headers = gerar_cartao_using_post_with_http_info(id, id_pessoa, opts)
      return data
    end

    # Realiza a gera\u00C3\u00A7\u00C3\u00A3o de um novo cart\u00C3\u00A3o para impress\u00C3\u00A3o avulsa
    # Este recurso permite que seja gerado um novo Cart\u00C3\u00A3o para um determinado Portador que esteja vinculado a uma Conta. Para isso, ser\u00C3\u00A1 preciso informar o c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id), o idPessoa do Portador e o idTipoPlastico do Cart\u00C3\u00A3o que dever\u00C3\u00A1 ser gerado para impress\u00C3\u00A3o. Esta funcionalidade poder\u00C3\u00A1 ser utilizada para realizar a impress\u00C3\u00A3o de cart\u00C3\u00B5es em Lojas, Quiosques, Escrit\u00C3\u00B3rios, Terminais de Auto Atendimento, ou outro local que o Emissor escolher, desde que se possua uma impressora de Cart\u00C3\u00B5es habilidade para o fazer, no local.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param id_pessoa C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da pessoa (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_tipo_plastico C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do TipoPlastico (id).
    # @return [Array<(CartaoImpressao, Fixnum, Hash)>] CartaoImpressao data, response status code and response headers
    def gerar_cartao_using_post_with_http_info(id, id_pessoa, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.gerar_cartao_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.gerar_cartao_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_pessoa' is set
      fail ArgumentError, "Missing the required parameter 'id_pessoa' when calling ContaApi.gerar_cartao_using_post" if id_pessoa.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/pessoas/{id_pessoa}/gerar-cartao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'id_pessoa' + '}', id_pessoa.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_tipo_plastico'] = opts[:'id_tipo_plastico'] if opts[:'id_tipo_plastico']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoImpressao')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#gerar_cartao_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista as faturas consignadas da conta
    # Atrav\u00C3\u00A9s desta opera\u00C3\u00A7\u00C3\u00A3o os Emissores ou Portadores poder\u00C3\u00A3o consultar todo o Hist\u00C3\u00B3rico de Faturas vinculados a uma determinada Conta, independentemente do valor delas.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Date] :data_vencimento Apresenta a data de vencimento da fatura.
    # @return [PageFaturasConsignadas]
    def listar_faturas_consignadas_using_get(id, opts = {})
      data, _status_code, _headers = listar_faturas_consignadas_using_get_with_http_info(id, opts)
      return data
    end

    # Lista as faturas consignadas da conta
    # Atrav\u00C3\u00A9s desta opera\u00C3\u00A7\u00C3\u00A3o os Emissores ou Portadores poder\u00C3\u00A3o consultar todo o Hist\u00C3\u00B3rico de Faturas vinculados a uma determinada Conta, independentemente do valor delas.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Date] :data_vencimento Apresenta a data de vencimento da fatura.
    # @return [Array<(PageFaturasConsignadas, Fixnum, Hash)>] PageFaturasConsignadas data, response status code and response headers
    def listar_faturas_consignadas_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.listar_faturas_consignadas_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.listar_faturas_consignadas_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/faturas-consignadas".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'dataVencimento'] = opts[:'data_vencimento'] if opts[:'data_vencimento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageFaturasConsignadas')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#listar_faturas_consignadas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista as faturas da conta
    # Atrav\u00C3\u00A9s desta opera\u00C3\u00A7\u00C3\u00A3o os Emissores ou Portadores poder\u00C3\u00A3o consultar todo o Hist\u00C3\u00B3rico de Faturas vinculados a uma determinada Conta, independentemente do valor delas.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Date] :data_vencimento Data de Vencimento da Fatura.
    # @return [PageFaturas]
    def listar_faturas_using_get(id, opts = {})
      data, _status_code, _headers = listar_faturas_using_get_with_http_info(id, opts)
      return data
    end

    # Lista as faturas da conta
    # Atrav\u00C3\u00A9s desta opera\u00C3\u00A7\u00C3\u00A3o os Emissores ou Portadores poder\u00C3\u00A3o consultar todo o Hist\u00C3\u00B3rico de Faturas vinculados a uma determinada Conta, independentemente do valor delas.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Date] :data_vencimento Data de Vencimento da Fatura.
    # @return [Array<(PageFaturas, Fixnum, Hash)>] PageFaturas data, response status code and response headers
    def listar_faturas_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.listar_faturas_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.listar_faturas_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/faturas".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'dataVencimento'] = opts[:'data_vencimento'] if opts[:'data_vencimento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageFaturas')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#listar_faturas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista o hist\u00C3\u00B3rico de altera\u00C3\u00A7\u00C3\u00B5es de limites da conta
    # Este recurso consulta o hist\u00C3\u00B3rico com as altera\u00C3\u00A7\u00C3\u00B5es de limites da conta informada
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [PageHistoricoEventos]
    def listar_historico_alteracoes_limites_using_get(id, opts = {})
      data, _status_code, _headers = listar_historico_alteracoes_limites_using_get_with_http_info(id, opts)
      return data
    end

    # Lista o hist\u00C3\u00B3rico de altera\u00C3\u00A7\u00C3\u00B5es de limites da conta
    # Este recurso consulta o hist\u00C3\u00B3rico com as altera\u00C3\u00A7\u00C3\u00B5es de limites da conta informada
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [Array<(PageHistoricoEventos, Fixnum, Hash)>] PageHistoricoEventos data, response status code and response headers
    def listar_historico_alteracoes_limites_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.listar_historico_alteracoes_limites_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.listar_historico_alteracoes_limites_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/historicos-alteracoes-limites".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageHistoricoEventos')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#listar_historico_alteracoes_limites_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista o hist\u00C3\u00B3rico de entradas/sa\u00C3\u00ADdas de assessorias de cobran\u00C3\u00A7a
    # Permite listar todos os registros de entrada e sa\u00C3\u00ADda da Conta em arquivos de integra\u00C3\u00A7\u00C3\u00A3o com empresas de assessorias de cobran\u00C3\u00A7a a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (idConta).
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [LinkPageHistoricoAssessoriaResponse]
    def listar_historico_assessoria_using_get(id, opts = {})
      data, _status_code, _headers = listar_historico_assessoria_using_get_with_http_info(id, opts)
      return data
    end

    # Lista o hist\u00C3\u00B3rico de entradas/sa\u00C3\u00ADdas de assessorias de cobran\u00C3\u00A7a
    # Permite listar todos os registros de entrada e sa\u00C3\u00ADda da Conta em arquivos de integra\u00C3\u00A7\u00C3\u00A3o com empresas de assessorias de cobran\u00C3\u00A7a a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (idConta).
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [Array<(LinkPageHistoricoAssessoriaResponse, Fixnum, Hash)>] LinkPageHistoricoAssessoriaResponse data, response status code and response headers
    def listar_historico_assessoria_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.listar_historico_assessoria_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.listar_historico_assessoria_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/historicos-assessorias-cobranca".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LinkPageHistoricoAssessoriaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#listar_historico_assessoria_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista o historico de atrasos das faturas
    # Este recurso lista o hist\u00C3\u00B3rico do pagamento de faturas em atraso
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @return [PageHistoricoAtraso]
    def listar_historico_atrasos_faturas_using_get(id, opts = {})
      data, _status_code, _headers = listar_historico_atrasos_faturas_using_get_with_http_info(id, opts)
      return data
    end

    # Lista o historico de atrasos das faturas
    # Este recurso lista o hist\u00C3\u00B3rico do pagamento de faturas em atraso
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @return [Array<(PageHistoricoAtraso, Fixnum, Hash)>] PageHistoricoAtraso data, response status code and response headers
    def listar_historico_atrasos_faturas_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.listar_historico_atrasos_faturas_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.listar_historico_atrasos_faturas_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/historicos-faturas-atrasos".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageHistoricoAtraso')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#listar_historico_atrasos_faturas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista as transa\u00C3\u00A7\u00C3\u00B5es n\u00C3\u00A3o processadas da conta
    # Este m\u00C3\u00A9todo permite que sejam listadas todas as transa\u00C3\u00A7\u00C3\u00B5es n\u00C3\u00A3o processadas da Conta.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [PageTransacoesCorrentes]
    def listar_nao_processadas_using_get(id, opts = {})
      data, _status_code, _headers = listar_nao_processadas_using_get_with_http_info(id, opts)
      return data
    end

    # Lista as transa\u00C3\u00A7\u00C3\u00B5es n\u00C3\u00A3o processadas da conta
    # Este m\u00C3\u00A9todo permite que sejam listadas todas as transa\u00C3\u00A7\u00C3\u00B5es n\u00C3\u00A3o processadas da Conta.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [Array<(PageTransacoesCorrentes, Fixnum, Hash)>] PageTransacoesCorrentes data, response status code and response headers
    def listar_nao_processadas_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.listar_nao_processadas_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.listar_nao_processadas_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/transacoes/listar-nao-processadas".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTransacoesCorrentes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#listar_nao_processadas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista as transa\u00C3\u00A7\u00C3\u00B5es processadas da conta
    # Este m\u00C3\u00A9todo permite que sejam listadas todas as transa\u00C3\u00A7\u00C3\u00B5es processadas da Conta.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Date] :data_vencimento Data de vencimento do extrato no formato yyyy-MM-dd.
    # @return [PageTransacoesCorrentes]
    def listar_processadas_using_get(id, opts = {})
      data, _status_code, _headers = listar_processadas_using_get_with_http_info(id, opts)
      return data
    end

    # Lista as transa\u00C3\u00A7\u00C3\u00B5es processadas da conta
    # Este m\u00C3\u00A9todo permite que sejam listadas todas as transa\u00C3\u00A7\u00C3\u00B5es processadas da Conta.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Date] :data_vencimento Data de vencimento do extrato no formato yyyy-MM-dd.
    # @return [Array<(PageTransacoesCorrentes, Fixnum, Hash)>] PageTransacoesCorrentes data, response status code and response headers
    def listar_processadas_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.listar_processadas_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.listar_processadas_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/transacoes/listar-processadas".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'dataVencimento'] = opts[:'data_vencimento'] if opts[:'data_vencimento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTransacoesCorrentes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#listar_processadas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Listar as transfer\u00C3\u00AAncias banc\u00C3\u00A1rias realizadas
    # Este recurso tem como objetivo permitir que o portador de um Cart\u00C3\u00A3o possa consultar uma lista das Transfer\u00C3\u00AAncias Banc\u00C3\u00A1rias para os Favorecidos cadastrados.
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_conta_bancaria_destino C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria de destino (id)
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [LinkPageTransferenciaBancariaResponse]
    def listar_using_get22(id, opts = {})
      data, _status_code, _headers = listar_using_get22_with_http_info(id, opts)
      return data
    end

    # Listar as transfer\u00C3\u00AAncias banc\u00C3\u00A1rias realizadas
    # Este recurso tem como objetivo permitir que o portador de um Cart\u00C3\u00A3o possa consultar uma lista das Transfer\u00C3\u00AAncias Banc\u00C3\u00A1rias para os Favorecidos cadastrados.
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_conta_bancaria_destino C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria de destino (id)
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [Array<(LinkPageTransferenciaBancariaResponse, Fixnum, Hash)>] LinkPageTransferenciaBancariaResponse data, response status code and response headers
    def listar_using_get22_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.listar_using_get22 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.listar_using_get22" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/transferencias-creditos-contas-bancarias".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_conta_bancaria_destino'] = opts[:'id_conta_bancaria_destino'] if opts[:'id_conta_bancaria_destino']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LinkPageTransferenciaBancariaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#listar_using_get22\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista as transfer\u00C3\u00AAncias realizadas pela conta
    # Este m\u00C3\u00A9todo permite que sejam listadas as transfer\u00C3\u00AAncias realizadas pela conta existentes na base do emissor.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Integer] :id_transferencia C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da transfer\u00C3\u00AAncia (id).
    # @option opts [Integer] :id_conta_origem C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta em que o valor ser\u00C3\u00A1 debitado para a transfer\u00C3\u00AAncia. (id).
    # @option opts [Integer] :id_conta_destino C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta em que o valor ser\u00C3\u00A1 creditado para a transfer\u00C3\u00AAncia. (id).
    # @option opts [Float] :valor_transferencia Valor estabelecido para ser transferido.
    # @option opts [Date] :data_transferencia Data estabelecida para ocorrer a transfer\u00C3\u00AAncia.
    # @return [PageTransferencias]
    def listar_using_get23(id, opts = {})
      data, _status_code, _headers = listar_using_get23_with_http_info(id, opts)
      return data
    end

    # Lista as transfer\u00C3\u00AAncias realizadas pela conta
    # Este m\u00C3\u00A9todo permite que sejam listadas as transfer\u00C3\u00AAncias realizadas pela conta existentes na base do emissor.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Integer] :id_transferencia C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da transfer\u00C3\u00AAncia (id).
    # @option opts [Integer] :id_conta_origem C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta em que o valor ser\u00C3\u00A1 debitado para a transfer\u00C3\u00AAncia. (id).
    # @option opts [Integer] :id_conta_destino C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta em que o valor ser\u00C3\u00A1 creditado para a transfer\u00C3\u00AAncia. (id).
    # @option opts [Float] :valor_transferencia Valor estabelecido para ser transferido.
    # @option opts [Date] :data_transferencia Data estabelecida para ocorrer a transfer\u00C3\u00AAncia.
    # @return [Array<(PageTransferencias, Fixnum, Hash)>] PageTransferencias data, response status code and response headers
    def listar_using_get23_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.listar_using_get23 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.listar_using_get23" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/transferencias-creditos-cartoes".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idTransferencia'] = opts[:'id_transferencia'] if opts[:'id_transferencia']
      query_params[:'idContaOrigem'] = opts[:'id_conta_origem'] if opts[:'id_conta_origem']
      query_params[:'idContaDestino'] = opts[:'id_conta_destino'] if opts[:'id_conta_destino']
      query_params[:'valorTransferencia'] = opts[:'valor_transferencia'] if opts[:'valor_transferencia']
      query_params[:'dataTransferencia'] = opts[:'data_transferencia'] if opts[:'data_transferencia']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTransferencias')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#listar_using_get23\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista contas existentes na base de dados do Emissor
    # Este recurso permite listar contas existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Integer] :id_produto C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do produto ao qual a conta faz parte. (id).
    # @option opts [Integer] :id_origem_comercial C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id) que deu origem a Conta.
    # @option opts [Integer] :id_pessoa C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa Titular da Conta (id).
    # @option opts [Integer] :id_status_conta C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto a qual o cart\u00C3\u00A3o pertence (id).
    # @option opts [Integer] :dia_vencimento Apresenta o dia de vencimento.
    # @option opts [Integer] :melhor_dia_compra Apresenta o melhor dia de compra.
    # @option opts [Date] :data_status_conta Apresenta a data em que o idStatusConta atual fora atribu\u00C3\u00ADdo para ela.
    # @option opts [Date] :data_cadastro Apresenta a data em que o cart\u00C3\u00A3o foi gerado.
    # @option opts [Date] :data_ultima_alteracao_vencimento Apresenta a data da ultima altera\u00C3\u00A7\u00C3\u00A3o de vencimento.
    # @return [PageContas]
    def listar_using_get4(opts = {})
      data, _status_code, _headers = listar_using_get4_with_http_info(opts)
      return data
    end

    # Lista contas existentes na base de dados do Emissor
    # Este recurso permite listar contas existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Integer] :id_produto C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do produto ao qual a conta faz parte. (id).
    # @option opts [Integer] :id_origem_comercial C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id) que deu origem a Conta.
    # @option opts [Integer] :id_pessoa C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa Titular da Conta (id).
    # @option opts [Integer] :id_status_conta C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto a qual o cart\u00C3\u00A3o pertence (id).
    # @option opts [Integer] :dia_vencimento Apresenta o dia de vencimento.
    # @option opts [Integer] :melhor_dia_compra Apresenta o melhor dia de compra.
    # @option opts [Date] :data_status_conta Apresenta a data em que o idStatusConta atual fora atribu\u00C3\u00ADdo para ela.
    # @option opts [Date] :data_cadastro Apresenta a data em que o cart\u00C3\u00A3o foi gerado.
    # @option opts [Date] :data_ultima_alteracao_vencimento Apresenta a data da ultima altera\u00C3\u00A7\u00C3\u00A3o de vencimento.
    # @return [Array<(PageContas, Fixnum, Hash)>] PageContas data, response status code and response headers
    def listar_using_get4_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.listar_using_get4 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']
      query_params[:'idOrigemComercial'] = opts[:'id_origem_comercial'] if opts[:'id_origem_comercial']
      query_params[:'idPessoa'] = opts[:'id_pessoa'] if opts[:'id_pessoa']
      query_params[:'idStatusConta'] = opts[:'id_status_conta'] if opts[:'id_status_conta']
      query_params[:'diaVencimento'] = opts[:'dia_vencimento'] if opts[:'dia_vencimento']
      query_params[:'melhorDiaCompra'] = opts[:'melhor_dia_compra'] if opts[:'melhor_dia_compra']
      query_params[:'dataStatusConta'] = opts[:'data_status_conta'] if opts[:'data_status_conta']
      query_params[:'dataCadastro'] = opts[:'data_cadastro'] if opts[:'data_cadastro']
      query_params[:'dataUltimaAlteracaoVencimento'] = opts[:'data_ultima_alteracao_vencimento'] if opts[:'data_ultima_alteracao_vencimento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageContas')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#listar_using_get4\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realiza a reativa\u00C3\u00A7\u00C3\u00A3o de contas que foram desativadas por inadimpl\u00C3\u00AAncia
    # Este recurso permite reativar contas que foram desativadas por inadimpl\u00C3\u00AAncia. Para isso, ser\u00C3\u00A1 preciso informar o c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id).
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def reativar_using_post(id, opts = {})
      data, _status_code, _headers = reativar_using_post_with_http_info(id, opts)
      return data
    end

    # Realiza a reativa\u00C3\u00A7\u00C3\u00A3o de contas que foram desativadas por inadimpl\u00C3\u00AAncia
    # Este recurso permite reativar contas que foram desativadas por inadimpl\u00C3\u00AAncia. Para isso, ser\u00C3\u00A1 preciso informar o c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id).
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def reativar_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.reativar_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.reativar_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/reativar".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#reativar_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Permite listar uma linha do tempo com os eventos da conta
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir a listagem, em formato de timeline, dos eventos vinculados a uma detemrinada conta. Transa\u00C3\u00A7\u00C3\u00B5es, fechamento da fatura, pagamentos, gera\u00C3\u00A7\u00C3\u00A3o de cart\u00C3\u00B5es e altera\u00C3\u00A7\u00C3\u00A3o de limite s\u00C3\u00A3o exemplos de eventos contemplados por esta funcionalidade. Neste m\u00C3\u00A9todo, as opera\u00C3\u00A7\u00C3\u00B5es s\u00C3\u00A3o ordenadas de forma decrescente.
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [PageTransacaoResponse]
    def transacoes_using_get(id, opts = {})
      data, _status_code, _headers = transacoes_using_get_with_http_info(id, opts)
      return data
    end

    # Permite listar uma linha do tempo com os eventos da conta
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir a listagem, em formato de timeline, dos eventos vinculados a uma detemrinada conta. Transa\u00C3\u00A7\u00C3\u00B5es, fechamento da fatura, pagamentos, gera\u00C3\u00A7\u00C3\u00A3o de cart\u00C3\u00B5es e altera\u00C3\u00A7\u00C3\u00A3o de limite s\u00C3\u00A3o exemplos de eventos contemplados por esta funcionalidade. Neste m\u00C3\u00A9todo, as opera\u00C3\u00A7\u00C3\u00B5es s\u00C3\u00A3o ordenadas de forma decrescente.
    # @param id Id Conta
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [Array<(PageTransacaoResponse, Fixnum, Hash)>] PageTransacaoResponse data, response status code and response headers
    def transacoes_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.transacoes_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.transacoes_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/timeline".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTransacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#transacoes_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realizar transfer\u00C3\u00AAncia banc\u00C3\u00A1ria do cart\u00C3\u00A3o para contas banc\u00C3\u00A1rias
    # Este recurso tem como objetivo permitir que o portador de um cart\u00C3\u00A3o possa realizar a transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito para uma conta banc\u00C3\u00A1ria. Assim, o valor do cr\u00C3\u00A9dito somado a tarifa para transfer\u00C3\u00AAncia, quando praticada pelo emissor, ser\u00C3\u00A1 debitado da conta de origem, se houver saldo suficiente, e ser\u00C3\u00A1 creditado na conta banc\u00C3\u00A1ria de destino.
    # @param id Id Conta
    # @param transferencia_bancaria_persist transferenciaBancariaPersist
    # @param [Hash] opts the optional parameters
    # @return [LinkTransferenciaBancariaResponse]
    def transferir_using_post(id, transferencia_bancaria_persist, opts = {})
      data, _status_code, _headers = transferir_using_post_with_http_info(id, transferencia_bancaria_persist, opts)
      return data
    end

    # Realizar transfer\u00C3\u00AAncia banc\u00C3\u00A1ria do cart\u00C3\u00A3o para contas banc\u00C3\u00A1rias
    # Este recurso tem como objetivo permitir que o portador de um cart\u00C3\u00A3o possa realizar a transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito para uma conta banc\u00C3\u00A1ria. Assim, o valor do cr\u00C3\u00A9dito somado a tarifa para transfer\u00C3\u00AAncia, quando praticada pelo emissor, ser\u00C3\u00A1 debitado da conta de origem, se houver saldo suficiente, e ser\u00C3\u00A1 creditado na conta banc\u00C3\u00A1ria de destino.
    # @param id Id Conta
    # @param transferencia_bancaria_persist transferenciaBancariaPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(LinkTransferenciaBancariaResponse, Fixnum, Hash)>] LinkTransferenciaBancariaResponse data, response status code and response headers
    def transferir_using_post_with_http_info(id, transferencia_bancaria_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.transferir_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.transferir_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'transferencia_bancaria_persist' is set
      fail ArgumentError, "Missing the required parameter 'transferencia_bancaria_persist' when calling ContaApi.transferir_using_post" if transferencia_bancaria_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/transferencias-creditos-contas-bancarias".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transferencia_bancaria_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LinkTransferenciaBancariaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#transferir_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realiza uma transfer\u00C3\u00AAncia de Cr\u00C3\u00A9dito para outro cliente do mesmo Emissor
    # Este m\u00C3\u00A9todo permite que um portador de um cart\u00C3\u00A3o possa realizar auma transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito para outro cliente do mesmo emissor.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta do cliente portador do cart\u00C3\u00A3o que ser\u00C3\u00A1 debitado (id).
    # @param id_conta_destino C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do cliente portador do cart\u00C3\u00A3o que ser\u00C3\u00A1 creditado (id).
    # @param valor_transferencia Valor da Transfer\u00C3\u00AAncia.
    # @param [Hash] opts the optional parameters
    # @return [PageTransferencias]
    def transferir_using_post1(id, id_conta_destino, valor_transferencia, opts = {})
      data, _status_code, _headers = transferir_using_post1_with_http_info(id, id_conta_destino, valor_transferencia, opts)
      return data
    end

    # Realiza uma transfer\u00C3\u00AAncia de Cr\u00C3\u00A9dito para outro cliente do mesmo Emissor
    # Este m\u00C3\u00A9todo permite que um portador de um cart\u00C3\u00A3o possa realizar auma transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito para outro cliente do mesmo emissor.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta do cliente portador do cart\u00C3\u00A3o que ser\u00C3\u00A1 debitado (id).
    # @param id_conta_destino C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do cliente portador do cart\u00C3\u00A3o que ser\u00C3\u00A1 creditado (id).
    # @param valor_transferencia Valor da Transfer\u00C3\u00AAncia.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PageTransferencias, Fixnum, Hash)>] PageTransferencias data, response status code and response headers
    def transferir_using_post1_with_http_info(id, id_conta_destino, valor_transferencia, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.transferir_using_post1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling ContaApi.transferir_using_post1" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_conta_destino' is set
      fail ArgumentError, "Missing the required parameter 'id_conta_destino' when calling ContaApi.transferir_using_post1" if id_conta_destino.nil?
      
      
      
      
      
      
      # verify the required parameter 'valor_transferencia' is set
      fail ArgumentError, "Missing the required parameter 'valor_transferencia' when calling ContaApi.transferir_using_post1" if valor_transferencia.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/transferencias-creditos-cartoes".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_conta_destino'] = id_conta_destino
      query_params[:'valor_transferencia'] = valor_transferencia

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTransferencias')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#transferir_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
