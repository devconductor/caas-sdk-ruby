=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::GlobaltagjobApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GlobaltagjobApi' do
  before do
    # run before each test
    @instance = Pier::GlobaltagjobApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlobaltagjobApi' do
    it 'should create an instact of GlobaltagjobApi' do
      @instance.should be_a(Pier::GlobaltagjobApi)
    end
  end


  # unit tests for ativar_job_using_post
  # {{{job_resource_ativar_job}}}
  # {{{job_resource_ativar_job_notes}}}
  # @param id {{{job_resource_ativar_job_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [JobResponse]
  describe 'ativar_job_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for atualizar_using_put4
  # {{{job_resource_atualizar}}}
  # {{{job_resource_atualizar_notes}}}
  # @param id {{{job_resource_atualizar_param_id}}}
  # @param descricao {{{job_resource_atualizar_param_descricao}}}
  # @param cron {{{job_resource_atualizar_param_cron}}}
  # @param groovy groovy
  # @param [Hash] opts the optional parameters
  # @return [JobResponse]
  describe 'atualizar_using_put4 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for desativar_job_using_post
  # {{{job_resource_desativar_job}}}
  # {{{job_resource_desativar_job_notes}}}
  # @param id {{{job_resource_desativar_job_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [JobResponse]
  describe 'desativar_job_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get31
  # {{{job_resource_listar}}}
  # {{{job_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :groovy {{{job_d_t_o_groovy_value}}}
  # @option opts [String] :descricao {{{job_d_t_o_descricao_value}}}
  # @option opts [String] :cron {{{job_d_t_o_cron_value}}}
  # @option opts [String] :status {{{job_d_t_o_status_value}}}
  # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
  # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
  # @return [PageJobResponse]
  describe 'listar_using_get31 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for salvar_using_post17
  # {{{job_resource_salvar}}}
  # {{{job_resource_salvar_notes}}}
  # @param descricao {{{job_resource_salvar_param_descricao}}}
  # @param cron {{{job_resource_salvar_param_cron}}}
  # @param groovy groovy
  # @param [Hash] opts the optional parameters
  # @return [JobResponse]
  describe 'salvar_using_post17 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


end

