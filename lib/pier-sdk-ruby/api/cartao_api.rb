=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class CartaoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # Realiza a altera\u00C3\u00A7\u00C3\u00A3o da senha de um Cart\u00C3\u00A3o
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que o portador de um determinado cart\u00C3\u00A3o possa definir uma senha a sua escolha.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param senha Senha para ser cadastrada ou alterada.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def alterar_alterar_senha_using_put(id, senha, opts = {})
      data, _status_code, _headers = alterar_alterar_senha_using_put_with_http_info(id, senha, opts)
      return data
    end

    # Realiza a altera\u00C3\u00A7\u00C3\u00A3o da senha de um Cart\u00C3\u00A3o
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que o portador de um determinado cart\u00C3\u00A3o possa definir uma senha a sua escolha.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param senha Senha para ser cadastrada ou alterada.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def alterar_alterar_senha_using_put_with_http_info(id, senha, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.alterar_alterar_senha_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.alterar_alterar_senha_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha' is set
      fail ArgumentError, "Missing the required parameter 'senha' when calling CartaoApi.alterar_alterar_senha_using_put" if senha.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/alterar-senha".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'senha'] = senha

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#alterar_alterar_senha_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realiza a altera\u00C3\u00A7\u00C3\u00A3o do Status de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite que uma Aplica\u00C3\u00A7\u00C3\u00A3o que realize a impress\u00C3\u00A3o de cart\u00C3\u00B5es possa indicar que um determinado idCartao fora impresso ou est\u00C3\u00A1 em processo de impress\u00C3\u00A3o. Para isso, basta informar o respectivo c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do cart\u00C3\u00A3o (id) que deseja ter seu um determinado id_status_impressao atribu\u00C3\u00ADdo a ele. Por padr\u00C3\u00A3o, cart\u00C3\u00B5es provis\u00C3\u00B3rios ou que j\u00C3\u00A1 tenham sido inclu\u00C3\u00ADdos em um arquivo para impress\u00C3\u00A3o via gr\u00C3\u00A1fica ter\u00C3\u00A3o esta requisi\u00C3\u00A7\u00C3\u00A3o negada, se utilizada.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param id_status_impressao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status Impress\u00C3\u00A3o (Id).
    # @param [Hash] opts the optional parameters
    # @return [HistoricoImpressaoCartao]
    def alterar_status_impressao_using_put(id, id_status_impressao, opts = {})
      data, _status_code, _headers = alterar_status_impressao_using_put_with_http_info(id, id_status_impressao, opts)
      return data
    end

    # Realiza a altera\u00C3\u00A7\u00C3\u00A3o do Status de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite que uma Aplica\u00C3\u00A7\u00C3\u00A3o que realize a impress\u00C3\u00A3o de cart\u00C3\u00B5es possa indicar que um determinado idCartao fora impresso ou est\u00C3\u00A1 em processo de impress\u00C3\u00A3o. Para isso, basta informar o respectivo c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do cart\u00C3\u00A3o (id) que deseja ter seu um determinado id_status_impressao atribu\u00C3\u00ADdo a ele. Por padr\u00C3\u00A3o, cart\u00C3\u00B5es provis\u00C3\u00B3rios ou que j\u00C3\u00A1 tenham sido inclu\u00C3\u00ADdos em um arquivo para impress\u00C3\u00A3o via gr\u00C3\u00A1fica ter\u00C3\u00A3o esta requisi\u00C3\u00A7\u00C3\u00A3o negada, se utilizada.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param id_status_impressao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status Impress\u00C3\u00A3o (Id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(HistoricoImpressaoCartao, Fixnum, Hash)>] HistoricoImpressaoCartao data, response status code and response headers
    def alterar_status_impressao_using_put_with_http_info(id, id_status_impressao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.alterar_status_impressao_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.alterar_status_impressao_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_status_impressao' is set
      fail ArgumentError, "Missing the required parameter 'id_status_impressao' when calling CartaoApi.alterar_status_impressao_using_put" if id_status_impressao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/alterar-status-impressao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_status_impressao'] = id_status_impressao

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HistoricoImpressaoCartao')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#alterar_status_impressao_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realiza a atribui\u00C3\u00A7\u00C3\u00A3o de um cart\u00C3\u00A3o pr\u00C3\u00A9-pago a uma pessoa
    # Esta m\u00C3\u00A9todo permite que um cart\u00C3\u00A3o pr\u00C3\u00A9-pago impresso de forma avulsa e an\u00C3\u00B4nimo seja atribu\u00C3\u00ADdo a uma pessoa para que esta passe a ser a portadora titular dele.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id)
    # @param id_pessoa C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o de uma Pessoa (id).
    # @param [Hash] opts the optional parameters
    # @return [Cartao]
    def atribuir_pessoa_using_put(id, id_pessoa, opts = {})
      data, _status_code, _headers = atribuir_pessoa_using_put_with_http_info(id, id_pessoa, opts)
      return data
    end

    # Realiza a atribui\u00C3\u00A7\u00C3\u00A3o de um cart\u00C3\u00A3o pr\u00C3\u00A9-pago a uma pessoa
    # Esta m\u00C3\u00A9todo permite que um cart\u00C3\u00A3o pr\u00C3\u00A9-pago impresso de forma avulsa e an\u00C3\u00B4nimo seja atribu\u00C3\u00ADdo a uma pessoa para que esta passe a ser a portadora titular dele.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id)
    # @param id_pessoa C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o de uma Pessoa (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cartao, Fixnum, Hash)>] Cartao data, response status code and response headers
    def atribuir_pessoa_using_put_with_http_info(id, id_pessoa, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.atribuir_pessoa_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.atribuir_pessoa_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_pessoa' is set
      fail ArgumentError, "Missing the required parameter 'id_pessoa' when calling CartaoApi.atribuir_pessoa_using_put" if id_pessoa.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/atribuir-pessoa".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_pessoa'] = id_pessoa

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cartao')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#atribuir_pessoa_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realiza o bloqueio de um determinado Cart\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite a realiza\u00C3\u00A7\u00C3\u00A3o do bloqueio (tempor\u00C3\u00A1rio) ou do cancelamento (definitivo) de um determinado cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id). Para isso, \u00C3\u00A9 preciso informar qual o motivo deste bloqueio que nada mais \u00C3\u00A9 do que atribuir um novo StatusCartao para ele dentre as op\u00C3\u00A7\u00C3\u00B5es praticadas pelo emissor.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param id_status C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Novo Status Cart\u00C3\u00A3o.
    # @param observacao Texto informando uma observa\u00C3\u00A7\u00C3\u00A3o sobre o bloqueio.
    # @param [Hash] opts the optional parameters
    # @return [Cartao]
    def bloquear_using_put(id, id_status, observacao, opts = {})
      data, _status_code, _headers = bloquear_using_put_with_http_info(id, id_status, observacao, opts)
      return data
    end

    # Realiza o bloqueio de um determinado Cart\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite a realiza\u00C3\u00A7\u00C3\u00A3o do bloqueio (tempor\u00C3\u00A1rio) ou do cancelamento (definitivo) de um determinado cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id). Para isso, \u00C3\u00A9 preciso informar qual o motivo deste bloqueio que nada mais \u00C3\u00A9 do que atribuir um novo StatusCartao para ele dentre as op\u00C3\u00A7\u00C3\u00B5es praticadas pelo emissor.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param id_status C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Novo Status Cart\u00C3\u00A3o.
    # @param observacao Texto informando uma observa\u00C3\u00A7\u00C3\u00A3o sobre o bloqueio.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cartao, Fixnum, Hash)>] Cartao data, response status code and response headers
    def bloquear_using_put_with_http_info(id, id_status, observacao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.bloquear_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.bloquear_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_status' is set
      fail ArgumentError, "Missing the required parameter 'id_status' when calling CartaoApi.bloquear_using_put" if id_status.nil?
      
      
      
      
      
      
      # verify the required parameter 'observacao' is set
      fail ArgumentError, "Missing the required parameter 'observacao' when calling CartaoApi.bloquear_using_put" if observacao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/bloquear".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_status'] = id_status
      query_params[:'observacao'] = observacao

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cartao')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#bloquear_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realiza o cadastro da senha de um Cart\u00C3\u00A3o
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que o portador de um determinado cart\u00C3\u00A3o possa definir uma senha a sua escolha.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param senha Senha para ser cadastrada ou alterada.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def cadastrar_alterar_senha_using_post(id, senha, opts = {})
      data, _status_code, _headers = cadastrar_alterar_senha_using_post_with_http_info(id, senha, opts)
      return data
    end

    # Realiza o cadastro da senha de um Cart\u00C3\u00A3o
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que o portador de um determinado cart\u00C3\u00A3o possa definir uma senha a sua escolha.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param senha Senha para ser cadastrada ou alterada.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def cadastrar_alterar_senha_using_post_with_http_info(id, senha, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.cadastrar_alterar_senha_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.cadastrar_alterar_senha_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha' is set
      fail ArgumentError, "Missing the required parameter 'senha' when calling CartaoApi.cadastrar_alterar_senha_using_post" if senha.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/cadastrar-senha".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'senha'] = senha

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#cadastrar_alterar_senha_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Apresenta os limites do Portador do Cart\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite consultar os Limites configurados para o Portador de um determinado Cart\u00C3\u00A3o, seja ele o titular da conta ou um adicional, a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param [Hash] opts the optional parameters
    # @return [LimiteDisponibilidade]
    def consultar_limite_disponibilidade_using_get(id, opts = {})
      data, _status_code, _headers = consultar_limite_disponibilidade_using_get_with_http_info(id, opts)
      return data
    end

    # Apresenta os limites do Portador do Cart\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite consultar os Limites configurados para o Portador de um determinado Cart\u00C3\u00A3o, seja ele o titular da conta ou um adicional, a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(LimiteDisponibilidade, Fixnum, Hash)>] LimiteDisponibilidade data, response status code and response headers
    def consultar_limite_disponibilidade_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.consultar_limite_disponibilidade_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.consultar_limite_disponibilidade_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/limites-disponibilidades".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LimiteDisponibilidade')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#consultar_limite_disponibilidade_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Permite consultar um determinado Lote de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
    # Este m\u00C3\u00A9todo permite consultar os cart\u00C3\u00B5es pr\u00C3\u00A9-pagos existentes na base do emissor atrav\u00C3\u00A9s do id do lote.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do lote de cart\u00C3\u00B5es (id)
    # @param [Hash] opts the optional parameters
    # @return [LoteCartoesPrePagos]
    def consultar_lotes_cartoes_pre_pagos_using_get(id, opts = {})
      data, _status_code, _headers = consultar_lotes_cartoes_pre_pagos_using_get_with_http_info(id, opts)
      return data
    end

    # Permite consultar um determinado Lote de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
    # Este m\u00C3\u00A9todo permite consultar os cart\u00C3\u00B5es pr\u00C3\u00A9-pagos existentes na base do emissor atrav\u00C3\u00A9s do id do lote.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do lote de cart\u00C3\u00B5es (id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(LoteCartoesPrePagos, Fixnum, Hash)>] LoteCartoesPrePagos data, response status code and response headers
    def consultar_lotes_cartoes_pre_pagos_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.consultar_lotes_cartoes_pre_pagos_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.consultar_lotes_cartoes_pre_pagos_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/lotes-cartoes-pre-pagos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LoteCartoesPrePagos')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#consultar_lotes_cartoes_pre_pagos_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Apresenta os dados do Portador do Cart\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite consultar as informa\u00C3\u00A7\u00C3\u00B5es do Portador de um determinado Cart\u00C3\u00A3o a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Portador]
    def consultar_portador_using_get(id, opts = {})
      data, _status_code, _headers = consultar_portador_using_get_with_http_info(id, opts)
      return data
    end

    # Apresenta os dados do Portador do Cart\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite consultar as informa\u00C3\u00A7\u00C3\u00B5es do Portador de um determinado Cart\u00C3\u00A3o a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(Portador, Fixnum, Hash)>] Portador data, response status code and response headers
    def consultar_portador_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.consultar_portador_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.consultar_portador_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/portadores".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Portador')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#consultar_portador_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Apresenta os dados de um determinado Cart\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite consultar as informa\u00C3\u00A7\u00C3\u00B5es b\u00C3\u00A1sicas de um determinado Cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Cartao]
    def consultar_using_get2(id, opts = {})
      data, _status_code, _headers = consultar_using_get2_with_http_info(id, opts)
      return data
    end

    # Apresenta os dados de um determinado Cart\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite consultar as informa\u00C3\u00A7\u00C3\u00B5es b\u00C3\u00A1sicas de um determinado Cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cartao, Fixnum, Hash)>] Cartao data, response status code and response headers
    def consultar_using_get2_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.consultar_using_get2 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.consultar_using_get2" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cartao')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#consultar_using_get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Consultar uma transfer\u00C3\u00AAncia banc\u00C3\u00A1ria
    # Este recurso permite consultar os detalhes de uma determinada transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito realizada entre contas. De modo geral, esta opera\u00C3\u00A7\u00C3\u00A3o poder\u00C3\u00A1 ser utilizada para uma consulta simples destes detalhes ou para realizar a montagem de um comprovante de 2\u00C2\u00AA via de transfer\u00C3\u00AAncia entre contas.
    # @param id Id Cart\u00C3\u00A3o
    # @param id_transferencia Id Transfer\u00C3\u00AAncia
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_conta_bancaria_destino C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria de destino (id)
    # @return [LinkTransferenciaBancariaResponse]
    def consultar_using_get20(id, id_transferencia, opts = {})
      data, _status_code, _headers = consultar_using_get20_with_http_info(id, id_transferencia, opts)
      return data
    end

    # Consultar uma transfer\u00C3\u00AAncia banc\u00C3\u00A1ria
    # Este recurso permite consultar os detalhes de uma determinada transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito realizada entre contas. De modo geral, esta opera\u00C3\u00A7\u00C3\u00A3o poder\u00C3\u00A1 ser utilizada para uma consulta simples destes detalhes ou para realizar a montagem de um comprovante de 2\u00C2\u00AA via de transfer\u00C3\u00AAncia entre contas.
    # @param id Id Cart\u00C3\u00A3o
    # @param id_transferencia Id Transfer\u00C3\u00AAncia
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_conta_bancaria_destino C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria de destino (id)
    # @return [Array<(LinkTransferenciaBancariaResponse, Fixnum, Hash)>] LinkTransferenciaBancariaResponse data, response status code and response headers
    def consultar_using_get20_with_http_info(id, id_transferencia, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.consultar_using_get20 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.consultar_using_get20" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_transferencia' is set
      fail ArgumentError, "Missing the required parameter 'id_transferencia' when calling CartaoApi.consultar_using_get20" if id_transferencia.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/transferencias-creditos-contas-bancarias/{id_transferencia}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'id_transferencia' + '}', id_transferencia.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_conta_bancaria_destino'] = opts[:'id_conta_bancaria_destino'] if opts[:'id_conta_bancaria_destino']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LinkTransferenciaBancariaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#consultar_using_get20\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realiza o desbloqueio de um determinado Cart\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite que seja desbloqueado um determinado cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Cartao]
    def desbloquear_using_put(id, opts = {})
      data, _status_code, _headers = desbloquear_using_put_with_http_info(id, opts)
      return data
    end

    # Realiza o desbloqueio de um determinado Cart\u00C3\u00A3o
    # Este m\u00C3\u00A9todo permite que seja desbloqueado um determinado cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cartao, Fixnum, Hash)>] Cartao data, response status code and response headers
    def desbloquear_using_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.desbloquear_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.desbloquear_using_put" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/desbloquear".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cartao')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#desbloquear_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Permite gerar um novo Lote de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores gerem uma determinada quantidade de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pagos, de forma n\u00C3\u00A3o nominal, os quais poder\u00C3\u00A3o ser comercializados e posteriormente vinculados a um cliente que o adquirir. Para isso, al\u00C3\u00A9m de definir quantos cart\u00C3\u00B5es dever\u00C3\u00A3o ser gerados, ser\u00C3\u00A1 poss\u00C3\u00ADvel definir qual a Origem Comercial, o Produto, o Tipo do Cart\u00C3\u00A3o, a Imagem e o Endere\u00C3\u00A7o para entrega dos Cart\u00C3\u00B5es presentes no lote gerado. Por padr\u00C3\u00A3o, todos os cart\u00C3\u00B5es ser\u00C3\u00A3o associados a um idPessoa fict\u00C3\u00ADcio e receber\u00C3\u00A1 um idConta \u00C3\u00BAnico para cada um deles. Feito isso, os Cart\u00C3\u00B5es gerados por esta opera\u00C3\u00A7\u00C3\u00A3o seguir\u00C3\u00A3o os mesmos processos de impress\u00C3\u00A3o via gr\u00C3\u00A1fica previamente definidos entre o Emissor e a Conductor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_origem_comercial C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id).
    # @option opts [Integer] :id_produto C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id).
    # @option opts [Integer] :id_tipo_cartao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Cart\u00C3\u00A3o (id).
    # @option opts [Integer] :id_imagem C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Imagem (id).
    # @option opts [Integer] :id_endereco C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id).
    # @option opts [Integer] :quantidade_cartoes N\u00C3\u00BAmero de cart\u00C3\u00B5es existentes no Lote.
    # @return [LoteCartoesPrePagos]
    def gerar_lotes_cartoes_pre_pagos_using_post(opts = {})
      data, _status_code, _headers = gerar_lotes_cartoes_pre_pagos_using_post_with_http_info(opts)
      return data
    end

    # Permite gerar um novo Lote de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores gerem uma determinada quantidade de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pagos, de forma n\u00C3\u00A3o nominal, os quais poder\u00C3\u00A3o ser comercializados e posteriormente vinculados a um cliente que o adquirir. Para isso, al\u00C3\u00A9m de definir quantos cart\u00C3\u00B5es dever\u00C3\u00A3o ser gerados, ser\u00C3\u00A1 poss\u00C3\u00ADvel definir qual a Origem Comercial, o Produto, o Tipo do Cart\u00C3\u00A3o, a Imagem e o Endere\u00C3\u00A7o para entrega dos Cart\u00C3\u00B5es presentes no lote gerado. Por padr\u00C3\u00A3o, todos os cart\u00C3\u00B5es ser\u00C3\u00A3o associados a um idPessoa fict\u00C3\u00ADcio e receber\u00C3\u00A1 um idConta \u00C3\u00BAnico para cada um deles. Feito isso, os Cart\u00C3\u00B5es gerados por esta opera\u00C3\u00A7\u00C3\u00A3o seguir\u00C3\u00A3o os mesmos processos de impress\u00C3\u00A3o via gr\u00C3\u00A1fica previamente definidos entre o Emissor e a Conductor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_origem_comercial C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id).
    # @option opts [Integer] :id_produto C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id).
    # @option opts [Integer] :id_tipo_cartao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Cart\u00C3\u00A3o (id).
    # @option opts [Integer] :id_imagem C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Imagem (id).
    # @option opts [Integer] :id_endereco C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id).
    # @option opts [Integer] :quantidade_cartoes N\u00C3\u00BAmero de cart\u00C3\u00B5es existentes no Lote.
    # @return [Array<(LoteCartoesPrePagos, Fixnum, Hash)>] LoteCartoesPrePagos data, response status code and response headers
    def gerar_lotes_cartoes_pre_pagos_using_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.gerar_lotes_cartoes_pre_pagos_using_post ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/lotes-cartoes-pre-pagos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idOrigemComercial'] = opts[:'id_origem_comercial'] if opts[:'id_origem_comercial']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']
      query_params[:'idTipoCartao'] = opts[:'id_tipo_cartao'] if opts[:'id_tipo_cartao']
      query_params[:'idImagem'] = opts[:'id_imagem'] if opts[:'id_imagem']
      query_params[:'idEndereco'] = opts[:'id_endereco'] if opts[:'id_endereco']
      query_params[:'quantidadeCartoes'] = opts[:'quantidade_cartoes'] if opts[:'quantidade_cartoes']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LoteCartoesPrePagos')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#gerar_lotes_cartoes_pre_pagos_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Gerar uma nova via de Cart\u00C3\u00A3o
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores ou seus clientes possam solicitar a gera\u00C3\u00A7\u00C3\u00A3o de uma nova via de Cart\u00C3\u00A3o que ser\u00C3\u00A1 encaminhando para impress\u00C3\u00A3o e postagem de acordo com os fluxos padr\u00C3\u00B5es j\u00C3\u00A1 definidos pelo emissor. Para isso, \u00C3\u00A9 preciso que o cliente j\u00C3\u00A1 possua um cart\u00C3\u00A3o gerado e informar o C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o deste (idCartao) para que ele possa utilizar esta opera\u00C3\u00A7\u00C3\u00A3o. Assim, esta funcionalidade se aplica apenas para a gera\u00C3\u00A7\u00C3\u00A3o de cart\u00C3\u00B5es f\u00C3\u00ADsicos.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id)
    # @param [Hash] opts the optional parameters
    # @return [Cartao]
    def gerar_nova_via_using_post(id, opts = {})
      data, _status_code, _headers = gerar_nova_via_using_post_with_http_info(id, opts)
      return data
    end

    # Gerar uma nova via de Cart\u00C3\u00A3o
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores ou seus clientes possam solicitar a gera\u00C3\u00A7\u00C3\u00A3o de uma nova via de Cart\u00C3\u00A3o que ser\u00C3\u00A1 encaminhando para impress\u00C3\u00A3o e postagem de acordo com os fluxos padr\u00C3\u00B5es j\u00C3\u00A1 definidos pelo emissor. Para isso, \u00C3\u00A9 preciso que o cliente j\u00C3\u00A1 possua um cart\u00C3\u00A3o gerado e informar o C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o deste (idCartao) para que ele possa utilizar esta opera\u00C3\u00A7\u00C3\u00A3o. Assim, esta funcionalidade se aplica apenas para a gera\u00C3\u00A7\u00C3\u00A3o de cart\u00C3\u00B5es f\u00C3\u00ADsicos.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cartao, Fixnum, Hash)>] Cartao data, response status code and response headers
    def gerar_nova_via_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.gerar_nova_via_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.gerar_nova_via_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/gerar-nova-via".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Cartao')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#gerar_nova_via_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Permite listar os Lotes de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
    # Este m\u00C3\u00A9todo permite que sejam listados os cart\u00C3\u00B5es pr\u00C3\u00A9-pagos existentes na base do emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Integer] :id_origem_comercial C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id).
    # @option opts [Integer] :id_produto C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id).
    # @option opts [Integer] :id_tipo_cartao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Cart\u00C3\u00A3o (id).
    # @option opts [Integer] :id_imagem C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Imagem (id).
    # @option opts [Integer] :id_endereco C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id).
    # @option opts [Integer] :quantidade_cartoes N\u00C3\u00BAmero de cart\u00C3\u00B5es existentes no Lote.
    # @option opts [Date] :data_cadastro Data de Cadastro do Lote de Cart\u00C3\u00B5es N\u00C3\u00A3o Nominais.
    # @option opts [String] :usuario_cadastro Nome do Usu\u00C3\u00A1rio que criou o Lote.
    # @option opts [Integer] :status_processamento Indica o Status de Processamento do Lote.
    # @return [PageLoteCartoesPrePagosResponse]
    def listar_lotes_cartoes_pre_pagos_using_get(opts = {})
      data, _status_code, _headers = listar_lotes_cartoes_pre_pagos_using_get_with_http_info(opts)
      return data
    end

    # Permite listar os Lotes de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
    # Este m\u00C3\u00A9todo permite que sejam listados os cart\u00C3\u00B5es pr\u00C3\u00A9-pagos existentes na base do emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Integer] :id_origem_comercial C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id).
    # @option opts [Integer] :id_produto C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id).
    # @option opts [Integer] :id_tipo_cartao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Cart\u00C3\u00A3o (id).
    # @option opts [Integer] :id_imagem C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Imagem (id).
    # @option opts [Integer] :id_endereco C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id).
    # @option opts [Integer] :quantidade_cartoes N\u00C3\u00BAmero de cart\u00C3\u00B5es existentes no Lote.
    # @option opts [Date] :data_cadastro Data de Cadastro do Lote de Cart\u00C3\u00B5es N\u00C3\u00A3o Nominais.
    # @option opts [String] :usuario_cadastro Nome do Usu\u00C3\u00A1rio que criou o Lote.
    # @option opts [Integer] :status_processamento Indica o Status de Processamento do Lote.
    # @return [Array<(PageLoteCartoesPrePagosResponse, Fixnum, Hash)>] PageLoteCartoesPrePagosResponse data, response status code and response headers
    def listar_lotes_cartoes_pre_pagos_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.listar_lotes_cartoes_pre_pagos_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/lotes-cartoes-pre-pagos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idOrigemComercial'] = opts[:'id_origem_comercial'] if opts[:'id_origem_comercial']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']
      query_params[:'idTipoCartao'] = opts[:'id_tipo_cartao'] if opts[:'id_tipo_cartao']
      query_params[:'idImagem'] = opts[:'id_imagem'] if opts[:'id_imagem']
      query_params[:'idEndereco'] = opts[:'id_endereco'] if opts[:'id_endereco']
      query_params[:'quantidadeCartoes'] = opts[:'quantidade_cartoes'] if opts[:'quantidade_cartoes']
      query_params[:'dataCadastro'] = opts[:'data_cadastro'] if opts[:'data_cadastro']
      query_params[:'usuarioCadastro'] = opts[:'usuario_cadastro'] if opts[:'usuario_cadastro']
      query_params[:'statusProcessamento'] = opts[:'status_processamento'] if opts[:'status_processamento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageLoteCartoesPrePagosResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#listar_lotes_cartoes_pre_pagos_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Listar as transfer\u00C3\u00AAncias banc\u00C3\u00A1rias realizadas
    # Este recurso tem como objetivo permitir que o portador de um Cart\u00C3\u00A3o possa consultar uma lista das Transfer\u00C3\u00AAncias Banc\u00C3\u00A1rias para os Favorecidos cadastrados.
    # @param id Id Cart\u00C3\u00A3o
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_conta_bancaria_destino C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria de destino (id)
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [LinkPageTransferenciaBancariaResponse]
    def listar_using_get19(id, opts = {})
      data, _status_code, _headers = listar_using_get19_with_http_info(id, opts)
      return data
    end

    # Listar as transfer\u00C3\u00AAncias banc\u00C3\u00A1rias realizadas
    # Este recurso tem como objetivo permitir que o portador de um Cart\u00C3\u00A3o possa consultar uma lista das Transfer\u00C3\u00AAncias Banc\u00C3\u00A1rias para os Favorecidos cadastrados.
    # @param id Id Cart\u00C3\u00A3o
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_conta_bancaria_destino C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta banc\u00C3\u00A1ria de destino (id)
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [Array<(LinkPageTransferenciaBancariaResponse, Fixnum, Hash)>] LinkPageTransferenciaBancariaResponse data, response status code and response headers
    def listar_using_get19_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.listar_using_get19 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.listar_using_get19" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/transferencias-creditos-contas-bancarias".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_conta_bancaria_destino'] = opts[:'id_conta_bancaria_destino'] if opts[:'id_conta_bancaria_destino']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LinkPageTransferenciaBancariaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#listar_using_get19\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista os Cart\u00C3\u00B5es gerados pelo Emissor
    # Este m\u00C3\u00A9todo permite que sejam listados os cart\u00C3\u00B5es existentes na base do emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Integer] :id_status_cartao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id).
    # @option opts [Integer] :id_estagio_cartao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Est\u00C3\u00A1gio de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @option opts [Integer] :id_conta C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta a qual o cart\u00C3\u00A3o pertence (id).
    # @option opts [Integer] :id_pessoa C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o cart\u00C3\u00A3o pertence (id)
    # @option opts [Integer] :id_produto C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto a qual o cart\u00C3\u00A3o pertence (id).
    # @option opts [String] :tipo_portador Apresenta o tipo do Portador do cart\u00C3\u00A3o, sendo: (&#39;T&#39;: Titular, &#39;A&#39;: Adicional).
    # @option opts [String] :numero_cartao Apresenta o n\u00C3\u00BAmero do cart\u00C3\u00A3o.
    # @option opts [String] :nome_impresso Apresenta o nome impresso no cart\u00C3\u00A3o.
    # @option opts [Date] :data_geracao Apresenta a data em que o cart\u00C3\u00A3o foi gerado.
    # @option opts [Date] :data_status_cartao Apresenta a data em que o idStatusCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver.
    # @option opts [Date] :data_estagio_cartao Apresenta a data em que o idEstagioCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver.
    # @option opts [String] :data_validade Apresenta a data de validade do cart\u00C3\u00A3o em formato yyyy-MM, quando houver.
    # @option opts [Date] :data_impressao Apresenta a data em que o cart\u00C3\u00A3o fora impresso, caso impress\u00C3\u00A3o em loja, ou a data em que ele fora inclu\u00C3\u00ADdo no arquivo para impress\u00C3\u00A3o via gr\u00C3\u00A1fica.
    # @option opts [String] :arquivo_impressao Apresenta o nome do arquivo onde o cart\u00C3\u00A3o fora inclu\u00C3\u00ADdo para impress\u00C3\u00A3o por uma gr\u00C3\u00A1fica, quando houver.
    # @option opts [Integer] :flag_impressao_origem_comercial Quando ativa, indica que o cart\u00C3\u00A3o fora impresso na Origem Comercial.
    # @option opts [Integer] :flag_provisorio Quando ativa, indica que o cart\u00C3\u00A3o \u00C3\u00A9 provis\u00C3\u00B3rio. Ou seja, \u00C3\u00A9 um cart\u00C3\u00A3o para uso tempor\u00C3\u00A1rio quando se deseja permitir que o cliente transacione sem que ele tenha recebido um cart\u00C3\u00A3o definitivo.
    # @option opts [String] :codigo_desbloqueio Apresenta um c\u00C3\u00B3digo espec\u00C3\u00ADfico para ser utilizado como vari\u00C3\u00A1vel no processo de desbloqueio do cart\u00C3\u00A3o para emissores que querem usar esta funcionalidade.
    # @return [PageCartoes]
    def listar_using_get2(opts = {})
      data, _status_code, _headers = listar_using_get2_with_http_info(opts)
      return data
    end

    # Lista os Cart\u00C3\u00B5es gerados pelo Emissor
    # Este m\u00C3\u00A9todo permite que sejam listados os cart\u00C3\u00B5es existentes na base do emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Integer] :id_status_cartao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id).
    # @option opts [Integer] :id_estagio_cartao C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Est\u00C3\u00A1gio de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @option opts [Integer] :id_conta C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta a qual o cart\u00C3\u00A3o pertence (id).
    # @option opts [Integer] :id_pessoa C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o cart\u00C3\u00A3o pertence (id)
    # @option opts [Integer] :id_produto C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto a qual o cart\u00C3\u00A3o pertence (id).
    # @option opts [String] :tipo_portador Apresenta o tipo do Portador do cart\u00C3\u00A3o, sendo: (&#39;T&#39;: Titular, &#39;A&#39;: Adicional).
    # @option opts [String] :numero_cartao Apresenta o n\u00C3\u00BAmero do cart\u00C3\u00A3o.
    # @option opts [String] :nome_impresso Apresenta o nome impresso no cart\u00C3\u00A3o.
    # @option opts [Date] :data_geracao Apresenta a data em que o cart\u00C3\u00A3o foi gerado.
    # @option opts [Date] :data_status_cartao Apresenta a data em que o idStatusCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver.
    # @option opts [Date] :data_estagio_cartao Apresenta a data em que o idEstagioCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver.
    # @option opts [String] :data_validade Apresenta a data de validade do cart\u00C3\u00A3o em formato yyyy-MM, quando houver.
    # @option opts [Date] :data_impressao Apresenta a data em que o cart\u00C3\u00A3o fora impresso, caso impress\u00C3\u00A3o em loja, ou a data em que ele fora inclu\u00C3\u00ADdo no arquivo para impress\u00C3\u00A3o via gr\u00C3\u00A1fica.
    # @option opts [String] :arquivo_impressao Apresenta o nome do arquivo onde o cart\u00C3\u00A3o fora inclu\u00C3\u00ADdo para impress\u00C3\u00A3o por uma gr\u00C3\u00A1fica, quando houver.
    # @option opts [Integer] :flag_impressao_origem_comercial Quando ativa, indica que o cart\u00C3\u00A3o fora impresso na Origem Comercial.
    # @option opts [Integer] :flag_provisorio Quando ativa, indica que o cart\u00C3\u00A3o \u00C3\u00A9 provis\u00C3\u00B3rio. Ou seja, \u00C3\u00A9 um cart\u00C3\u00A3o para uso tempor\u00C3\u00A1rio quando se deseja permitir que o cliente transacione sem que ele tenha recebido um cart\u00C3\u00A3o definitivo.
    # @option opts [String] :codigo_desbloqueio Apresenta um c\u00C3\u00B3digo espec\u00C3\u00ADfico para ser utilizado como vari\u00C3\u00A1vel no processo de desbloqueio do cart\u00C3\u00A3o para emissores que querem usar esta funcionalidade.
    # @return [Array<(PageCartoes, Fixnum, Hash)>] PageCartoes data, response status code and response headers
    def listar_using_get2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.listar_using_get2 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idStatusCartao'] = opts[:'id_status_cartao'] if opts[:'id_status_cartao']
      query_params[:'idEstagioCartao'] = opts[:'id_estagio_cartao'] if opts[:'id_estagio_cartao']
      query_params[:'idConta'] = opts[:'id_conta'] if opts[:'id_conta']
      query_params[:'idPessoa'] = opts[:'id_pessoa'] if opts[:'id_pessoa']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']
      query_params[:'tipoPortador'] = opts[:'tipo_portador'] if opts[:'tipo_portador']
      query_params[:'numeroCartao'] = opts[:'numero_cartao'] if opts[:'numero_cartao']
      query_params[:'nomeImpresso'] = opts[:'nome_impresso'] if opts[:'nome_impresso']
      query_params[:'dataGeracao'] = opts[:'data_geracao'] if opts[:'data_geracao']
      query_params[:'dataStatusCartao'] = opts[:'data_status_cartao'] if opts[:'data_status_cartao']
      query_params[:'dataEstagioCartao'] = opts[:'data_estagio_cartao'] if opts[:'data_estagio_cartao']
      query_params[:'dataValidade'] = opts[:'data_validade'] if opts[:'data_validade']
      query_params[:'dataImpressao'] = opts[:'data_impressao'] if opts[:'data_impressao']
      query_params[:'arquivoImpressao'] = opts[:'arquivo_impressao'] if opts[:'arquivo_impressao']
      query_params[:'flagImpressaoOrigemComercial'] = opts[:'flag_impressao_origem_comercial'] if opts[:'flag_impressao_origem_comercial']
      query_params[:'flagProvisorio'] = opts[:'flag_provisorio'] if opts[:'flag_provisorio']
      query_params[:'codigoDesbloqueio'] = opts[:'codigo_desbloqueio'] if opts[:'codigo_desbloqueio']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCartoes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#listar_using_get2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realizar transfer\u00C3\u00AAncia banc\u00C3\u00A1ria entre bancos / contas
    # Este recurso tem como objetivo permitir que o portador de um cart\u00C3\u00A3o possa realizar a transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito para outro cliente do mesmo emissor. Assim, o valor do cr\u00C3\u00A9dito somado a tarifa para transfer\u00C3\u00AAncia, quando praticada pelo emissor, ser\u00C3\u00A1 debitado da conta de origem, se houver saldo suficiente, e ser\u00C3\u00A1 creditado na conta de destino.
    # @param id Id Cart\u00C3\u00A3o
    # @param data_compra Data da transfer\u00C3\u00AAncia
    # @param proximo_vencimento_padrao Dia do vencimento padr\u00C3\u00A3o da fatura
    # @param proximo_vencimento_real Data do vencimento real da fatura
    # @param valor_compra Valor da transfer\u00C3\u00AAncia
    # @param nome_favorecido Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;.
    # @param documento_favorecido N\u00C3\u00BAmero do CPF ou CNPJ.
    # @param banco C\u00C3\u00B3digo do banco
    # @param numero_agencia N\u00C3\u00BAmero da ag\u00C3\u00AAncia
    # @param numero_conta N\u00C3\u00BAmero da conta
    # @param flag_conta_poupanca Sinaliza se conta banc\u00C3\u00A1ria \u00C3\u00A9 poupan\u00C3\u00A7a (1: Poupan\u00C3\u00A7a, 0: Conta corrente)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [String] :digito_agencia D\u00C3\u00ADgito da ag\u00C3\u00AAncia
    # @option opts [String] :digito_conta D\u00C3\u00ADgito da conta
    # @return [LinkTransferenciaBancariaResponse]
    def transferir_using_post(id, data_compra, proximo_vencimento_padrao, proximo_vencimento_real, valor_compra, nome_favorecido, documento_favorecido, banco, numero_agencia, numero_conta, flag_conta_poupanca, opts = {})
      data, _status_code, _headers = transferir_using_post_with_http_info(id, data_compra, proximo_vencimento_padrao, proximo_vencimento_real, valor_compra, nome_favorecido, documento_favorecido, banco, numero_agencia, numero_conta, flag_conta_poupanca, opts)
      return data
    end

    # Realizar transfer\u00C3\u00AAncia banc\u00C3\u00A1ria entre bancos / contas
    # Este recurso tem como objetivo permitir que o portador de um cart\u00C3\u00A3o possa realizar a transfer\u00C3\u00AAncia de cr\u00C3\u00A9dito para outro cliente do mesmo emissor. Assim, o valor do cr\u00C3\u00A9dito somado a tarifa para transfer\u00C3\u00AAncia, quando praticada pelo emissor, ser\u00C3\u00A1 debitado da conta de origem, se houver saldo suficiente, e ser\u00C3\u00A1 creditado na conta de destino.
    # @param id Id Cart\u00C3\u00A3o
    # @param data_compra Data da transfer\u00C3\u00AAncia
    # @param proximo_vencimento_padrao Dia do vencimento padr\u00C3\u00A3o da fatura
    # @param proximo_vencimento_real Data do vencimento real da fatura
    # @param valor_compra Valor da transfer\u00C3\u00AAncia
    # @param nome_favorecido Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;.
    # @param documento_favorecido N\u00C3\u00BAmero do CPF ou CNPJ.
    # @param banco C\u00C3\u00B3digo do banco
    # @param numero_agencia N\u00C3\u00BAmero da ag\u00C3\u00AAncia
    # @param numero_conta N\u00C3\u00BAmero da conta
    # @param flag_conta_poupanca Sinaliza se conta banc\u00C3\u00A1ria \u00C3\u00A9 poupan\u00C3\u00A7a (1: Poupan\u00C3\u00A7a, 0: Conta corrente)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [String] :digito_agencia D\u00C3\u00ADgito da ag\u00C3\u00AAncia
    # @option opts [String] :digito_conta D\u00C3\u00ADgito da conta
    # @return [Array<(LinkTransferenciaBancariaResponse, Fixnum, Hash)>] LinkTransferenciaBancariaResponse data, response status code and response headers
    def transferir_using_post_with_http_info(id, data_compra, proximo_vencimento_padrao, proximo_vencimento_real, valor_compra, nome_favorecido, documento_favorecido, banco, numero_agencia, numero_conta, flag_conta_poupanca, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.transferir_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.transferir_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_compra' is set
      fail ArgumentError, "Missing the required parameter 'data_compra' when calling CartaoApi.transferir_using_post" if data_compra.nil?
      
      
      
      
      
      
      # verify the required parameter 'proximo_vencimento_padrao' is set
      fail ArgumentError, "Missing the required parameter 'proximo_vencimento_padrao' when calling CartaoApi.transferir_using_post" if proximo_vencimento_padrao.nil?
      
      
      
      
      
      
      # verify the required parameter 'proximo_vencimento_real' is set
      fail ArgumentError, "Missing the required parameter 'proximo_vencimento_real' when calling CartaoApi.transferir_using_post" if proximo_vencimento_real.nil?
      
      
      
      
      
      
      # verify the required parameter 'valor_compra' is set
      fail ArgumentError, "Missing the required parameter 'valor_compra' when calling CartaoApi.transferir_using_post" if valor_compra.nil?
      
      
      
      
      
      
      # verify the required parameter 'nome_favorecido' is set
      fail ArgumentError, "Missing the required parameter 'nome_favorecido' when calling CartaoApi.transferir_using_post" if nome_favorecido.nil?
      
      
      
      
      
      
      # verify the required parameter 'documento_favorecido' is set
      fail ArgumentError, "Missing the required parameter 'documento_favorecido' when calling CartaoApi.transferir_using_post" if documento_favorecido.nil?
      
      
      
      
      
      
      # verify the required parameter 'banco' is set
      fail ArgumentError, "Missing the required parameter 'banco' when calling CartaoApi.transferir_using_post" if banco.nil?
      
      
      
      
      
      
      # verify the required parameter 'numero_agencia' is set
      fail ArgumentError, "Missing the required parameter 'numero_agencia' when calling CartaoApi.transferir_using_post" if numero_agencia.nil?
      
      
      
      
      
      
      # verify the required parameter 'numero_conta' is set
      fail ArgumentError, "Missing the required parameter 'numero_conta' when calling CartaoApi.transferir_using_post" if numero_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'flag_conta_poupanca' is set
      fail ArgumentError, "Missing the required parameter 'flag_conta_poupanca' when calling CartaoApi.transferir_using_post" if flag_conta_poupanca.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/transferencias-creditos-contas-bancarias".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'dataCompra'] = data_compra
      query_params[:'proximoVencimentoPadrao'] = proximo_vencimento_padrao
      query_params[:'proximoVencimentoReal'] = proximo_vencimento_real
      query_params[:'valorCompra'] = valor_compra
      query_params[:'nomeFavorecido'] = nome_favorecido
      query_params[:'documentoFavorecido'] = documento_favorecido
      query_params[:'banco'] = banco
      query_params[:'numeroAgencia'] = numero_agencia
      query_params[:'numeroConta'] = numero_conta
      query_params[:'flagContaPoupanca'] = flag_conta_poupanca
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'digitoAgencia'] = opts[:'digito_agencia'] if opts[:'digito_agencia']
      query_params[:'digitoConta'] = opts[:'digito_conta'] if opts[:'digito_conta']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LinkTransferenciaBancariaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#transferir_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Permite validar um Cart\u00C3\u00A3o com bandeira Mastercard a partir do chip
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem o criptograma gerado a partir da leitura de um chip EMV de um Cart\u00C3\u00A3o com bandeira Mastercard a fim de verificar a sua autenticidade. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o antes de permitir que o portador realize transa\u00C3\u00A7\u00C3\u00B5es diversas, como as de compra e saque na modalidade d\u00C3\u00A9bito em conta corrente, dentre outras.
    # @param numero_cartao N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado.
    # @param criptograma Criptograma do cart\u00C3\u00A3o no formato de55
    # @param [Hash] opts the optional parameters
    # @return [ValidaCartao]
    def validar_cartao_chip_bandeirado_using_get(numero_cartao, criptograma, opts = {})
      data, _status_code, _headers = validar_cartao_chip_bandeirado_using_get_with_http_info(numero_cartao, criptograma, opts)
      return data
    end

    # Permite validar um Cart\u00C3\u00A3o com bandeira Mastercard a partir do chip
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem o criptograma gerado a partir da leitura de um chip EMV de um Cart\u00C3\u00A3o com bandeira Mastercard a fim de verificar a sua autenticidade. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o antes de permitir que o portador realize transa\u00C3\u00A7\u00C3\u00B5es diversas, como as de compra e saque na modalidade d\u00C3\u00A9bito em conta corrente, dentre outras.
    # @param numero_cartao N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado.
    # @param criptograma Criptograma do cart\u00C3\u00A3o no formato de55
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidaCartao, Fixnum, Hash)>] ValidaCartao data, response status code and response headers
    def validar_cartao_chip_bandeirado_using_get_with_http_info(numero_cartao, criptograma, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.validar_cartao_chip_bandeirado_using_get ..."
      end
      
      
      # verify the required parameter 'numero_cartao' is set
      fail ArgumentError, "Missing the required parameter 'numero_cartao' when calling CartaoApi.validar_cartao_chip_bandeirado_using_get" if numero_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'criptograma' is set
      fail ArgumentError, "Missing the required parameter 'criptograma' when calling CartaoApi.validar_cartao_chip_bandeirado_using_get" if criptograma.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/bandeirados/validar-chip".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'numero_cartao'] = numero_cartao
      query_params[:'criptograma'] = criptograma

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidaCartao')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#validar_cartao_chip_bandeirado_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Permite validar um Cart\u00C3\u00A3o bandeirado a partir dos dados Impressos
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir do envio dos dados sens\u00C3\u00ADveis impressos nele. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o para a realiza\u00C3\u00A7\u00C3\u00A3o de transa\u00C3\u00A7\u00C3\u00B5es e-commerce ou por meio de Centrais de Atendimento Eletr\u00C3\u00B4nico (URA), dentre outras.
    # @param numero_cartao N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado.
    # @param nome_portador Nome do portador do cart\u00C3\u00A3o
    # @param data_validade Data de validade do cart\u00C3\u00A3o no formato yyyy-MM
    # @param codigo_seguranca C\u00C3\u00B3digo de seguran\u00C3\u00A7a do cart\u00C3\u00A3o com tr\u00C3\u00AAs n\u00C3\u00BAmeros
    # @param [Hash] opts the optional parameters
    # @return [ValidaCartao]
    def validar_cartao_digitado_bandeirado_using_get(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts = {})
      data, _status_code, _headers = validar_cartao_digitado_bandeirado_using_get_with_http_info(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts)
      return data
    end

    # Permite validar um Cart\u00C3\u00A3o bandeirado a partir dos dados Impressos
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir do envio dos dados sens\u00C3\u00ADveis impressos nele. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o para a realiza\u00C3\u00A7\u00C3\u00A3o de transa\u00C3\u00A7\u00C3\u00B5es e-commerce ou por meio de Centrais de Atendimento Eletr\u00C3\u00B4nico (URA), dentre outras.
    # @param numero_cartao N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado.
    # @param nome_portador Nome do portador do cart\u00C3\u00A3o
    # @param data_validade Data de validade do cart\u00C3\u00A3o no formato yyyy-MM
    # @param codigo_seguranca C\u00C3\u00B3digo de seguran\u00C3\u00A7a do cart\u00C3\u00A3o com tr\u00C3\u00AAs n\u00C3\u00BAmeros
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidaCartao, Fixnum, Hash)>] ValidaCartao data, response status code and response headers
    def validar_cartao_digitado_bandeirado_using_get_with_http_info(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.validar_cartao_digitado_bandeirado_using_get ..."
      end
      
      
      # verify the required parameter 'numero_cartao' is set
      fail ArgumentError, "Missing the required parameter 'numero_cartao' when calling CartaoApi.validar_cartao_digitado_bandeirado_using_get" if numero_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'nome_portador' is set
      fail ArgumentError, "Missing the required parameter 'nome_portador' when calling CartaoApi.validar_cartao_digitado_bandeirado_using_get" if nome_portador.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_validade' is set
      fail ArgumentError, "Missing the required parameter 'data_validade' when calling CartaoApi.validar_cartao_digitado_bandeirado_using_get" if data_validade.nil?
      
      
      
      
      
      
      # verify the required parameter 'codigo_seguranca' is set
      fail ArgumentError, "Missing the required parameter 'codigo_seguranca' when calling CartaoApi.validar_cartao_digitado_bandeirado_using_get" if codigo_seguranca.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/bandeirados/validar-digitado".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'numero_cartao'] = numero_cartao
      query_params[:'nome_portador'] = nome_portador
      query_params[:'data_validade'] = data_validade
      query_params[:'codigo_seguranca'] = codigo_seguranca

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidaCartao')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#validar_cartao_digitado_bandeirado_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Permite validar um Cart\u00C3\u00A3o a partir dos dados Impressos
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir do envio dos dados sens\u00C3\u00ADveis impressos nele. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o para a realiza\u00C3\u00A7\u00C3\u00A3o de transa\u00C3\u00A7\u00C3\u00B5es e-commerce ou por meio de Centrais de Atendimento Eletr\u00C3\u00B4nico (URA), dentre outras.
    # @param numero_cartao N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado.
    # @param nome_portador Nome do portador do cart\u00C3\u00A3o
    # @param data_validade Data de validade do cart\u00C3\u00A3o no formato yyyy-MM
    # @param codigo_seguranca C\u00C3\u00B3digo de seguran\u00C3\u00A7a do cart\u00C3\u00A3o com tr\u00C3\u00AAs n\u00C3\u00BAmeros
    # @param [Hash] opts the optional parameters
    # @return [ValidaCartao]
    def validar_cartao_digitado_nao_bandeirado_using_get(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts = {})
      data, _status_code, _headers = validar_cartao_digitado_nao_bandeirado_using_get_with_http_info(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts)
      return data
    end

    # Permite validar um Cart\u00C3\u00A3o a partir dos dados Impressos
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir do envio dos dados sens\u00C3\u00ADveis impressos nele. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o para a realiza\u00C3\u00A7\u00C3\u00A3o de transa\u00C3\u00A7\u00C3\u00B5es e-commerce ou por meio de Centrais de Atendimento Eletr\u00C3\u00B4nico (URA), dentre outras.
    # @param numero_cartao N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado.
    # @param nome_portador Nome do portador do cart\u00C3\u00A3o
    # @param data_validade Data de validade do cart\u00C3\u00A3o no formato yyyy-MM
    # @param codigo_seguranca C\u00C3\u00B3digo de seguran\u00C3\u00A7a do cart\u00C3\u00A3o com tr\u00C3\u00AAs n\u00C3\u00BAmeros
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidaCartao, Fixnum, Hash)>] ValidaCartao data, response status code and response headers
    def validar_cartao_digitado_nao_bandeirado_using_get_with_http_info(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.validar_cartao_digitado_nao_bandeirado_using_get ..."
      end
      
      
      # verify the required parameter 'numero_cartao' is set
      fail ArgumentError, "Missing the required parameter 'numero_cartao' when calling CartaoApi.validar_cartao_digitado_nao_bandeirado_using_get" if numero_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'nome_portador' is set
      fail ArgumentError, "Missing the required parameter 'nome_portador' when calling CartaoApi.validar_cartao_digitado_nao_bandeirado_using_get" if nome_portador.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_validade' is set
      fail ArgumentError, "Missing the required parameter 'data_validade' when calling CartaoApi.validar_cartao_digitado_nao_bandeirado_using_get" if data_validade.nil?
      
      
      
      
      
      
      # verify the required parameter 'codigo_seguranca' is set
      fail ArgumentError, "Missing the required parameter 'codigo_seguranca' when calling CartaoApi.validar_cartao_digitado_nao_bandeirado_using_get" if codigo_seguranca.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/nao-bandeirados/validar-digitado".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'numero_cartao'] = numero_cartao
      query_params[:'nome_portador'] = nome_portador
      query_params[:'data_validade'] = data_validade
      query_params[:'codigo_seguranca'] = codigo_seguranca

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidaCartao')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#validar_cartao_digitado_nao_bandeirado_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Permite validar um Cart\u00C3\u00A3o Bandeirado a partir da Tarja
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir da leitura da tarja magn\u00C3\u00A9tica do mesmo. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o antes de permitir que o portador realize transa\u00C3\u00A7\u00C3\u00B5es diversas, como as de compra e saque na modalidade d\u00C3\u00A9bito em conta corrente, dentre outras.
    # @param numero_cartao N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado.
    # @param trilha1 Trilha 1 do cart\u00C3\u00A3o a ser validado
    # @param trilha2 Trilha 2 do cart\u00C3\u00A3o a ser validado
    # @param [Hash] opts the optional parameters
    # @return [ValidaCartao]
    def validar_cartao_tarja_bandeirado_using_get(numero_cartao, trilha1, trilha2, opts = {})
      data, _status_code, _headers = validar_cartao_tarja_bandeirado_using_get_with_http_info(numero_cartao, trilha1, trilha2, opts)
      return data
    end

    # Permite validar um Cart\u00C3\u00A3o Bandeirado a partir da Tarja
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir da leitura da tarja magn\u00C3\u00A9tica do mesmo. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o antes de permitir que o portador realize transa\u00C3\u00A7\u00C3\u00B5es diversas, como as de compra e saque na modalidade d\u00C3\u00A9bito em conta corrente, dentre outras.
    # @param numero_cartao N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado.
    # @param trilha1 Trilha 1 do cart\u00C3\u00A3o a ser validado
    # @param trilha2 Trilha 2 do cart\u00C3\u00A3o a ser validado
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidaCartao, Fixnum, Hash)>] ValidaCartao data, response status code and response headers
    def validar_cartao_tarja_bandeirado_using_get_with_http_info(numero_cartao, trilha1, trilha2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.validar_cartao_tarja_bandeirado_using_get ..."
      end
      
      
      # verify the required parameter 'numero_cartao' is set
      fail ArgumentError, "Missing the required parameter 'numero_cartao' when calling CartaoApi.validar_cartao_tarja_bandeirado_using_get" if numero_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'trilha1' is set
      fail ArgumentError, "Missing the required parameter 'trilha1' when calling CartaoApi.validar_cartao_tarja_bandeirado_using_get" if trilha1.nil?
      
      
      
      
      
      
      # verify the required parameter 'trilha2' is set
      fail ArgumentError, "Missing the required parameter 'trilha2' when calling CartaoApi.validar_cartao_tarja_bandeirado_using_get" if trilha2.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/bandeirados/validar-tarja".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'numero_cartao'] = numero_cartao
      query_params[:'trilha1'] = trilha1
      query_params[:'trilha2'] = trilha2

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidaCartao')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#validar_cartao_tarja_bandeirado_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Permite validar a senha de um Cart\u00C3\u00A3o
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir validar que a senha informada pelo portador de um determinado cart\u00C3\u00A3o est\u00C3\u00A1 correta.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param senha Senha para ser validada.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def validar_senha_using_get(id, senha, opts = {})
      data, _status_code, _headers = validar_senha_using_get_with_http_info(id, senha, opts)
      return data
    end

    # Permite validar a senha de um Cart\u00C3\u00A3o
    # Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir validar que a senha informada pelo portador de um determinado cart\u00C3\u00A3o est\u00C3\u00A1 correta.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
    # @param senha Senha para ser validada.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def validar_senha_using_get_with_http_info(id, senha, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.validar_senha_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.validar_senha_using_get" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha' is set
      fail ArgumentError, "Missing the required parameter 'senha' when calling CartaoApi.validar_senha_using_get" if senha.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/validar-senha".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'senha'] = senha

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#validar_senha_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
