=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::CompraApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'CompraApi' do
  before do
    # run before each test
    @instance = Pier::CompraApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CompraApi' do
    it 'should create an instact of CompraApi' do
      @instance.should be_a(Pier::CompraApi)
    end
  end


  # unit tests for efetivar_antecipacao_using_post
  # Faz a efetiva\u00C3\u00A7\u00C3\u00A3o da antecipa\u00C3\u00A7\u00C3\u00A3o
  # Metodo responsavel pela efetiva\u00C3\u00A7\u00C3\u00A3o da antecipa\u00C3\u00A7\u00C3\u00A3o.
  # @param id_conta C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta.
  # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da compra.
  # @param quantidade_parcelas Quantidade de parcelas para serem antecipadas (quantidadeParcelas).
  # @param [Hash] opts the optional parameters
  # @return [AntecipacaoResponse]
  describe 'efetivar_antecipacao_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get5
  # Listar compras
  # Lista as compras de uma conta.
  # @param id_conta C\u00C3\u00B3digo identificador da conta da Compra.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
  # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
  # @option opts [Integer] :id_compra C\u00C3\u00B3digo identificador da Compra.
  # @option opts [BOOLEAN] :parcelada Indica se a compra \u00C3\u00A9 parcelada.
  # @option opts [BOOLEAN] :juros Indica se a compra \u00C3\u00A9 com ou sem juros.
  # @option opts [String] :tipo_transacao Indica se a compra \u00C3\u00A9 ON-US ou OFF-US
  # @return [PageCompras]
  describe 'listar_using_get5 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for simular_antecipacao_using_get
  # Simular antecipa\u00C3\u00A7\u00C3\u00A3o de parcelas
  # Simula a antecipa\u00C3\u00A7\u00C3\u00A3o de parcelas de uma compra, listando todos os planos de parcelamento dispon\u00C3\u00ADveis.
  # @param id_conta C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
  # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da compra.
  # @param [Hash] opts the optional parameters
  # @return [AntecipacaoSimuladaResponse]
  describe 'simular_antecipacao_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


end

