=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class TokenApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # Alterar token
    # Este recurso permite que seja modificado um token j\u00C3\u00A1 cadastrado
    # @param id C\u00C3\u00B3digo identificador do token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Token
    # @option opts [Integer] :base C\u00C3\u00B3digo identificador da base
    # @option opts [String] :owner Owner do token
    # @option opts [String] :status Status do token
    # @option opts [String] :criado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem criou o token
    # @option opts [String] :alterado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem alterou o token
    # @return [Token]
    def alterar_using_put5(id, opts = {})
      data, _status_code, _headers = alterar_using_put5_with_http_info(id, opts)
      return data
    end

    # Alterar token
    # Este recurso permite que seja modificado um token j\u00C3\u00A1 cadastrado
    # @param id C\u00C3\u00B3digo identificador do token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Token
    # @option opts [Integer] :base C\u00C3\u00B3digo identificador da base
    # @option opts [String] :owner Owner do token
    # @option opts [String] :status Status do token
    # @option opts [String] :criado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem criou o token
    # @option opts [String] :alterado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem alterou o token
    # @return [Array<(Token, Fixnum, Hash)>] Token data, response status code and response headers
    def alterar_using_put5_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokenApi.alterar_using_put5 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling TokenApi.alterar_using_put5" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'status'] && !['ACTIVE', 'REVOKED', 'DELETED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of ACTIVE, REVOKED, DELETED'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/tokens".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'token'] = opts[:'token'] if opts[:'token']
      query_params[:'base'] = opts[:'base'] if opts[:'base']
      query_params[:'owner'] = opts[:'owner'] if opts[:'owner']
      query_params[:'status'] = opts[:'status'] if opts[:'status']
      query_params[:'criadoPor'] = opts[:'criado_por'] if opts[:'criado_por']
      query_params[:'alteradoPor'] = opts[:'alterado_por'] if opts[:'alterado_por']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Token')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokenApi#alterar_using_put5\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # /api/tokens/callback
    # 
    # @param body_access_token bodyAccessToken
    # @param [Hash] opts the optional parameters
    # @return [BodyAccessToken]
    def callback_using_post(body_access_token, opts = {})
      data, _status_code, _headers = callback_using_post_with_http_info(body_access_token, opts)
      return data
    end

    # /api/tokens/callback
    # 
    # @param body_access_token bodyAccessToken
    # @param [Hash] opts the optional parameters
    # @return [Array<(BodyAccessToken, Fixnum, Hash)>] BodyAccessToken data, response status code and response headers
    def callback_using_post_with_http_info(body_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokenApi.callback_using_post ..."
      end
      
      
      # verify the required parameter 'body_access_token' is set
      fail ArgumentError, "Missing the required parameter 'body_access_token' when calling TokenApi.callback_using_post" if body_access_token.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/tokens/callback".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body_access_token)
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BodyAccessToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokenApi#callback_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Consultar token
    # Este recurso permite que seja consultado um token do emissor atrav\u00C3\u00A9s de um id especifico
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do token (id).
    # @param [Hash] opts the optional parameters
    # @return [Token]
    def consultar_using_get14(id, opts = {})
      data, _status_code, _headers = consultar_using_get14_with_http_info(id, opts)
      return data
    end

    # Consultar token
    # Este recurso permite que seja consultado um token do emissor atrav\u00C3\u00A9s de um id especifico
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do token (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(Token, Fixnum, Hash)>] Token data, response status code and response headers
    def consultar_using_get14_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokenApi.consultar_using_get14 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling TokenApi.consultar_using_get14" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/tokens/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Token')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokenApi#consultar_using_get14\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Listar tokens
    # Este recurso permite que sejam listados os tokens existentes
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Integer] :id C\u00C3\u00B3digo identificador do token
    # @option opts [String] :token Token
    # @option opts [Integer] :base C\u00C3\u00B3digo identificador da base
    # @option opts [String] :owner Owner do token
    # @option opts [String] :status Status do token
    # @option opts [String] :criado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem criou o token
    # @option opts [DateTime] :data_criacao Data de cria\u00C3\u00A7\u00C3\u00A3o do token
    # @option opts [String] :alterado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem alterou o token
    # @option opts [DateTime] :data_modificacao Data de modifica\u00C3\u00A7\u00C3\u00A3o do token
    # @return [PageBases]
    def listar_using_get14(opts = {})
      data, _status_code, _headers = listar_using_get14_with_http_info(opts)
      return data
    end

    # Listar tokens
    # Este recurso permite que sejam listados os tokens existentes
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Integer] :id C\u00C3\u00B3digo identificador do token
    # @option opts [String] :token Token
    # @option opts [Integer] :base C\u00C3\u00B3digo identificador da base
    # @option opts [String] :owner Owner do token
    # @option opts [String] :status Status do token
    # @option opts [String] :criado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem criou o token
    # @option opts [DateTime] :data_criacao Data de cria\u00C3\u00A7\u00C3\u00A3o do token
    # @option opts [String] :alterado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem alterou o token
    # @option opts [DateTime] :data_modificacao Data de modifica\u00C3\u00A7\u00C3\u00A3o do token
    # @return [Array<(PageBases, Fixnum, Hash)>] PageBases data, response status code and response headers
    def listar_using_get14_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokenApi.listar_using_get14 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'status'] && !['ACTIVE', 'REVOKED', 'DELETED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of ACTIVE, REVOKED, DELETED'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/tokens".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'token'] = opts[:'token'] if opts[:'token']
      query_params[:'base'] = opts[:'base'] if opts[:'base']
      query_params[:'owner'] = opts[:'owner'] if opts[:'owner']
      query_params[:'status'] = opts[:'status'] if opts[:'status']
      query_params[:'criadoPor'] = opts[:'criado_por'] if opts[:'criado_por']
      query_params[:'dataCriacao'] = opts[:'data_criacao'] if opts[:'data_criacao']
      query_params[:'alteradoPor'] = opts[:'alterado_por'] if opts[:'alterado_por']
      query_params[:'dataModificacao'] = opts[:'data_modificacao'] if opts[:'data_modificacao']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageBases')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokenApi#listar_using_get14\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Salvar token
    # Este recurso permite que seja adicionado um novo token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Token
    # @option opts [Integer] :base C\u00C3\u00B3digo identificador da base
    # @option opts [String] :owner Owner do token
    # @option opts [String] :status Status do token
    # @option opts [String] :criado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem criou o token
    # @option opts [String] :alterado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem alterou o token
    # @return [Token]
    def salvar_using_post5(opts = {})
      data, _status_code, _headers = salvar_using_post5_with_http_info(opts)
      return data
    end

    # Salvar token
    # Este recurso permite que seja adicionado um novo token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Token
    # @option opts [Integer] :base C\u00C3\u00B3digo identificador da base
    # @option opts [String] :owner Owner do token
    # @option opts [String] :status Status do token
    # @option opts [String] :criado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem criou o token
    # @option opts [String] :alterado_por Descri\u00C3\u00A7\u00C3\u00A3o de quem alterou o token
    # @return [Array<(Token, Fixnum, Hash)>] Token data, response status code and response headers
    def salvar_using_post5_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokenApi.salvar_using_post5 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'status'] && !['ACTIVE', 'REVOKED', 'DELETED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of ACTIVE, REVOKED, DELETED'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/tokens".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'token'] = opts[:'token'] if opts[:'token']
      query_params[:'base'] = opts[:'base'] if opts[:'base']
      query_params[:'owner'] = opts[:'owner'] if opts[:'owner']
      query_params[:'status'] = opts[:'status'] if opts[:'status']
      query_params[:'criadoPor'] = opts[:'criado_por'] if opts[:'criado_por']
      query_params[:'alteradoPor'] = opts[:'alterado_por'] if opts[:'alterado_por']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Token')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokenApi#salvar_using_post5\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # /api/tokens/validar
    # 
    # @param body_access_token bodyAccessToken
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def validar_using_post(body_access_token, opts = {})
      data, _status_code, _headers = validar_using_post_with_http_info(body_access_token, opts)
      return data
    end

    # /api/tokens/validar
    # 
    # @param body_access_token bodyAccessToken
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def validar_using_post_with_http_info(body_access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokenApi.validar_using_post ..."
      end
      
      
      # verify the required parameter 'body_access_token' is set
      fail ArgumentError, "Missing the required parameter 'body_access_token' when calling TokenApi.validar_using_post" if body_access_token.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/tokens/validar".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body_access_token)
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokenApi#validar_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
