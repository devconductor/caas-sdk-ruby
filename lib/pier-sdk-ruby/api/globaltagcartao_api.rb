=begin
PIER Labs

Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require "uri"

module Pier
  class GlobaltagcartaoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # {{{cartao_resource_alterar_alterar_senha}}}
    # {{{cartao_resource_alterar_alterar_senha_notes}}}
    # @param id {{{cartao_resource_alterar_alterar_senha_param_id}}}
    # @param senha {{{cartao_resource_alterar_alterar_senha_param_nova_senha}}}
    # @param [Hash] opts the optional parameters
    # @return [String]
    def alterar_alterar_senha_using_put(id, senha, opts = {})
      data, _status_code, _headers = alterar_alterar_senha_using_put_with_http_info(id, senha, opts)
      return data
    end

    # {{{cartao_resource_alterar_alterar_senha}}}
    # {{{cartao_resource_alterar_alterar_senha_notes}}}
    # @param id {{{cartao_resource_alterar_alterar_senha_param_id}}}
    # @param senha {{{cartao_resource_alterar_alterar_senha_param_nova_senha}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def alterar_alterar_senha_using_put_with_http_info(id, senha, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.alterar_alterar_senha_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.alterar_alterar_senha_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha' is set
      fail ArgumentError, "Missing the required parameter 'senha' when calling GlobaltagcartaoApi.alterar_alterar_senha_using_put" if senha.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/alterar-senha".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'senha'] = senha

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#alterar_alterar_senha_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_alterar_estagio}}}
    # {{{cartao_resource_alterar_estagio_notes}}}
    # @param id {{{cartao_resource_alterar_estagio_param_id}}}
    # @param update {{{cartao_resource_alterar_estagio_param_id_estagio_cartao}}}
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def alterar_estagio_using_post(id, update, opts = {})
      data, _status_code, _headers = alterar_estagio_using_post_with_http_info(id, update, opts)
      return data
    end

    # {{{cartao_resource_alterar_estagio}}}
    # {{{cartao_resource_alterar_estagio_notes}}}
    # @param id {{{cartao_resource_alterar_estagio_param_id}}}
    # @param update {{{cartao_resource_alterar_estagio_param_id_estagio_cartao}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def alterar_estagio_using_post_with_http_info(id, update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.alterar_estagio_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.alterar_estagio_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'update' is set
      fail ArgumentError, "Missing the required parameter 'update' when calling GlobaltagcartaoApi.alterar_estagio_using_post" if update.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/alterar-estagio".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#alterar_estagio_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_alterar_status_impressao}}}
    # {{{cartao_resource_alterar_status_impressao_notes}}}
    # @param id {{{cartao_resource_alterar_status_impressao_param_id}}}
    # @param id_status_impressao {{{cartao_resource_alterar_status_impressao_param_id_status_impressao}}}
    # @param [Hash] opts the optional parameters
    # @return [HistoricoImpressaoCartaoResponse]
    def alterar_status_impressao_using_put(id, id_status_impressao, opts = {})
      data, _status_code, _headers = alterar_status_impressao_using_put_with_http_info(id, id_status_impressao, opts)
      return data
    end

    # {{{cartao_resource_alterar_status_impressao}}}
    # {{{cartao_resource_alterar_status_impressao_notes}}}
    # @param id {{{cartao_resource_alterar_status_impressao_param_id}}}
    # @param id_status_impressao {{{cartao_resource_alterar_status_impressao_param_id_status_impressao}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(HistoricoImpressaoCartaoResponse, Fixnum, Hash)>] HistoricoImpressaoCartaoResponse data, response status code and response headers
    def alterar_status_impressao_using_put_with_http_info(id, id_status_impressao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.alterar_status_impressao_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.alterar_status_impressao_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_status_impressao' is set
      fail ArgumentError, "Missing the required parameter 'id_status_impressao' when calling GlobaltagcartaoApi.alterar_status_impressao_using_put" if id_status_impressao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/alterar-status-impressao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_status_impressao'] = id_status_impressao

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HistoricoImpressaoCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#alterar_status_impressao_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_atribuir_pessoa}}}
    # {{{cartao_resource_atribuir_pessoa_notes}}}
    # @param id {{{cartao_resource_atribuir_pessoa_param_id_cartao}}}
    # @param id_pessoa {{{cartao_resource_atribuir_pessoa_param_id_pessoa}}}
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def atribuir_pessoa_using_put(id, id_pessoa, opts = {})
      data, _status_code, _headers = atribuir_pessoa_using_put_with_http_info(id, id_pessoa, opts)
      return data
    end

    # {{{cartao_resource_atribuir_pessoa}}}
    # {{{cartao_resource_atribuir_pessoa_notes}}}
    # @param id {{{cartao_resource_atribuir_pessoa_param_id_cartao}}}
    # @param id_pessoa {{{cartao_resource_atribuir_pessoa_param_id_pessoa}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def atribuir_pessoa_using_put_with_http_info(id, id_pessoa, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.atribuir_pessoa_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.atribuir_pessoa_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_pessoa' is set
      fail ArgumentError, "Missing the required parameter 'id_pessoa' when calling GlobaltagcartaoApi.atribuir_pessoa_using_put" if id_pessoa.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/atribuir-titular".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_pessoa'] = id_pessoa

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#atribuir_pessoa_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_bloquear}}}
    # {{{cartao_resource_bloquear_notes}}}
    # @param id {{{cartao_resource_bloquear_param_id}}}
    # @param id_status {{{cartao_resource_bloquear_param_id_status}}}
    # @param observacao {{{cartao_resource_bloquear_param_observacao}}}
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def bloquear_using_post(id, id_status, observacao, opts = {})
      data, _status_code, _headers = bloquear_using_post_with_http_info(id, id_status, observacao, opts)
      return data
    end

    # {{{cartao_resource_bloquear}}}
    # {{{cartao_resource_bloquear_notes}}}
    # @param id {{{cartao_resource_bloquear_param_id}}}
    # @param id_status {{{cartao_resource_bloquear_param_id_status}}}
    # @param observacao {{{cartao_resource_bloquear_param_observacao}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def bloquear_using_post_with_http_info(id, id_status, observacao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.bloquear_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.bloquear_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_status' is set
      fail ArgumentError, "Missing the required parameter 'id_status' when calling GlobaltagcartaoApi.bloquear_using_post" if id_status.nil?
      
      
      
      
      
      
      # verify the required parameter 'observacao' is set
      fail ArgumentError, "Missing the required parameter 'observacao' when calling GlobaltagcartaoApi.bloquear_using_post" if observacao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/bloquear".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_status'] = id_status
      query_params[:'observacao'] = observacao

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#bloquear_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_cadastrar_alterar_senha}}}
    # {{{cartao_resource_cadastrar_alterar_senha_notes}}}
    # @param id {{{cartao_resource_cadastrar_alterar_senha_param_id}}}
    # @param senha {{{cartao_resource_cadastrar_alterar_senha_param_nova_senha}}}
    # @param [Hash] opts the optional parameters
    # @return [String]
    def cadastrar_alterar_senha_using_post(id, senha, opts = {})
      data, _status_code, _headers = cadastrar_alterar_senha_using_post_with_http_info(id, senha, opts)
      return data
    end

    # {{{cartao_resource_cadastrar_alterar_senha}}}
    # {{{cartao_resource_cadastrar_alterar_senha_notes}}}
    # @param id {{{cartao_resource_cadastrar_alterar_senha_param_id}}}
    # @param senha {{{cartao_resource_cadastrar_alterar_senha_param_nova_senha}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def cadastrar_alterar_senha_using_post_with_http_info(id, senha, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.cadastrar_alterar_senha_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.cadastrar_alterar_senha_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha' is set
      fail ArgumentError, "Missing the required parameter 'senha' when calling GlobaltagcartaoApi.cadastrar_alterar_senha_using_post" if senha.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/cadastrar-senha".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'senha'] = senha

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#cadastrar_alterar_senha_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_cancelar}}}
    # {{{cartao_resource_cancelar_notes}}}
    # @param id {{{cartao_resource_cancelar_param_id}}}
    # @param id_status {{{cartao_resource_cancelar_param_id_status}}}
    # @param observacao {{{cartao_resource_cancelar_param_observacao}}}
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def cancelar_using_post(id, id_status, observacao, opts = {})
      data, _status_code, _headers = cancelar_using_post_with_http_info(id, id_status, observacao, opts)
      return data
    end

    # {{{cartao_resource_cancelar}}}
    # {{{cartao_resource_cancelar_notes}}}
    # @param id {{{cartao_resource_cancelar_param_id}}}
    # @param id_status {{{cartao_resource_cancelar_param_id_status}}}
    # @param observacao {{{cartao_resource_cancelar_param_observacao}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def cancelar_using_post_with_http_info(id, id_status, observacao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.cancelar_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.cancelar_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_status' is set
      fail ArgumentError, "Missing the required parameter 'id_status' when calling GlobaltagcartaoApi.cancelar_using_post" if id_status.nil?
      
      
      
      
      
      
      # verify the required parameter 'observacao' is set
      fail ArgumentError, "Missing the required parameter 'observacao' when calling GlobaltagcartaoApi.cancelar_using_post" if observacao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/cancelar".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_status'] = id_status
      query_params[:'observacao'] = observacao

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#cancelar_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_consultar_cartao_impressao}}}
    # {{{cartao_resource_consultar_cartao_impressao_notes}}}
    # @param id {{{cartao_resource_consultar_cartao_impressao_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [DadosCartaoImpressaoResponse]
    def consultar_cartao_impressao_using_get(id, opts = {})
      data, _status_code, _headers = consultar_cartao_impressao_using_get_with_http_info(id, opts)
      return data
    end

    # {{{cartao_resource_consultar_cartao_impressao}}}
    # {{{cartao_resource_consultar_cartao_impressao_notes}}}
    # @param id {{{cartao_resource_consultar_cartao_impressao_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(DadosCartaoImpressaoResponse, Fixnum, Hash)>] DadosCartaoImpressaoResponse data, response status code and response headers
    def consultar_cartao_impressao_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.consultar_cartao_impressao_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.consultar_cartao_impressao_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/consultar-dados-impressao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DadosCartaoImpressaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#consultar_cartao_impressao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_consultar_dados_reais_cartao}}}
    # {{{cartao_resource_consultar_dados_reais_cartao_notes}}}
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [DadosCartaoResponse]
    def consultar_dados_reais_cartao_using_get(id, opts = {})
      data, _status_code, _headers = consultar_dados_reais_cartao_using_get_with_http_info(id, opts)
      return data
    end

    # {{{cartao_resource_consultar_dados_reais_cartao}}}
    # {{{cartao_resource_consultar_dados_reais_cartao_notes}}}
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(DadosCartaoResponse, Fixnum, Hash)>] DadosCartaoResponse data, response status code and response headers
    def consultar_dados_reais_cartao_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.consultar_dados_reais_cartao_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.consultar_dados_reais_cartao_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/consultar-dados-reais".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DadosCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#consultar_dados_reais_cartao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_consultar_limite_disponibilidade}}}
    # {{{cartao_resource_consultar_limite_disponibilidade_notes}}}
    # @param id {{{cartao_resource_consultar_limite_disponibilidade_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [LimiteDisponibilidadeResponse]
    def consultar_limite_disponibilidade_using_get(id, opts = {})
      data, _status_code, _headers = consultar_limite_disponibilidade_using_get_with_http_info(id, opts)
      return data
    end

    # {{{cartao_resource_consultar_limite_disponibilidade}}}
    # {{{cartao_resource_consultar_limite_disponibilidade_notes}}}
    # @param id {{{cartao_resource_consultar_limite_disponibilidade_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(LimiteDisponibilidadeResponse, Fixnum, Hash)>] LimiteDisponibilidadeResponse data, response status code and response headers
    def consultar_limite_disponibilidade_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.consultar_limite_disponibilidade_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.consultar_limite_disponibilidade_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/limites-disponibilidades".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LimiteDisponibilidadeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#consultar_limite_disponibilidade_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_consultar_lotes_cartoes_pre_pagos}}}
    # {{{cartao_resource_consultar_lotes_cartoes_pre_pagos_notes}}}
    # @param id {{{cartao_resource_consultar_lotes_cartoes_pre_pagos_param_id_lote}}}
    # @param [Hash] opts the optional parameters
    # @return [LoteCartoesPrePagosResponse]
    def consultar_lotes_cartoes_pre_pagos_using_get(id, opts = {})
      data, _status_code, _headers = consultar_lotes_cartoes_pre_pagos_using_get_with_http_info(id, opts)
      return data
    end

    # {{{cartao_resource_consultar_lotes_cartoes_pre_pagos}}}
    # {{{cartao_resource_consultar_lotes_cartoes_pre_pagos_notes}}}
    # @param id {{{cartao_resource_consultar_lotes_cartoes_pre_pagos_param_id_lote}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(LoteCartoesPrePagosResponse, Fixnum, Hash)>] LoteCartoesPrePagosResponse data, response status code and response headers
    def consultar_lotes_cartoes_pre_pagos_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.consultar_lotes_cartoes_pre_pagos_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.consultar_lotes_cartoes_pre_pagos_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/lotes-cartoes-pre-pagos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LoteCartoesPrePagosResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#consultar_lotes_cartoes_pre_pagos_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_consultar_portador}}}
    # {{{cartao_resource_consultar_portador_notes}}}
    # @param id {{{cartao_resource_consultar_portador_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [PortadorResponse]
    def consultar_portador_using_get(id, opts = {})
      data, _status_code, _headers = consultar_portador_using_get_with_http_info(id, opts)
      return data
    end

    # {{{cartao_resource_consultar_portador}}}
    # {{{cartao_resource_consultar_portador_notes}}}
    # @param id {{{cartao_resource_consultar_portador_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortadorResponse, Fixnum, Hash)>] PortadorResponse data, response status code and response headers
    def consultar_portador_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.consultar_portador_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.consultar_portador_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/portadores".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortadorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#consultar_portador_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_consultar}}}
    # {{{cartao_resource_consultar_notes}}}
    # @param id {{{cartao_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [CartaoDetalheResponse]
    def consultar_using_get12(id, opts = {})
      data, _status_code, _headers = consultar_using_get12_with_http_info(id, opts)
      return data
    end

    # {{{cartao_resource_consultar}}}
    # {{{cartao_resource_consultar_notes}}}
    # @param id {{{cartao_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoDetalheResponse, Fixnum, Hash)>] CartaoDetalheResponse data, response status code and response headers
    def consultar_using_get12_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.consultar_using_get12 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.consultar_using_get12" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#consultar_using_get12\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{conta_resource_cadastrar_cartao_multiapp}}}
    # {{{conta_resource_cadastrar_cartao_multiapp_notes}}}
    # @param cartao_multi_app_persist cartaoMultiAppPersist
    # @param [Hash] opts the optional parameters
    # @return [VinculoCartoesResponse]
    def criar_cartoes_multi_app_using_post(cartao_multi_app_persist, opts = {})
      data, _status_code, _headers = criar_cartoes_multi_app_using_post_with_http_info(cartao_multi_app_persist, opts)
      return data
    end

    # {{{conta_resource_cadastrar_cartao_multiapp}}}
    # {{{conta_resource_cadastrar_cartao_multiapp_notes}}}
    # @param cartao_multi_app_persist cartaoMultiAppPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(VinculoCartoesResponse, Fixnum, Hash)>] VinculoCartoesResponse data, response status code and response headers
    def criar_cartoes_multi_app_using_post_with_http_info(cartao_multi_app_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.criar_cartoes_multi_app_using_post ..."
      end
      
      
      # verify the required parameter 'cartao_multi_app_persist' is set
      fail ArgumentError, "Missing the required parameter 'cartao_multi_app_persist' when calling GlobaltagcartaoApi.criar_cartoes_multi_app_using_post" if cartao_multi_app_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/gerar-cartoes-multiapp".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cartao_multi_app_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VinculoCartoesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#criar_cartoes_multi_app_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_desbloquear_senha_incorreta}}}
    # {{{cartao_resource_desbloquear_senha_incorreta_notes}}}
    # @param id {{{cartao_resource_desbloquear_senha_incorreta_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def desbloquear_senha_incorreta_using_post(id, opts = {})
      data, _status_code, _headers = desbloquear_senha_incorreta_using_post_with_http_info(id, opts)
      return data
    end

    # {{{cartao_resource_desbloquear_senha_incorreta}}}
    # {{{cartao_resource_desbloquear_senha_incorreta_notes}}}
    # @param id {{{cartao_resource_desbloquear_senha_incorreta_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def desbloquear_senha_incorreta_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.desbloquear_senha_incorreta_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.desbloquear_senha_incorreta_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/desbloquear-senha-incorreta".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#desbloquear_senha_incorreta_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_desbloquear}}}
    # {{{cartao_resource_desbloquear_notes}}}
    # @param id {{{cartao_resource_desbloquear_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def desbloquear_using_post(id, opts = {})
      data, _status_code, _headers = desbloquear_using_post_with_http_info(id, opts)
      return data
    end

    # {{{cartao_resource_desbloquear}}}
    # {{{cartao_resource_desbloquear_notes}}}
    # @param id {{{cartao_resource_desbloquear_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def desbloquear_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.desbloquear_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.desbloquear_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/desbloquear".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#desbloquear_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_gerar_lotes_cartoes_pre_pagos}}}
    # {{{cartao_resource_gerar_lotes_cartoes_pre_pagos_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_origem_comercial {{{lote_cartoes_pre_pagos_persist_id_origem_comercial_value}}}
    # @option opts [Integer] :id_produto {{{lote_cartoes_pre_pagos_persist_id_produto_value}}}
    # @option opts [Integer] :id_tipo_cartao {{{lote_cartoes_pre_pagos_persist_id_tipo_cartao_value}}}
    # @option opts [Integer] :id_imagem {{{lote_cartoes_pre_pagos_persist_id_imagem_value}}}
    # @option opts [Integer] :id_endereco {{{lote_cartoes_pre_pagos_persist_id_endereco_value}}}
    # @option opts [Integer] :quantidade_cartoes {{{lote_cartoes_pre_pagos_persist_quantidade_cartoes_value}}}
    # @option opts [String] :identificador_externo {{{lote_cartoes_pre_pagos_persist_identificador_externo_value}}}
    # @return [LoteCartoesPrePagosResponse]
    def gerar_lotes_cartoes_pre_pagos_using_post(opts = {})
      data, _status_code, _headers = gerar_lotes_cartoes_pre_pagos_using_post_with_http_info(opts)
      return data
    end

    # {{{cartao_resource_gerar_lotes_cartoes_pre_pagos}}}
    # {{{cartao_resource_gerar_lotes_cartoes_pre_pagos_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_origem_comercial {{{lote_cartoes_pre_pagos_persist_id_origem_comercial_value}}}
    # @option opts [Integer] :id_produto {{{lote_cartoes_pre_pagos_persist_id_produto_value}}}
    # @option opts [Integer] :id_tipo_cartao {{{lote_cartoes_pre_pagos_persist_id_tipo_cartao_value}}}
    # @option opts [Integer] :id_imagem {{{lote_cartoes_pre_pagos_persist_id_imagem_value}}}
    # @option opts [Integer] :id_endereco {{{lote_cartoes_pre_pagos_persist_id_endereco_value}}}
    # @option opts [Integer] :quantidade_cartoes {{{lote_cartoes_pre_pagos_persist_quantidade_cartoes_value}}}
    # @option opts [String] :identificador_externo {{{lote_cartoes_pre_pagos_persist_identificador_externo_value}}}
    # @return [Array<(LoteCartoesPrePagosResponse, Fixnum, Hash)>] LoteCartoesPrePagosResponse data, response status code and response headers
    def gerar_lotes_cartoes_pre_pagos_using_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.gerar_lotes_cartoes_pre_pagos_using_post ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/lotes-cartoes-pre-pagos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idOrigemComercial'] = opts[:'id_origem_comercial'] if opts[:'id_origem_comercial']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']
      query_params[:'idTipoCartao'] = opts[:'id_tipo_cartao'] if opts[:'id_tipo_cartao']
      query_params[:'idImagem'] = opts[:'id_imagem'] if opts[:'id_imagem']
      query_params[:'idEndereco'] = opts[:'id_endereco'] if opts[:'id_endereco']
      query_params[:'quantidadeCartoes'] = opts[:'quantidade_cartoes'] if opts[:'quantidade_cartoes']
      query_params[:'identificadorExterno'] = opts[:'identificador_externo'] if opts[:'identificador_externo']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LoteCartoesPrePagosResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#gerar_lotes_cartoes_pre_pagos_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_gerar_nova_via_multiplo}}}
    # {{{cartao_resource_gerar_nova_via_multiplo_notes}}}
    # @param id {{{cartao_resource_gerar_nova_via_param_id_cartao}}}
    # @param [Hash] opts the optional parameters
    # @return [CartaoMultiAppImpressaoResponse]
    def gerar_nova_via_cartao_multi_app_using_post(id, opts = {})
      data, _status_code, _headers = gerar_nova_via_cartao_multi_app_using_post_with_http_info(id, opts)
      return data
    end

    # {{{cartao_resource_gerar_nova_via_multiplo}}}
    # {{{cartao_resource_gerar_nova_via_multiplo_notes}}}
    # @param id {{{cartao_resource_gerar_nova_via_param_id_cartao}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoMultiAppImpressaoResponse, Fixnum, Hash)>] CartaoMultiAppImpressaoResponse data, response status code and response headers
    def gerar_nova_via_cartao_multi_app_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.gerar_nova_via_cartao_multi_app_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.gerar_nova_via_cartao_multi_app_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/gerar-nova-via-multiplo".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoMultiAppImpressaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#gerar_nova_via_cartao_multi_app_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_gerar_nova_via}}}
    # {{{cartao_resource_gerar_nova_via_notes}}}
    # @param id {{{cartao_resource_gerar_nova_via_param_id_cartao}}}
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def gerar_nova_via_using_post(id, opts = {})
      data, _status_code, _headers = gerar_nova_via_using_post_with_http_info(id, opts)
      return data
    end

    # {{{cartao_resource_gerar_nova_via}}}
    # {{{cartao_resource_gerar_nova_via_notes}}}
    # @param id {{{cartao_resource_gerar_nova_via_param_id_cartao}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def gerar_nova_via_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.gerar_nova_via_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.gerar_nova_via_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/gerar-nova-via".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#gerar_nova_via_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_lancar_tarifa_segunda_via}}}
    # {{{cartao_resource_lancar_tarifa_segunda_via_notes}}}
    # @param id {{{cartao_resource_lancar_tarifa_segunda_via_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def lancar_tarifa_segunda_via_using_post(id, opts = {})
      data, _status_code, _headers = lancar_tarifa_segunda_via_using_post_with_http_info(id, opts)
      return data
    end

    # {{{cartao_resource_lancar_tarifa_segunda_via}}}
    # {{{cartao_resource_lancar_tarifa_segunda_via_notes}}}
    # @param id {{{cartao_resource_lancar_tarifa_segunda_via_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def lancar_tarifa_segunda_via_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.lancar_tarifa_segunda_via_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.lancar_tarifa_segunda_via_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/lancar-tarifa-reemissao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#lancar_tarifa_segunda_via_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_listar_lotes_cartoes_pre_pagos}}}
    # {{{cartao_resource_listar_lotes_cartoes_pre_pagos_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_origem_comercial {{{lote_cartoes_pre_pagos_request_id_origem_comercial_value}}}
    # @option opts [Integer] :id_produto {{{lote_cartoes_pre_pagos_request_id_produto_value}}}
    # @option opts [Integer] :id_tipo_cartao {{{lote_cartoes_pre_pagos_request_id_tipo_cartao_value}}}
    # @option opts [Integer] :id_imagem {{{lote_cartoes_pre_pagos_request_id_imagem_value}}}
    # @option opts [Integer] :id_endereco {{{lote_cartoes_pre_pagos_request_id_endereco_value}}}
    # @option opts [Integer] :quantidade_cartoes {{{lote_cartoes_pre_pagos_request_quantidade_cartoes_value}}}
    # @option opts [String] :data_cadastro {{{lote_cartoes_pre_pagos_request_data_cadastro_value}}}
    # @option opts [String] :usuario_cadastro {{{lote_cartoes_pre_pagos_request_usuario_cadastro_value}}}
    # @option opts [Integer] :status_processamento {{{lote_cartoes_pre_pagos_request_status_processamento_value}}}
    # @option opts [String] :identificador_externo {{{lote_cartoes_pre_pagos_request_identificador_externo_value}}}
    # @return [PageLoteCartoesPrePagosResponse]
    def listar_lotes_cartoes_pre_pagos_using_get(opts = {})
      data, _status_code, _headers = listar_lotes_cartoes_pre_pagos_using_get_with_http_info(opts)
      return data
    end

    # {{{cartao_resource_listar_lotes_cartoes_pre_pagos}}}
    # {{{cartao_resource_listar_lotes_cartoes_pre_pagos_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_origem_comercial {{{lote_cartoes_pre_pagos_request_id_origem_comercial_value}}}
    # @option opts [Integer] :id_produto {{{lote_cartoes_pre_pagos_request_id_produto_value}}}
    # @option opts [Integer] :id_tipo_cartao {{{lote_cartoes_pre_pagos_request_id_tipo_cartao_value}}}
    # @option opts [Integer] :id_imagem {{{lote_cartoes_pre_pagos_request_id_imagem_value}}}
    # @option opts [Integer] :id_endereco {{{lote_cartoes_pre_pagos_request_id_endereco_value}}}
    # @option opts [Integer] :quantidade_cartoes {{{lote_cartoes_pre_pagos_request_quantidade_cartoes_value}}}
    # @option opts [String] :data_cadastro {{{lote_cartoes_pre_pagos_request_data_cadastro_value}}}
    # @option opts [String] :usuario_cadastro {{{lote_cartoes_pre_pagos_request_usuario_cadastro_value}}}
    # @option opts [Integer] :status_processamento {{{lote_cartoes_pre_pagos_request_status_processamento_value}}}
    # @option opts [String] :identificador_externo {{{lote_cartoes_pre_pagos_request_identificador_externo_value}}}
    # @return [Array<(PageLoteCartoesPrePagosResponse, Fixnum, Hash)>] PageLoteCartoesPrePagosResponse data, response status code and response headers
    def listar_lotes_cartoes_pre_pagos_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.listar_lotes_cartoes_pre_pagos_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/lotes-cartoes-pre-pagos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idOrigemComercial'] = opts[:'id_origem_comercial'] if opts[:'id_origem_comercial']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']
      query_params[:'idTipoCartao'] = opts[:'id_tipo_cartao'] if opts[:'id_tipo_cartao']
      query_params[:'idImagem'] = opts[:'id_imagem'] if opts[:'id_imagem']
      query_params[:'idEndereco'] = opts[:'id_endereco'] if opts[:'id_endereco']
      query_params[:'quantidadeCartoes'] = opts[:'quantidade_cartoes'] if opts[:'quantidade_cartoes']
      query_params[:'dataCadastro'] = opts[:'data_cadastro'] if opts[:'data_cadastro']
      query_params[:'usuarioCadastro'] = opts[:'usuario_cadastro'] if opts[:'usuario_cadastro']
      query_params[:'statusProcessamento'] = opts[:'status_processamento'] if opts[:'status_processamento']
      query_params[:'identificadorExterno'] = opts[:'identificador_externo'] if opts[:'identificador_externo']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageLoteCartoesPrePagosResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#listar_lotes_cartoes_pre_pagos_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_listar}}}
    # {{{cartao_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_status_cartao {{{cartao_request_id_status_cartao_value}}}
    # @option opts [Integer] :id_estagio_cartao {{{cartao_request_id_estagio_cartao_value}}}
    # @option opts [Integer] :id_conta {{{cartao_request_id_conta_value}}}
    # @option opts [Integer] :id_pessoa {{{cartao_request_id_pessoa_value}}}
    # @option opts [Integer] :id_produto {{{cartao_request_id_produto_value}}}
    # @option opts [String] :tipo_portador {{{cartao_request_tipo_portador_value}}}
    # @option opts [String] :numero_cartao {{{cartao_request_numero_cartao_value}}}
    # @option opts [String] :nome_impresso {{{cartao_request_nome_impresso_value}}}
    # @option opts [String] :data_geracao {{{cartao_request_data_geracao_value}}}
    # @option opts [String] :data_status_cartao {{{cartao_request_data_status_cartao_value}}}
    # @option opts [String] :data_estagio_cartao {{{cartao_request_data_estagio_cartao_value}}}
    # @option opts [String] :data_validade {{{cartao_request_data_validade_value}}}
    # @option opts [String] :data_impressao {{{cartao_request_data_impressao_value}}}
    # @option opts [String] :arquivo_impressao {{{cartao_request_arquivo_impressao_value}}}
    # @option opts [Integer] :flag_impressao_origem_comercial {{{cartao_request_flag_impressao_origem_comercial_value}}}
    # @option opts [Integer] :flag_provisorio {{{cartao_request_flag_provisorio_value}}}
    # @option opts [String] :codigo_desbloqueio {{{cartao_request_codigo_desbloqueio_value}}}
    # @option opts [Integer] :sequencial_cartao {{{cartao_request_sequencial_cartao_value}}}
    # @option opts [Integer] :identificador_externo {{{cartao_request_identificador_externo_value}}}
    # @return [PageCartaoResponse]
    def listar_using_get12(opts = {})
      data, _status_code, _headers = listar_using_get12_with_http_info(opts)
      return data
    end

    # {{{cartao_resource_listar}}}
    # {{{cartao_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_status_cartao {{{cartao_request_id_status_cartao_value}}}
    # @option opts [Integer] :id_estagio_cartao {{{cartao_request_id_estagio_cartao_value}}}
    # @option opts [Integer] :id_conta {{{cartao_request_id_conta_value}}}
    # @option opts [Integer] :id_pessoa {{{cartao_request_id_pessoa_value}}}
    # @option opts [Integer] :id_produto {{{cartao_request_id_produto_value}}}
    # @option opts [String] :tipo_portador {{{cartao_request_tipo_portador_value}}}
    # @option opts [String] :numero_cartao {{{cartao_request_numero_cartao_value}}}
    # @option opts [String] :nome_impresso {{{cartao_request_nome_impresso_value}}}
    # @option opts [String] :data_geracao {{{cartao_request_data_geracao_value}}}
    # @option opts [String] :data_status_cartao {{{cartao_request_data_status_cartao_value}}}
    # @option opts [String] :data_estagio_cartao {{{cartao_request_data_estagio_cartao_value}}}
    # @option opts [String] :data_validade {{{cartao_request_data_validade_value}}}
    # @option opts [String] :data_impressao {{{cartao_request_data_impressao_value}}}
    # @option opts [String] :arquivo_impressao {{{cartao_request_arquivo_impressao_value}}}
    # @option opts [Integer] :flag_impressao_origem_comercial {{{cartao_request_flag_impressao_origem_comercial_value}}}
    # @option opts [Integer] :flag_provisorio {{{cartao_request_flag_provisorio_value}}}
    # @option opts [String] :codigo_desbloqueio {{{cartao_request_codigo_desbloqueio_value}}}
    # @option opts [Integer] :sequencial_cartao {{{cartao_request_sequencial_cartao_value}}}
    # @option opts [Integer] :identificador_externo {{{cartao_request_identificador_externo_value}}}
    # @return [Array<(PageCartaoResponse, Fixnum, Hash)>] PageCartaoResponse data, response status code and response headers
    def listar_using_get12_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.listar_using_get12 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idStatusCartao'] = opts[:'id_status_cartao'] if opts[:'id_status_cartao']
      query_params[:'idEstagioCartao'] = opts[:'id_estagio_cartao'] if opts[:'id_estagio_cartao']
      query_params[:'idConta'] = opts[:'id_conta'] if opts[:'id_conta']
      query_params[:'idPessoa'] = opts[:'id_pessoa'] if opts[:'id_pessoa']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']
      query_params[:'tipoPortador'] = opts[:'tipo_portador'] if opts[:'tipo_portador']
      query_params[:'numeroCartao'] = opts[:'numero_cartao'] if opts[:'numero_cartao']
      query_params[:'nomeImpresso'] = opts[:'nome_impresso'] if opts[:'nome_impresso']
      query_params[:'dataGeracao'] = opts[:'data_geracao'] if opts[:'data_geracao']
      query_params[:'dataStatusCartao'] = opts[:'data_status_cartao'] if opts[:'data_status_cartao']
      query_params[:'dataEstagioCartao'] = opts[:'data_estagio_cartao'] if opts[:'data_estagio_cartao']
      query_params[:'dataValidade'] = opts[:'data_validade'] if opts[:'data_validade']
      query_params[:'dataImpressao'] = opts[:'data_impressao'] if opts[:'data_impressao']
      query_params[:'arquivoImpressao'] = opts[:'arquivo_impressao'] if opts[:'arquivo_impressao']
      query_params[:'flagImpressaoOrigemComercial'] = opts[:'flag_impressao_origem_comercial'] if opts[:'flag_impressao_origem_comercial']
      query_params[:'flagProvisorio'] = opts[:'flag_provisorio'] if opts[:'flag_provisorio']
      query_params[:'codigoDesbloqueio'] = opts[:'codigo_desbloqueio'] if opts[:'codigo_desbloqueio']
      query_params[:'sequencialCartao'] = opts[:'sequencial_cartao'] if opts[:'sequencial_cartao']
      query_params[:'identificadorExterno'] = opts[:'identificador_externo'] if opts[:'identificador_externo']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#listar_using_get12\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_reativar}}}
    # {{{cartao_resource_reativar_notes}}}
    # @param id {{{cartao_resource_reativar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def reativar_using_post(id, opts = {})
      data, _status_code, _headers = reativar_using_post_with_http_info(id, opts)
      return data
    end

    # {{{cartao_resource_reativar}}}
    # {{{cartao_resource_reativar_notes}}}
    # @param id {{{cartao_resource_reativar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def reativar_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.reativar_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.reativar_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/reativar".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#reativar_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_validar_c_v_v}}}
    # {{{cartao_resource_validar_c_v_v_notes}}}
    # @param id {{{cartao_resource_validar_c_v_v_param_id}}}
    # @param valida_cvv validaCVV
    # @param [Hash] opts the optional parameters
    # @return [String]
    def validar_cvv_using_post(id, valida_cvv, opts = {})
      data, _status_code, _headers = validar_cvv_using_post_with_http_info(id, valida_cvv, opts)
      return data
    end

    # {{{cartao_resource_validar_c_v_v}}}
    # {{{cartao_resource_validar_c_v_v_notes}}}
    # @param id {{{cartao_resource_validar_c_v_v_param_id}}}
    # @param valida_cvv validaCVV
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def validar_cvv_using_post_with_http_info(id, valida_cvv, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.validar_cvv_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.validar_cvv_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'valida_cvv' is set
      fail ArgumentError, "Missing the required parameter 'valida_cvv' when calling GlobaltagcartaoApi.validar_cvv_using_post" if valida_cvv.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/validar-cvv".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(valida_cvv)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#validar_cvv_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_validar_dados_impressos_bandeirado}}}
    # {{{cartao_resource_validar_dados_impressos_bandeirado_notes}}}
    # @param numero_cartao {{{cartao_resource_validar_dados_impressos_bandeirado_param_numero_cartao}}}
    # @param nome_portador {{{cartao_resource_validar_dados_impressos_bandeirado_param_nome_portador}}}
    # @param data_validade {{{cartao_resource_validar_dados_impressos_bandeirado_param_data_validade}}}
    # @param codigo_seguranca {{{cartao_resource_validar_dados_impressos_bandeirado_param_codigo_seguranca}}}
    # @param [Hash] opts the optional parameters
    # @return [ValidaCartaoResponse]
    def validar_dados_impressos_bandeirado_using_get(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts = {})
      data, _status_code, _headers = validar_dados_impressos_bandeirado_using_get_with_http_info(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts)
      return data
    end

    # {{{cartao_resource_validar_dados_impressos_bandeirado}}}
    # {{{cartao_resource_validar_dados_impressos_bandeirado_notes}}}
    # @param numero_cartao {{{cartao_resource_validar_dados_impressos_bandeirado_param_numero_cartao}}}
    # @param nome_portador {{{cartao_resource_validar_dados_impressos_bandeirado_param_nome_portador}}}
    # @param data_validade {{{cartao_resource_validar_dados_impressos_bandeirado_param_data_validade}}}
    # @param codigo_seguranca {{{cartao_resource_validar_dados_impressos_bandeirado_param_codigo_seguranca}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidaCartaoResponse, Fixnum, Hash)>] ValidaCartaoResponse data, response status code and response headers
    def validar_dados_impressos_bandeirado_using_get_with_http_info(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.validar_dados_impressos_bandeirado_using_get ..."
      end
      
      
      # verify the required parameter 'numero_cartao' is set
      fail ArgumentError, "Missing the required parameter 'numero_cartao' when calling GlobaltagcartaoApi.validar_dados_impressos_bandeirado_using_get" if numero_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'nome_portador' is set
      fail ArgumentError, "Missing the required parameter 'nome_portador' when calling GlobaltagcartaoApi.validar_dados_impressos_bandeirado_using_get" if nome_portador.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_validade' is set
      fail ArgumentError, "Missing the required parameter 'data_validade' when calling GlobaltagcartaoApi.validar_dados_impressos_bandeirado_using_get" if data_validade.nil?
      
      
      
      
      
      
      # verify the required parameter 'codigo_seguranca' is set
      fail ArgumentError, "Missing the required parameter 'codigo_seguranca' when calling GlobaltagcartaoApi.validar_dados_impressos_bandeirado_using_get" if codigo_seguranca.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/validar-dados-impressos-bandeirados".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'numero_cartao'] = numero_cartao
      query_params[:'nome_portador'] = nome_portador
      query_params[:'data_validade'] = data_validade
      query_params[:'codigo_seguranca'] = codigo_seguranca

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidaCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#validar_dados_impressos_bandeirado_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_validar_dados_impressos_nao_bandeirado}}}
    # {{{cartao_resource_validar_dados_impressos_nao_bandeirado_notes}}}
    # @param numero_cartao {{{cartao_resource_validar_dados_impressos_nao_bandeirado_param_numero_cartao}}}
    # @param nome_portador {{{cartao_resource_validar_dados_impressos_nao_bandeirado_param_nome_portador}}}
    # @param data_validade {{{cartao_resource_validar_dados_impressos_nao_bandeirado_param_data_validade}}}
    # @param codigo_seguranca {{{cartao_resource_validar_dados_impressos_nao_bandeirado_param_codigo_seguranca}}}
    # @param [Hash] opts the optional parameters
    # @return [ValidaCartaoResponse]
    def validar_dados_impressos_nao_bandeirado_using_get(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts = {})
      data, _status_code, _headers = validar_dados_impressos_nao_bandeirado_using_get_with_http_info(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts)
      return data
    end

    # {{{cartao_resource_validar_dados_impressos_nao_bandeirado}}}
    # {{{cartao_resource_validar_dados_impressos_nao_bandeirado_notes}}}
    # @param numero_cartao {{{cartao_resource_validar_dados_impressos_nao_bandeirado_param_numero_cartao}}}
    # @param nome_portador {{{cartao_resource_validar_dados_impressos_nao_bandeirado_param_nome_portador}}}
    # @param data_validade {{{cartao_resource_validar_dados_impressos_nao_bandeirado_param_data_validade}}}
    # @param codigo_seguranca {{{cartao_resource_validar_dados_impressos_nao_bandeirado_param_codigo_seguranca}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidaCartaoResponse, Fixnum, Hash)>] ValidaCartaoResponse data, response status code and response headers
    def validar_dados_impressos_nao_bandeirado_using_get_with_http_info(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.validar_dados_impressos_nao_bandeirado_using_get ..."
      end
      
      
      # verify the required parameter 'numero_cartao' is set
      fail ArgumentError, "Missing the required parameter 'numero_cartao' when calling GlobaltagcartaoApi.validar_dados_impressos_nao_bandeirado_using_get" if numero_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'nome_portador' is set
      fail ArgumentError, "Missing the required parameter 'nome_portador' when calling GlobaltagcartaoApi.validar_dados_impressos_nao_bandeirado_using_get" if nome_portador.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_validade' is set
      fail ArgumentError, "Missing the required parameter 'data_validade' when calling GlobaltagcartaoApi.validar_dados_impressos_nao_bandeirado_using_get" if data_validade.nil?
      
      
      
      
      
      
      # verify the required parameter 'codigo_seguranca' is set
      fail ArgumentError, "Missing the required parameter 'codigo_seguranca' when calling GlobaltagcartaoApi.validar_dados_impressos_nao_bandeirado_using_get" if codigo_seguranca.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/validar-dados-impressos-nao-bandeirados".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'numero_cartao'] = numero_cartao
      query_params[:'nome_portador'] = nome_portador
      query_params[:'data_validade'] = data_validade
      query_params[:'codigo_seguranca'] = codigo_seguranca

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidaCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#validar_dados_impressos_nao_bandeirado_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_validar_de55_cartao_mastercard}}}
    # {{{cartao_resource_validar_de55_cartao_mastercard_notes}}}
    # @param numero_cartao {{{cartao_resource_validar_de55_cartao_mastercard_param_numero_cartao}}}
    # @param criptograma {{{cartao_resource_validar_de55_cartao_mastercard_param_criptograma}}}
    # @param [Hash] opts the optional parameters
    # @return [ValidaCartaoResponse]
    def validar_de55_cartao_mastercard_using_get(numero_cartao, criptograma, opts = {})
      data, _status_code, _headers = validar_de55_cartao_mastercard_using_get_with_http_info(numero_cartao, criptograma, opts)
      return data
    end

    # {{{cartao_resource_validar_de55_cartao_mastercard}}}
    # {{{cartao_resource_validar_de55_cartao_mastercard_notes}}}
    # @param numero_cartao {{{cartao_resource_validar_de55_cartao_mastercard_param_numero_cartao}}}
    # @param criptograma {{{cartao_resource_validar_de55_cartao_mastercard_param_criptograma}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidaCartaoResponse, Fixnum, Hash)>] ValidaCartaoResponse data, response status code and response headers
    def validar_de55_cartao_mastercard_using_get_with_http_info(numero_cartao, criptograma, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.validar_de55_cartao_mastercard_using_get ..."
      end
      
      
      # verify the required parameter 'numero_cartao' is set
      fail ArgumentError, "Missing the required parameter 'numero_cartao' when calling GlobaltagcartaoApi.validar_de55_cartao_mastercard_using_get" if numero_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'criptograma' is set
      fail ArgumentError, "Missing the required parameter 'criptograma' when calling GlobaltagcartaoApi.validar_de55_cartao_mastercard_using_get" if criptograma.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/validar-de55-mastercard".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'numero_cartao'] = numero_cartao
      query_params[:'criptograma'] = criptograma

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidaCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#validar_de55_cartao_mastercard_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_validar_senha}}}
    # {{{cartao_resource_validar_senha_notes}}}
    # @param id {{{cartao_resource_validar_senha_param_id}}}
    # @param senha {{{cartao_resource_validar_senha_param_senha}}}
    # @param [Hash] opts the optional parameters
    # @return [ValidaSenhaCartaoResponse]
    def validar_senha_using_get(id, senha, opts = {})
      data, _status_code, _headers = validar_senha_using_get_with_http_info(id, senha, opts)
      return data
    end

    # {{{cartao_resource_validar_senha}}}
    # {{{cartao_resource_validar_senha_notes}}}
    # @param id {{{cartao_resource_validar_senha_param_id}}}
    # @param senha {{{cartao_resource_validar_senha_param_senha}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidaSenhaCartaoResponse, Fixnum, Hash)>] ValidaSenhaCartaoResponse data, response status code and response headers
    def validar_senha_using_get_with_http_info(id, senha, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.validar_senha_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcartaoApi.validar_senha_using_get" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha' is set
      fail ArgumentError, "Missing the required parameter 'senha' when calling GlobaltagcartaoApi.validar_senha_using_get" if senha.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/validar-senha".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'senha'] = senha

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidaSenhaCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#validar_senha_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{cartao_resource_validar_tarja}}}
    # {{{cartao_resource_validar_tarja_notes}}}
    # @param numero_cartao {{{cartao_resource_validar_tarja_param_numero_cartao}}}
    # @param trilha1 {{{cartao_resource_validar_tarja_param_trilha1}}}
    # @param trilha2 {{{cartao_resource_validar_tarja_param_trilha2}}}
    # @param [Hash] opts the optional parameters
    # @return [ValidaCartaoResponse]
    def validar_tarja_using_get(numero_cartao, trilha1, trilha2, opts = {})
      data, _status_code, _headers = validar_tarja_using_get_with_http_info(numero_cartao, trilha1, trilha2, opts)
      return data
    end

    # {{{cartao_resource_validar_tarja}}}
    # {{{cartao_resource_validar_tarja_notes}}}
    # @param numero_cartao {{{cartao_resource_validar_tarja_param_numero_cartao}}}
    # @param trilha1 {{{cartao_resource_validar_tarja_param_trilha1}}}
    # @param trilha2 {{{cartao_resource_validar_tarja_param_trilha2}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidaCartaoResponse, Fixnum, Hash)>] ValidaCartaoResponse data, response status code and response headers
    def validar_tarja_using_get_with_http_info(numero_cartao, trilha1, trilha2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcartaoApi.validar_tarja_using_get ..."
      end
      
      
      # verify the required parameter 'numero_cartao' is set
      fail ArgumentError, "Missing the required parameter 'numero_cartao' when calling GlobaltagcartaoApi.validar_tarja_using_get" if numero_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'trilha1' is set
      fail ArgumentError, "Missing the required parameter 'trilha1' when calling GlobaltagcartaoApi.validar_tarja_using_get" if trilha1.nil?
      
      
      
      
      
      
      # verify the required parameter 'trilha2' is set
      fail ArgumentError, "Missing the required parameter 'trilha2' when calling GlobaltagcartaoApi.validar_tarja_using_get" if trilha2.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/validar-tarja".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'numero_cartao'] = numero_cartao
      query_params[:'trilha1'] = trilha1
      query_params[:'trilha2'] = trilha2

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidaCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcartaoApi#validar_tarja_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
