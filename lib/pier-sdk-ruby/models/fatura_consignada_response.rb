=begin
PIER Labs

Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require 'date'

module Pier
  # {{{fatura_consignada_response_description}}}
  class FaturaConsignadaResponse
    # {{{fatura_consignada_response_id_value}}}
    attr_accessor :id

    # {{{fatura_consignada_response_id_conta_value}}}
    attr_accessor :id_conta

    # {{{fatura_consignada_response_flag_emite_fatura_value}}}
    attr_accessor :flag_emite_fatura

    # {{{fatura_consignada_response_data_vencimento_fatura_value}}}
    attr_accessor :data_vencimento_fatura

    # {{{fatura_consignada_response_valor_total_fatura_value}}}
    attr_accessor :valor_total_fatura

    # {{{fatura_consignada_response_valor_fatura_anterior_value}}}
    attr_accessor :valor_fatura_anterior

    # {{{fatura_consignada_response_valor_pagamento_minimo_value}}}
    attr_accessor :valor_pagamento_minimo

    # {{{fatura_consignada_response_valor_pagamento_consignado_value}}}
    attr_accessor :valor_pagamento_consignado

    # {{{fatura_consignada_response_valor_pagamento_complementar_value}}}
    attr_accessor :valor_pagamento_complementar

    # {{{fatura_consignada_response_total_compras_nacionais_value}}}
    attr_accessor :total_compras_nacionais

    # {{{fatura_consignada_response_total_compras_internacionas_value}}}
    attr_accessor :total_compras_internacionas

    # {{{fatura_consignada_response_total_saques_nacionais_value}}}
    attr_accessor :total_saques_nacionais

    # {{{fatura_consignada_response_total_saques_internacionais_value}}}
    attr_accessor :total_saques_internacionais

    # {{{fatura_consignada_response_total_debitos_nacionais_value}}}
    attr_accessor :total_debitos_nacionais

    # {{{fatura_consignada_response_total_debitos_recorrentes_value}}}
    attr_accessor :total_debitos_recorrentes

    # {{{fatura_consignada_response_total_debitos_internacionais_value}}}
    attr_accessor :total_debitos_internacionais

    # {{{fatura_consignada_response_total_debitos_diversos_nacionais_value}}}
    attr_accessor :total_debitos_diversos_nacionais

    # {{{fatura_consignada_response_total_debitos_opcionais_value}}}
    attr_accessor :total_debitos_opcionais

    # {{{fatura_consignada_response_total_pagamentos_value}}}
    attr_accessor :total_pagamentos

    # {{{fatura_consignada_response_total_creditos_nacionais_value}}}
    attr_accessor :total_creditos_nacionais

    # {{{fatura_consignada_response_total_ajustes_value}}}
    attr_accessor :total_ajustes

    # {{{fatura_consignada_response_total_tarifas_value}}}
    attr_accessor :total_tarifas

    # {{{fatura_consignada_response_total_multa_value}}}
    attr_accessor :total_multa

    # {{{fatura_consignada_response_total_juros_value}}}
    attr_accessor :total_juros

    # {{{fatura_consignada_response_taxa_rotativo_value}}}
    attr_accessor :taxa_rotativo

    # {{{fatura_consignada_response_taxa_saque_value}}}
    attr_accessor :taxa_saque

    # {{{fatura_consignada_response_taxa_maxima_proximo_periodo_value}}}
    attr_accessor :taxa_maxima_proximo_periodo

    # {{{fatura_consignada_response_total_servicos_value}}}
    attr_accessor :total_servicos

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'id',
        
        :'id_conta' => :'idConta',
        
        :'flag_emite_fatura' => :'flagEmiteFatura',
        
        :'data_vencimento_fatura' => :'dataVencimentoFatura',
        
        :'valor_total_fatura' => :'valorTotalFatura',
        
        :'valor_fatura_anterior' => :'valorFaturaAnterior',
        
        :'valor_pagamento_minimo' => :'valorPagamentoMinimo',
        
        :'valor_pagamento_consignado' => :'valorPagamentoConsignado',
        
        :'valor_pagamento_complementar' => :'valorPagamentoComplementar',
        
        :'total_compras_nacionais' => :'totalComprasNacionais',
        
        :'total_compras_internacionas' => :'totalComprasInternacionas',
        
        :'total_saques_nacionais' => :'totalSaquesNacionais',
        
        :'total_saques_internacionais' => :'totalSaquesInternacionais',
        
        :'total_debitos_nacionais' => :'totalDebitosNacionais',
        
        :'total_debitos_recorrentes' => :'totalDebitosRecorrentes',
        
        :'total_debitos_internacionais' => :'totalDebitosInternacionais',
        
        :'total_debitos_diversos_nacionais' => :'totalDebitosDiversosNacionais',
        
        :'total_debitos_opcionais' => :'totalDebitosOpcionais',
        
        :'total_pagamentos' => :'totalPagamentos',
        
        :'total_creditos_nacionais' => :'totalCreditosNacionais',
        
        :'total_ajustes' => :'totalAjustes',
        
        :'total_tarifas' => :'totalTarifas',
        
        :'total_multa' => :'totalMulta',
        
        :'total_juros' => :'totalJuros',
        
        :'taxa_rotativo' => :'taxaRotativo',
        
        :'taxa_saque' => :'taxaSaque',
        
        :'taxa_maxima_proximo_periodo' => :'taxaMaximaProximoPeriodo',
        
        :'total_servicos' => :'totalServicos'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'id' => :'Integer',
        
        :'id_conta' => :'Integer',
        
        :'flag_emite_fatura' => :'Integer',
        
        :'data_vencimento_fatura' => :'String',
        
        :'valor_total_fatura' => :'Float',
        
        :'valor_fatura_anterior' => :'Float',
        
        :'valor_pagamento_minimo' => :'Float',
        
        :'valor_pagamento_consignado' => :'Float',
        
        :'valor_pagamento_complementar' => :'Float',
        
        :'total_compras_nacionais' => :'Float',
        
        :'total_compras_internacionas' => :'Float',
        
        :'total_saques_nacionais' => :'Float',
        
        :'total_saques_internacionais' => :'Float',
        
        :'total_debitos_nacionais' => :'Float',
        
        :'total_debitos_recorrentes' => :'Float',
        
        :'total_debitos_internacionais' => :'Float',
        
        :'total_debitos_diversos_nacionais' => :'Float',
        
        :'total_debitos_opcionais' => :'Float',
        
        :'total_pagamentos' => :'Float',
        
        :'total_creditos_nacionais' => :'Float',
        
        :'total_ajustes' => :'Float',
        
        :'total_tarifas' => :'Float',
        
        :'total_multa' => :'Float',
        
        :'total_juros' => :'Float',
        
        :'taxa_rotativo' => :'Float',
        
        :'taxa_saque' => :'Float',
        
        :'taxa_maxima_proximo_periodo' => :'Float',
        
        :'total_servicos' => :'Float'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'id']
        
        
        self.id = attributes[:'id']
        
      
      end

      
      if attributes[:'idConta']
        
        
        self.id_conta = attributes[:'idConta']
        
      
      end

      
      if attributes[:'flagEmiteFatura']
        
        
        self.flag_emite_fatura = attributes[:'flagEmiteFatura']
        
      
      end

      
      if attributes[:'dataVencimentoFatura']
        
        
        self.data_vencimento_fatura = attributes[:'dataVencimentoFatura']
        
      
      end

      
      if attributes[:'valorTotalFatura']
        
        
        self.valor_total_fatura = attributes[:'valorTotalFatura']
        
      
      end

      
      if attributes[:'valorFaturaAnterior']
        
        
        self.valor_fatura_anterior = attributes[:'valorFaturaAnterior']
        
      
      end

      
      if attributes[:'valorPagamentoMinimo']
        
        
        self.valor_pagamento_minimo = attributes[:'valorPagamentoMinimo']
        
      
      end

      
      if attributes[:'valorPagamentoConsignado']
        
        
        self.valor_pagamento_consignado = attributes[:'valorPagamentoConsignado']
        
      
      end

      
      if attributes[:'valorPagamentoComplementar']
        
        
        self.valor_pagamento_complementar = attributes[:'valorPagamentoComplementar']
        
      
      end

      
      if attributes[:'totalComprasNacionais']
        
        
        self.total_compras_nacionais = attributes[:'totalComprasNacionais']
        
      
      end

      
      if attributes[:'totalComprasInternacionas']
        
        
        self.total_compras_internacionas = attributes[:'totalComprasInternacionas']
        
      
      end

      
      if attributes[:'totalSaquesNacionais']
        
        
        self.total_saques_nacionais = attributes[:'totalSaquesNacionais']
        
      
      end

      
      if attributes[:'totalSaquesInternacionais']
        
        
        self.total_saques_internacionais = attributes[:'totalSaquesInternacionais']
        
      
      end

      
      if attributes[:'totalDebitosNacionais']
        
        
        self.total_debitos_nacionais = attributes[:'totalDebitosNacionais']
        
      
      end

      
      if attributes[:'totalDebitosRecorrentes']
        
        
        self.total_debitos_recorrentes = attributes[:'totalDebitosRecorrentes']
        
      
      end

      
      if attributes[:'totalDebitosInternacionais']
        
        
        self.total_debitos_internacionais = attributes[:'totalDebitosInternacionais']
        
      
      end

      
      if attributes[:'totalDebitosDiversosNacionais']
        
        
        self.total_debitos_diversos_nacionais = attributes[:'totalDebitosDiversosNacionais']
        
      
      end

      
      if attributes[:'totalDebitosOpcionais']
        
        
        self.total_debitos_opcionais = attributes[:'totalDebitosOpcionais']
        
      
      end

      
      if attributes[:'totalPagamentos']
        
        
        self.total_pagamentos = attributes[:'totalPagamentos']
        
      
      end

      
      if attributes[:'totalCreditosNacionais']
        
        
        self.total_creditos_nacionais = attributes[:'totalCreditosNacionais']
        
      
      end

      
      if attributes[:'totalAjustes']
        
        
        self.total_ajustes = attributes[:'totalAjustes']
        
      
      end

      
      if attributes[:'totalTarifas']
        
        
        self.total_tarifas = attributes[:'totalTarifas']
        
      
      end

      
      if attributes[:'totalMulta']
        
        
        self.total_multa = attributes[:'totalMulta']
        
      
      end

      
      if attributes[:'totalJuros']
        
        
        self.total_juros = attributes[:'totalJuros']
        
      
      end

      
      if attributes[:'taxaRotativo']
        
        
        self.taxa_rotativo = attributes[:'taxaRotativo']
        
      
      end

      
      if attributes[:'taxaSaque']
        
        
        self.taxa_saque = attributes[:'taxaSaque']
        
      
      end

      
      if attributes[:'taxaMaximaProximoPeriodo']
        
        
        self.taxa_maxima_proximo_periodo = attributes[:'taxaMaximaProximoPeriodo']
        
      
      end

      
      if attributes[:'totalServicos']
        
        
        self.total_servicos = attributes[:'totalServicos']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if @total_servicos.nil?
        return false
      end

      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          id_conta == o.id_conta &&
          flag_emite_fatura == o.flag_emite_fatura &&
          data_vencimento_fatura == o.data_vencimento_fatura &&
          valor_total_fatura == o.valor_total_fatura &&
          valor_fatura_anterior == o.valor_fatura_anterior &&
          valor_pagamento_minimo == o.valor_pagamento_minimo &&
          valor_pagamento_consignado == o.valor_pagamento_consignado &&
          valor_pagamento_complementar == o.valor_pagamento_complementar &&
          total_compras_nacionais == o.total_compras_nacionais &&
          total_compras_internacionas == o.total_compras_internacionas &&
          total_saques_nacionais == o.total_saques_nacionais &&
          total_saques_internacionais == o.total_saques_internacionais &&
          total_debitos_nacionais == o.total_debitos_nacionais &&
          total_debitos_recorrentes == o.total_debitos_recorrentes &&
          total_debitos_internacionais == o.total_debitos_internacionais &&
          total_debitos_diversos_nacionais == o.total_debitos_diversos_nacionais &&
          total_debitos_opcionais == o.total_debitos_opcionais &&
          total_pagamentos == o.total_pagamentos &&
          total_creditos_nacionais == o.total_creditos_nacionais &&
          total_ajustes == o.total_ajustes &&
          total_tarifas == o.total_tarifas &&
          total_multa == o.total_multa &&
          total_juros == o.total_juros &&
          taxa_rotativo == o.taxa_rotativo &&
          taxa_saque == o.taxa_saque &&
          taxa_maxima_proximo_periodo == o.taxa_maxima_proximo_periodo &&
          total_servicos == o.total_servicos
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, id_conta, flag_emite_fatura, data_vencimento_fatura, valor_total_fatura, valor_fatura_anterior, valor_pagamento_minimo, valor_pagamento_consignado, valor_pagamento_complementar, total_compras_nacionais, total_compras_internacionas, total_saques_nacionais, total_saques_internacionais, total_debitos_nacionais, total_debitos_recorrentes, total_debitos_internacionais, total_debitos_diversos_nacionais, total_debitos_opcionais, total_pagamentos, total_creditos_nacionais, total_ajustes, total_tarifas, total_multa, total_juros, taxa_rotativo, taxa_saque, taxa_maxima_proximo_periodo, total_servicos].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
