=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'date'

module Pier
  # {{{risco_fraude_detalhado_response_description}}}
  class RiscoFraudeDetalhadoResponse
    # {{{risco_fraude_detalhado_response_id_value}}}
    attr_accessor :id

    # {{{risco_fraude_detalhado_response_id_tipo_resolucao_value}}}
    attr_accessor :id_tipo_resolucao

    # {{{risco_fraude_detalhado_response_descricao_tipo_resolucao_value}}}
    attr_accessor :descricao_tipo_resolucao

    # {{{risco_fraude_detalhado_response_flag_alto_risco_value}}}
    attr_accessor :flag_alto_risco

    # {{{risco_fraude_detalhado_response_id_conta_value}}}
    attr_accessor :id_conta

    # {{{risco_fraude_detalhado_response_id_cartao_value}}}
    attr_accessor :id_cartao

    # {{{risco_fraude_detalhado_response_id_produto_value}}}
    attr_accessor :id_produto

    # {{{risco_fraude_detalhado_response_id_transacao_value}}}
    attr_accessor :id_transacao

    # {{{risco_fraude_detalhado_response_data_transacao_value}}}
    attr_accessor :data_transacao

    # {{{risco_fraude_detalhado_response_valor_transacao_value}}}
    attr_accessor :valor_transacao

    # {{{risco_fraude_detalhado_response_codigo_moeda_origem_value}}}
    attr_accessor :codigo_moeda_origem

    # {{{risco_fraude_detalhado_response_valor_origem_value}}}
    attr_accessor :valor_origem

    # {{{risco_fraude_detalhado_response_codigo_moeda_destino_value}}}
    attr_accessor :codigo_moeda_destino

    # {{{risco_fraude_detalhado_response_valor_destino_value}}}
    attr_accessor :valor_destino

    # {{{risco_fraude_detalhado_response_nome_estabelecimento_value}}}
    attr_accessor :nome_estabelecimento

    # {{{risco_fraude_detalhado_response_id_pais_value}}}
    attr_accessor :id_pais

    # {{{risco_fraude_detalhado_response_codigo_resposta_autorizador_value}}}
    attr_accessor :codigo_resposta_autorizador

    # {{{risco_fraude_detalhado_response_descricao_resposta_autorizador_value}}}
    attr_accessor :descricao_resposta_autorizador

    # {{{risco_fraude_detalhado_response_codigo_resposta_fraude_value}}}
    attr_accessor :codigo_resposta_fraude

    # {{{risco_fraude_detalhado_response_descricao_resposta_fraude_value}}}
    attr_accessor :descricao_resposta_fraude

    # {{{risco_fraude_detalhado_response_origem_transacao_value}}}
    attr_accessor :origem_transacao

    # {{{risco_fraude_detalhado_response_codigo_modo_entrada_terminal_value}}}
    attr_accessor :codigo_modo_entrada_terminal

    # {{{risco_fraude_detalhado_response_descricao_modo_entrada_terminal_value}}}
    attr_accessor :descricao_modo_entrada_terminal

    # {{{risco_fraude_detalhado_response_cpf_value}}}
    attr_accessor :cpf

    # {{{risco_fraude_detalhado_response_cnpj_value}}}
    attr_accessor :cnpj

    # {{{risco_fraude_detalhado_response_email_value}}}
    attr_accessor :email

    # {{{risco_fraude_detalhado_response_telefones_value}}}
    attr_accessor :telefones


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'id',
        
        :'id_tipo_resolucao' => :'idTipoResolucao',
        
        :'descricao_tipo_resolucao' => :'descricaoTipoResolucao',
        
        :'flag_alto_risco' => :'flagAltoRisco',
        
        :'id_conta' => :'idConta',
        
        :'id_cartao' => :'idCartao',
        
        :'id_produto' => :'idProduto',
        
        :'id_transacao' => :'idTransacao',
        
        :'data_transacao' => :'dataTransacao',
        
        :'valor_transacao' => :'valorTransacao',
        
        :'codigo_moeda_origem' => :'codigoMoedaOrigem',
        
        :'valor_origem' => :'valorOrigem',
        
        :'codigo_moeda_destino' => :'codigoMoedaDestino',
        
        :'valor_destino' => :'valorDestino',
        
        :'nome_estabelecimento' => :'nomeEstabelecimento',
        
        :'id_pais' => :'idPais',
        
        :'codigo_resposta_autorizador' => :'codigoRespostaAutorizador',
        
        :'descricao_resposta_autorizador' => :'descricaoRespostaAutorizador',
        
        :'codigo_resposta_fraude' => :'codigoRespostaFraude',
        
        :'descricao_resposta_fraude' => :'descricaoRespostaFraude',
        
        :'origem_transacao' => :'origemTransacao',
        
        :'codigo_modo_entrada_terminal' => :'codigoModoEntradaTerminal',
        
        :'descricao_modo_entrada_terminal' => :'descricaoModoEntradaTerminal',
        
        :'cpf' => :'cpf',
        
        :'cnpj' => :'cnpj',
        
        :'email' => :'email',
        
        :'telefones' => :'telefones'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'id' => :'Integer',
        
        :'id_tipo_resolucao' => :'Integer',
        
        :'descricao_tipo_resolucao' => :'String',
        
        :'flag_alto_risco' => :'BOOLEAN',
        
        :'id_conta' => :'Integer',
        
        :'id_cartao' => :'Integer',
        
        :'id_produto' => :'Integer',
        
        :'id_transacao' => :'Integer',
        
        :'data_transacao' => :'String',
        
        :'valor_transacao' => :'Float',
        
        :'codigo_moeda_origem' => :'String',
        
        :'valor_origem' => :'Float',
        
        :'codigo_moeda_destino' => :'String',
        
        :'valor_destino' => :'Float',
        
        :'nome_estabelecimento' => :'String',
        
        :'id_pais' => :'String',
        
        :'codigo_resposta_autorizador' => :'String',
        
        :'descricao_resposta_autorizador' => :'String',
        
        :'codigo_resposta_fraude' => :'String',
        
        :'descricao_resposta_fraude' => :'String',
        
        :'origem_transacao' => :'String',
        
        :'codigo_modo_entrada_terminal' => :'String',
        
        :'descricao_modo_entrada_terminal' => :'String',
        
        :'cpf' => :'String',
        
        :'cnpj' => :'String',
        
        :'email' => :'String',
        
        :'telefones' => :'Array<TelefoneResponse>'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'id']
        
        
        self.id = attributes[:'id']
        
      
      end

      
      if attributes[:'idTipoResolucao']
        
        
        self.id_tipo_resolucao = attributes[:'idTipoResolucao']
        
      
      end

      
      if attributes[:'descricaoTipoResolucao']
        
        
        self.descricao_tipo_resolucao = attributes[:'descricaoTipoResolucao']
        
      
      end

      
      if attributes[:'flagAltoRisco']
        
        
        self.flag_alto_risco = attributes[:'flagAltoRisco']
        
      
      end

      
      if attributes[:'idConta']
        
        
        self.id_conta = attributes[:'idConta']
        
      
      end

      
      if attributes[:'idCartao']
        
        
        self.id_cartao = attributes[:'idCartao']
        
      
      end

      
      if attributes[:'idProduto']
        
        
        self.id_produto = attributes[:'idProduto']
        
      
      end

      
      if attributes[:'idTransacao']
        
        
        self.id_transacao = attributes[:'idTransacao']
        
      
      end

      
      if attributes[:'dataTransacao']
        
        
        self.data_transacao = attributes[:'dataTransacao']
        
      
      end

      
      if attributes[:'valorTransacao']
        
        
        self.valor_transacao = attributes[:'valorTransacao']
        
      
      end

      
      if attributes[:'codigoMoedaOrigem']
        
        
        self.codigo_moeda_origem = attributes[:'codigoMoedaOrigem']
        
      
      end

      
      if attributes[:'valorOrigem']
        
        
        self.valor_origem = attributes[:'valorOrigem']
        
      
      end

      
      if attributes[:'codigoMoedaDestino']
        
        
        self.codigo_moeda_destino = attributes[:'codigoMoedaDestino']
        
      
      end

      
      if attributes[:'valorDestino']
        
        
        self.valor_destino = attributes[:'valorDestino']
        
      
      end

      
      if attributes[:'nomeEstabelecimento']
        
        
        self.nome_estabelecimento = attributes[:'nomeEstabelecimento']
        
      
      end

      
      if attributes[:'idPais']
        
        
        self.id_pais = attributes[:'idPais']
        
      
      end

      
      if attributes[:'codigoRespostaAutorizador']
        
        
        self.codigo_resposta_autorizador = attributes[:'codigoRespostaAutorizador']
        
      
      end

      
      if attributes[:'descricaoRespostaAutorizador']
        
        
        self.descricao_resposta_autorizador = attributes[:'descricaoRespostaAutorizador']
        
      
      end

      
      if attributes[:'codigoRespostaFraude']
        
        
        self.codigo_resposta_fraude = attributes[:'codigoRespostaFraude']
        
      
      end

      
      if attributes[:'descricaoRespostaFraude']
        
        
        self.descricao_resposta_fraude = attributes[:'descricaoRespostaFraude']
        
      
      end

      
      if attributes[:'origemTransacao']
        
        
        self.origem_transacao = attributes[:'origemTransacao']
        
      
      end

      
      if attributes[:'codigoModoEntradaTerminal']
        
        
        self.codigo_modo_entrada_terminal = attributes[:'codigoModoEntradaTerminal']
        
      
      end

      
      if attributes[:'descricaoModoEntradaTerminal']
        
        
        self.descricao_modo_entrada_terminal = attributes[:'descricaoModoEntradaTerminal']
        
      
      end

      
      if attributes[:'cpf']
        
        
        self.cpf = attributes[:'cpf']
        
      
      end

      
      if attributes[:'cnpj']
        
        
        self.cnpj = attributes[:'cnpj']
        
      
      end

      
      if attributes[:'email']
        
        
        self.email = attributes[:'email']
        
      
      end

      
      if attributes[:'telefones']
        
        if (value = attributes[:'telefones']).is_a?(Array)
          self.telefones = value
        end
        
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          id_tipo_resolucao == o.id_tipo_resolucao &&
          descricao_tipo_resolucao == o.descricao_tipo_resolucao &&
          flag_alto_risco == o.flag_alto_risco &&
          id_conta == o.id_conta &&
          id_cartao == o.id_cartao &&
          id_produto == o.id_produto &&
          id_transacao == o.id_transacao &&
          data_transacao == o.data_transacao &&
          valor_transacao == o.valor_transacao &&
          codigo_moeda_origem == o.codigo_moeda_origem &&
          valor_origem == o.valor_origem &&
          codigo_moeda_destino == o.codigo_moeda_destino &&
          valor_destino == o.valor_destino &&
          nome_estabelecimento == o.nome_estabelecimento &&
          id_pais == o.id_pais &&
          codigo_resposta_autorizador == o.codigo_resposta_autorizador &&
          descricao_resposta_autorizador == o.descricao_resposta_autorizador &&
          codigo_resposta_fraude == o.codigo_resposta_fraude &&
          descricao_resposta_fraude == o.descricao_resposta_fraude &&
          origem_transacao == o.origem_transacao &&
          codigo_modo_entrada_terminal == o.codigo_modo_entrada_terminal &&
          descricao_modo_entrada_terminal == o.descricao_modo_entrada_terminal &&
          cpf == o.cpf &&
          cnpj == o.cnpj &&
          email == o.email &&
          telefones == o.telefones
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, id_tipo_resolucao, descricao_tipo_resolucao, flag_alto_risco, id_conta, id_cartao, id_produto, id_transacao, data_transacao, valor_transacao, codigo_moeda_origem, valor_origem, codigo_moeda_destino, valor_destino, nome_estabelecimento, id_pais, codigo_resposta_autorizador, descricao_resposta_autorizador, codigo_resposta_fraude, descricao_resposta_fraude, origem_transacao, codigo_modo_entrada_terminal, descricao_modo_entrada_terminal, cpf, cnpj, email, telefones].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end


end
