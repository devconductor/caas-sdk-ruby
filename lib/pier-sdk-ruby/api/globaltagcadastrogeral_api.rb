=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class GlobaltagcadastrogeralApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # Altera os dados banc\u00E1rios de um determinado conv\u00EAnio
    # Altera os dados banc\u00E1rios de um determinado conv\u00EAnio
    # @param id Id
    # @param convenio_persist convenioPersist
    # @param [Hash] opts the optional parameters
    # @return [ConvenioResponse]
    def alterar_convenio_using_put(id, convenio_persist, opts = {})
      data, _status_code, _headers = alterar_convenio_using_put_with_http_info(id, convenio_persist, opts)
      return data
    end

    # Altera os dados banc\u00E1rios de um determinado conv\u00EAnio
    # Altera os dados banc\u00E1rios de um determinado conv\u00EAnio
    # @param id Id
    # @param convenio_persist convenioPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConvenioResponse, Fixnum, Hash)>] ConvenioResponse data, response status code and response headers
    def alterar_convenio_using_put_with_http_info(id, convenio_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.alterar_convenio_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.alterar_convenio_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'convenio_persist' is set
      fail ArgumentError, "Missing the required parameter 'convenio_persist' when calling GlobaltagcadastrogeralApi.alterar_convenio_using_put" if convenio_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/convenios/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(convenio_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConvenioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#alterar_convenio_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{campanha_resource_alterar}}}
    # {{{campanha_resource_alterar_notes}}}
    # @param id {{{campanha_resource_alterar_param_id}}}
    # @param update update
    # @param [Hash] opts the optional parameters
    # @return [CampanhaResponse]
    def alterar_using_put1(id, update, opts = {})
      data, _status_code, _headers = alterar_using_put1_with_http_info(id, update, opts)
      return data
    end

    # {{{campanha_resource_alterar}}}
    # {{{campanha_resource_alterar_notes}}}
    # @param id {{{campanha_resource_alterar_param_id}}}
    # @param update update
    # @param [Hash] opts the optional parameters
    # @return [Array<(CampanhaResponse, Fixnum, Hash)>] CampanhaResponse data, response status code and response headers
    def alterar_using_put1_with_http_info(id, update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.alterar_using_put1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.alterar_using_put1" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'update' is set
      fail ArgumentError, "Missing the required parameter 'update' when calling GlobaltagcadastrogeralApi.alterar_using_put1" if update.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/campanhas/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CampanhaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#alterar_using_put1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{configuracao_registro_cobranca_resource_alterar}}}
    # {{{configuracao_registro_cobranca_resource_alterar_notes}}}
    # @param id {{{configuracao_registro_cobranca_resource_alterar_param_id}}}
    # @param configuracao_persist configuracaoPersist
    # @param [Hash] opts the optional parameters
    # @return [ConfiguracaoRegistroCobrancaResponse]
    def alterar_using_put2(id, configuracao_persist, opts = {})
      data, _status_code, _headers = alterar_using_put2_with_http_info(id, configuracao_persist, opts)
      return data
    end

    # {{{configuracao_registro_cobranca_resource_alterar}}}
    # {{{configuracao_registro_cobranca_resource_alterar_notes}}}
    # @param id {{{configuracao_registro_cobranca_resource_alterar_param_id}}}
    # @param configuracao_persist configuracaoPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfiguracaoRegistroCobrancaResponse, Fixnum, Hash)>] ConfiguracaoRegistroCobrancaResponse data, response status code and response headers
    def alterar_using_put2_with_http_info(id, configuracao_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.alterar_using_put2 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.alterar_using_put2" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'configuracao_persist' is set
      fail ArgumentError, "Missing the required parameter 'configuracao_persist' when calling GlobaltagcadastrogeralApi.alterar_using_put2" if configuracao_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/configuracoes-registro-cobranca/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuracao_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfiguracaoRegistroCobrancaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#alterar_using_put2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{configuracao_rotativo_resource_alterar}}}
    # {{{configuracao_rotativo_resource_alterar_notes}}}
    # @param id {{{configuracao_rotativo_resource_alterar_param_id}}}
    # @param configuracao_rotativo_persist configuracaoRotativoPersist
    # @param [Hash] opts the optional parameters
    # @return [ConfiguracaoRotativoDetalheResponse]
    def alterar_using_put3(id, configuracao_rotativo_persist, opts = {})
      data, _status_code, _headers = alterar_using_put3_with_http_info(id, configuracao_rotativo_persist, opts)
      return data
    end

    # {{{configuracao_rotativo_resource_alterar}}}
    # {{{configuracao_rotativo_resource_alterar_notes}}}
    # @param id {{{configuracao_rotativo_resource_alterar_param_id}}}
    # @param configuracao_rotativo_persist configuracaoRotativoPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfiguracaoRotativoDetalheResponse, Fixnum, Hash)>] ConfiguracaoRotativoDetalheResponse data, response status code and response headers
    def alterar_using_put3_with_http_info(id, configuracao_rotativo_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.alterar_using_put3 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.alterar_using_put3" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'configuracao_rotativo_persist' is set
      fail ArgumentError, "Missing the required parameter 'configuracao_rotativo_persist' when calling GlobaltagcadastrogeralApi.alterar_using_put3" if configuracao_rotativo_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/configuracoes-rotativos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuracao_rotativo_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfiguracaoRotativoDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#alterar_using_put3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Adiciona novo conv\u00EAnio para o emissor
    # Adiciona novo conv\u00EAnio para o emissor
    # @param convenio_persist convenioPersist
    # @param [Hash] opts the optional parameters
    # @return [ConvenioResponse]
    def cadastrar_convenio_using_post(convenio_persist, opts = {})
      data, _status_code, _headers = cadastrar_convenio_using_post_with_http_info(convenio_persist, opts)
      return data
    end

    # Adiciona novo conv\u00EAnio para o emissor
    # Adiciona novo conv\u00EAnio para o emissor
    # @param convenio_persist convenioPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConvenioResponse, Fixnum, Hash)>] ConvenioResponse data, response status code and response headers
    def cadastrar_convenio_using_post_with_http_info(convenio_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.cadastrar_convenio_using_post ..."
      end
      
      
      # verify the required parameter 'convenio_persist' is set
      fail ArgumentError, "Missing the required parameter 'convenio_persist' when calling GlobaltagcadastrogeralApi.cadastrar_convenio_using_post" if convenio_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/convenios".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(convenio_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConvenioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#cadastrar_convenio_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{configuracao_registro_cobranca_resource_cadastrar}}}
    # {{{configuracao_registro_cobranca_resource_cadastrar_notes}}}
    # @param configuracao_persist configuracaoPersist
    # @param [Hash] opts the optional parameters
    # @return [ConfiguracaoRegistroCobrancaResponse]
    def cadastrar_using_post1(configuracao_persist, opts = {})
      data, _status_code, _headers = cadastrar_using_post1_with_http_info(configuracao_persist, opts)
      return data
    end

    # {{{configuracao_registro_cobranca_resource_cadastrar}}}
    # {{{configuracao_registro_cobranca_resource_cadastrar_notes}}}
    # @param configuracao_persist configuracaoPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfiguracaoRegistroCobrancaResponse, Fixnum, Hash)>] ConfiguracaoRegistroCobrancaResponse data, response status code and response headers
    def cadastrar_using_post1_with_http_info(configuracao_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.cadastrar_using_post1 ..."
      end
      
      
      # verify the required parameter 'configuracao_persist' is set
      fail ArgumentError, "Missing the required parameter 'configuracao_persist' when calling GlobaltagcadastrogeralApi.cadastrar_using_post1" if configuracao_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/configuracoes-registro-cobranca".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuracao_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfiguracaoRegistroCobrancaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#cadastrar_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{produto_resource_configurar_taxa_antecipacao}}}
    # {{{produto_resource_configurar_taxa_antecipacao_notes}}}
    # @param id {{{produto_resource_configurar_taxa_antecipacao_param_id}}}
    # @param taxa_antecipacao_request taxaAntecipacaoRequest
    # @param [Hash] opts the optional parameters
    # @return [ParametroProdutoResponse]
    def configurar_taxa_antecipacao_using_post(id, taxa_antecipacao_request, opts = {})
      data, _status_code, _headers = configurar_taxa_antecipacao_using_post_with_http_info(id, taxa_antecipacao_request, opts)
      return data
    end

    # {{{produto_resource_configurar_taxa_antecipacao}}}
    # {{{produto_resource_configurar_taxa_antecipacao_notes}}}
    # @param id {{{produto_resource_configurar_taxa_antecipacao_param_id}}}
    # @param taxa_antecipacao_request taxaAntecipacaoRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(ParametroProdutoResponse, Fixnum, Hash)>] ParametroProdutoResponse data, response status code and response headers
    def configurar_taxa_antecipacao_using_post_with_http_info(id, taxa_antecipacao_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.configurar_taxa_antecipacao_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.configurar_taxa_antecipacao_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'taxa_antecipacao_request' is set
      fail ArgumentError, "Missing the required parameter 'taxa_antecipacao_request' when calling GlobaltagcadastrogeralApi.configurar_taxa_antecipacao_using_post" if taxa_antecipacao_request.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/produtos/{id}/configurar-taxa-antecipacao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(taxa_antecipacao_request)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ParametroProdutoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#configurar_taxa_antecipacao_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{campanha_resource_consultar_campanha}}}
    # {{{campanha_resource_consultar_campanha_notes}}}
    # @param id {{{campanha_resource_consultar_campanha_param_id_campanha}}}
    # @param [Hash] opts the optional parameters
    # @return [CampanhaResponse]
    def consultar_campanha_using_get(id, opts = {})
      data, _status_code, _headers = consultar_campanha_using_get_with_http_info(id, opts)
      return data
    end

    # {{{campanha_resource_consultar_campanha}}}
    # {{{campanha_resource_consultar_campanha_notes}}}
    # @param id {{{campanha_resource_consultar_campanha_param_id_campanha}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(CampanhaResponse, Fixnum, Hash)>] CampanhaResponse data, response status code and response headers
    def consultar_campanha_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.consultar_campanha_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.consultar_campanha_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/campanhas/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CampanhaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#consultar_campanha_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Consultar dados banc\u00E1rios pelo id do conv\u00EAnio
    # Consultar dados banc\u00E1rios de um determinado conv\u00EAnio
    # @param id Id
    # @param [Hash] opts the optional parameters
    # @return [ConvenioResponse]
    def consultar_convenio_using_get(id, opts = {})
      data, _status_code, _headers = consultar_convenio_using_get_with_http_info(id, opts)
      return data
    end

    # Consultar dados banc\u00E1rios pelo id do conv\u00EAnio
    # Consultar dados banc\u00E1rios de um determinado conv\u00EAnio
    # @param id Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConvenioResponse, Fixnum, Hash)>] ConvenioResponse data, response status code and response headers
    def consultar_convenio_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.consultar_convenio_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.consultar_convenio_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/convenios/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConvenioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#consultar_convenio_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{produto_resource_consultar_taxa_antecipacao}}}
    # {{{produto_resource_consultar_taxa_antecipacao_notes}}}
    # @param id {{{produto_resource_consultar_taxa_antecipacao_param_id}}}
    # @param tipo_transacao {{{produto_resource_consultar_taxa_antecipacao_param_tipo_transacao}}}
    # @param [Hash] opts the optional parameters
    # @return [ParametroProdutoResponse]
    def consultar_taxa_antecipacao_using_get(id, tipo_transacao, opts = {})
      data, _status_code, _headers = consultar_taxa_antecipacao_using_get_with_http_info(id, tipo_transacao, opts)
      return data
    end

    # {{{produto_resource_consultar_taxa_antecipacao}}}
    # {{{produto_resource_consultar_taxa_antecipacao_notes}}}
    # @param id {{{produto_resource_consultar_taxa_antecipacao_param_id}}}
    # @param tipo_transacao {{{produto_resource_consultar_taxa_antecipacao_param_tipo_transacao}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(ParametroProdutoResponse, Fixnum, Hash)>] ParametroProdutoResponse data, response status code and response headers
    def consultar_taxa_antecipacao_using_get_with_http_info(id, tipo_transacao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.consultar_taxa_antecipacao_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.consultar_taxa_antecipacao_using_get" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'tipo_transacao' is set
      fail ArgumentError, "Missing the required parameter 'tipo_transacao' when calling GlobaltagcadastrogeralApi.consultar_taxa_antecipacao_using_get" if tipo_transacao.nil?
      
      # verify enum value
      unless ['ON_US', 'OFF_US'].include?(tipo_transacao)
        fail ArgumentError, "invalid value for 'tipo_transacao', must be one of ON_US, OFF_US"
      end
      
      
      
      
      
      # resource path
      local_var_path = "/api/produtos/{id}/consultar-taxa-antecipacao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'tipoTransacao'] = tipo_transacao

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ParametroProdutoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#consultar_taxa_antecipacao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{configuracao_registro_cobranca_resource_consultar}}}
    # {{{configuracao_registro_cobranca_resource_consultar_notes}}}
    # @param id {{{configuracao_registro_cobranca_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [ConfiguracaoRegistroCobrancaResponse]
    def consultar_using_get10(id, opts = {})
      data, _status_code, _headers = consultar_using_get10_with_http_info(id, opts)
      return data
    end

    # {{{configuracao_registro_cobranca_resource_consultar}}}
    # {{{configuracao_registro_cobranca_resource_consultar_notes}}}
    # @param id {{{configuracao_registro_cobranca_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfiguracaoRegistroCobrancaResponse, Fixnum, Hash)>] ConfiguracaoRegistroCobrancaResponse data, response status code and response headers
    def consultar_using_get10_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.consultar_using_get10 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.consultar_using_get10" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/configuracoes-registro-cobranca/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfiguracaoRegistroCobrancaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#consultar_using_get10\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{configuracao_rotativo_resource_consultar}}}
    # {{{configuracao_rotativo_resource_consultar_notes}}}
    # @param id {{{configuracao_rotativo_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [ConfiguracaoRotativoDetalheResponse]
    def consultar_using_get11(id, opts = {})
      data, _status_code, _headers = consultar_using_get11_with_http_info(id, opts)
      return data
    end

    # {{{configuracao_rotativo_resource_consultar}}}
    # {{{configuracao_rotativo_resource_consultar_notes}}}
    # @param id {{{configuracao_rotativo_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfiguracaoRotativoDetalheResponse, Fixnum, Hash)>] ConfiguracaoRotativoDetalheResponse data, response status code and response headers
    def consultar_using_get11_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.consultar_using_get11 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.consultar_using_get11" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/configuracoes-rotativos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfiguracaoRotativoDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#consultar_using_get11\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{produto_resource_consultar}}}
    # {{{produto_resource_consultar_notes}}}
    # @param id {{{produto_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [ProdutoDetalhesResponse]
    def consultar_using_get31(id, opts = {})
      data, _status_code, _headers = consultar_using_get31_with_http_info(id, opts)
      return data
    end

    # {{{produto_resource_consultar}}}
    # {{{produto_resource_consultar_notes}}}
    # @param id {{{produto_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProdutoDetalhesResponse, Fixnum, Hash)>] ProdutoDetalhesResponse data, response status code and response headers
    def consultar_using_get31_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.consultar_using_get31 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.consultar_using_get31" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/produtos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProdutoDetalhesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#consultar_using_get31\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{tipo_transacoes_ajuste_resource_consultar}}}
    # {{{tipo_transacoes_ajuste_resource_consultar_notes}}}
    # @param id {{{tipo_transacoes_ajuste_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [TipoAjusteResponse]
    def consultar_using_get40(id, opts = {})
      data, _status_code, _headers = consultar_using_get40_with_http_info(id, opts)
      return data
    end

    # {{{tipo_transacoes_ajuste_resource_consultar}}}
    # {{{tipo_transacoes_ajuste_resource_consultar_notes}}}
    # @param id {{{tipo_transacoes_ajuste_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(TipoAjusteResponse, Fixnum, Hash)>] TipoAjusteResponse data, response status code and response headers
    def consultar_using_get40_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.consultar_using_get40 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.consultar_using_get40" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-ajustes/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TipoAjusteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#consultar_using_get40\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{tipo_boleto_resource_consultar}}}
    # {{{tipo_boleto_resource_consultar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{tipo_boleto_request_id_value}}}
    # @option opts [String] :descricao {{{tipo_boleto_request_descricao_value}}}
    # @option opts [Integer] :banco {{{tipo_boleto_request_banco_value}}}
    # @return [PageTipoBoletoResponse]
    def consultar_using_get41(opts = {})
      data, _status_code, _headers = consultar_using_get41_with_http_info(opts)
      return data
    end

    # {{{tipo_boleto_resource_consultar}}}
    # {{{tipo_boleto_resource_consultar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{tipo_boleto_request_id_value}}}
    # @option opts [String] :descricao {{{tipo_boleto_request_descricao_value}}}
    # @option opts [Integer] :banco {{{tipo_boleto_request_banco_value}}}
    # @return [Array<(PageTipoBoletoResponse, Fixnum, Hash)>] PageTipoBoletoResponse data, response status code and response headers
    def consultar_using_get41_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.consultar_using_get41 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-boletos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'descricao'] = opts[:'descricao'] if opts[:'descricao']
      query_params[:'banco'] = opts[:'banco'] if opts[:'banco']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTipoBoletoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#consultar_using_get41\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{tipo_endereco_resource_consultar}}}
    # {{{tipo_endereco_resource_consultar_notes}}}
    # @param id {{{tipo_endereco_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [TipoEnderecoResponse]
    def consultar_using_get42(id, opts = {})
      data, _status_code, _headers = consultar_using_get42_with_http_info(id, opts)
      return data
    end

    # {{{tipo_endereco_resource_consultar}}}
    # {{{tipo_endereco_resource_consultar_notes}}}
    # @param id {{{tipo_endereco_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(TipoEnderecoResponse, Fixnum, Hash)>] TipoEnderecoResponse data, response status code and response headers
    def consultar_using_get42_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.consultar_using_get42 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.consultar_using_get42" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-enderecos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TipoEnderecoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#consultar_using_get42\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{tipo_operacao_resource_consultar}}}
    # {{{tipo_operacao_resource_consultar_notes}}}
    # @param id_cartao {{{tipo_operacao_resource_consultar_param_id_cartao}}}
    # @param id_estabelecimento {{{tipo_operacao_resource_consultar_param_id_estabelecimento}}}
    # @param codigo_processamento {{{tipo_operacao_resource_consultar_param_codigo_processamento}}}
    # @param [Hash] opts the optional parameters
    # @return [TipoOperacaoResponse]
    def consultar_using_get43(id_cartao, id_estabelecimento, codigo_processamento, opts = {})
      data, _status_code, _headers = consultar_using_get43_with_http_info(id_cartao, id_estabelecimento, codigo_processamento, opts)
      return data
    end

    # {{{tipo_operacao_resource_consultar}}}
    # {{{tipo_operacao_resource_consultar_notes}}}
    # @param id_cartao {{{tipo_operacao_resource_consultar_param_id_cartao}}}
    # @param id_estabelecimento {{{tipo_operacao_resource_consultar_param_id_estabelecimento}}}
    # @param codigo_processamento {{{tipo_operacao_resource_consultar_param_codigo_processamento}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(TipoOperacaoResponse, Fixnum, Hash)>] TipoOperacaoResponse data, response status code and response headers
    def consultar_using_get43_with_http_info(id_cartao, id_estabelecimento, codigo_processamento, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.consultar_using_get43 ..."
      end
      
      
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling GlobaltagcadastrogeralApi.consultar_using_get43" if id_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_estabelecimento' is set
      fail ArgumentError, "Missing the required parameter 'id_estabelecimento' when calling GlobaltagcadastrogeralApi.consultar_using_get43" if id_estabelecimento.nil?
      
      
      
      
      
      
      # verify the required parameter 'codigo_processamento' is set
      fail ArgumentError, "Missing the required parameter 'codigo_processamento' when calling GlobaltagcadastrogeralApi.consultar_using_get43" if codigo_processamento.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-operacoes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idCartao'] = id_cartao
      query_params[:'idEstabelecimento'] = id_estabelecimento
      query_params[:'codigoProcessamento'] = codigo_processamento

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TipoOperacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#consultar_using_get43\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{tipo_telefone_resource_consultar}}}
    # {{{tipo_telefone_resource_consultar_notes}}}
    # @param id {{{tipo_telefone_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [TipoTelefoneResponse]
    def consultar_using_get45(id, opts = {})
      data, _status_code, _headers = consultar_using_get45_with_http_info(id, opts)
      return data
    end

    # {{{tipo_telefone_resource_consultar}}}
    # {{{tipo_telefone_resource_consultar_notes}}}
    # @param id {{{tipo_telefone_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(TipoTelefoneResponse, Fixnum, Hash)>] TipoTelefoneResponse data, response status code and response headers
    def consultar_using_get45_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.consultar_using_get45 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.consultar_using_get45" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-telefones/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TipoTelefoneResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#consultar_using_get45\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{atendimento_cliente_resource_consultar}}}
    # {{{atendimento_cliente_resource_consultar_notes}}}
    # @param id {{{atendimento_cliente_resource_consultar_param_id_atendimento}}}
    # @param [Hash] opts the optional parameters
    # @return [AtendimentoClienteResponse]
    def consultar_using_get5(id, opts = {})
      data, _status_code, _headers = consultar_using_get5_with_http_info(id, opts)
      return data
    end

    # {{{atendimento_cliente_resource_consultar}}}
    # {{{atendimento_cliente_resource_consultar_notes}}}
    # @param id {{{atendimento_cliente_resource_consultar_param_id_atendimento}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(AtendimentoClienteResponse, Fixnum, Hash)>] AtendimentoClienteResponse data, response status code and response headers
    def consultar_using_get5_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.consultar_using_get5 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.consultar_using_get5" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/atendimento-clientes/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AtendimentoClienteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#consultar_using_get5\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{banco_resource_consultar}}}
    # {{{banco_resource_consultar_notes}}}
    # @param id {{{banco_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [BancoResponse]
    def consultar_using_get7(id, opts = {})
      data, _status_code, _headers = consultar_using_get7_with_http_info(id, opts)
      return data
    end

    # {{{banco_resource_consultar}}}
    # {{{banco_resource_consultar_notes}}}
    # @param id {{{banco_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(BancoResponse, Fixnum, Hash)>] BancoResponse data, response status code and response headers
    def consultar_using_get7_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.consultar_using_get7 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.consultar_using_get7" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/bancos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BancoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#consultar_using_get7\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{campanha_resource_listar_campanhas}}}
    # {{{campanha_resource_listar_campanhas_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_tipo_campanha {{{campanha_request_id_tipo_campanha_value}}}
    # @return [PageCampanhaResponse]
    def listar_campanhas_using_get(opts = {})
      data, _status_code, _headers = listar_campanhas_using_get_with_http_info(opts)
      return data
    end

    # {{{campanha_resource_listar_campanhas}}}
    # {{{campanha_resource_listar_campanhas_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_tipo_campanha {{{campanha_request_id_tipo_campanha_value}}}
    # @return [Array<(PageCampanhaResponse, Fixnum, Hash)>] PageCampanhaResponse data, response status code and response headers
    def listar_campanhas_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_campanhas_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/campanhas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idTipoCampanha'] = opts[:'id_tipo_campanha'] if opts[:'id_tipo_campanha']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCampanhaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_campanhas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{pessoa_resource_listar_contas_por_pessoa}}}
    # {{{pessoa_resource_listar_contas_por_pessoa_notes}}}
    # @param numero_receita_federal {{{pessoa_resource_listar_contas_por_pessoa_param_numero_receita_federal}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageContaDetalheResponse]
    def listar_contas_por_pessoa_using_get(numero_receita_federal, opts = {})
      data, _status_code, _headers = listar_contas_por_pessoa_using_get_with_http_info(numero_receita_federal, opts)
      return data
    end

    # {{{pessoa_resource_listar_contas_por_pessoa}}}
    # {{{pessoa_resource_listar_contas_por_pessoa_notes}}}
    # @param numero_receita_federal {{{pessoa_resource_listar_contas_por_pessoa_param_numero_receita_federal}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageContaDetalheResponse, Fixnum, Hash)>] PageContaDetalheResponse data, response status code and response headers
    def listar_contas_por_pessoa_using_get_with_http_info(numero_receita_federal, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_contas_por_pessoa_using_get ..."
      end
      
      
      # verify the required parameter 'numero_receita_federal' is set
      fail ArgumentError, "Missing the required parameter 'numero_receita_federal' when calling GlobaltagcadastrogeralApi.listar_contas_por_pessoa_using_get" if numero_receita_federal.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas/listar-contas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'numeroReceitaFederal'] = numero_receita_federal
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageContaDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_contas_por_pessoa_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista os dados banc\u00E1rios dos conv\u00EAnios existentes
    # Lista os dados banc\u00E1rios dos conv\u00EAnios existentes
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :banco Identifica\u00E7\u00E3o do banco.
    # @option opts [Integer] :agencia N\u00FAmero da ag\u00EAncia.
    # @option opts [String] :conta_corrente Conta corrente.
    # @option opts [Float] :numero_convenio C\u00F3digo de identifica\u00E7\u00E3o do conv\u00EAnio.
    # @return [PageConvenioResponse]
    def listar_convenios_using_get(opts = {})
      data, _status_code, _headers = listar_convenios_using_get_with_http_info(opts)
      return data
    end

    # Lista os dados banc\u00E1rios dos conv\u00EAnios existentes
    # Lista os dados banc\u00E1rios dos conv\u00EAnios existentes
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :banco Identifica\u00E7\u00E3o do banco.
    # @option opts [Integer] :agencia N\u00FAmero da ag\u00EAncia.
    # @option opts [String] :conta_corrente Conta corrente.
    # @option opts [Float] :numero_convenio C\u00F3digo de identifica\u00E7\u00E3o do conv\u00EAnio.
    # @return [Array<(PageConvenioResponse, Fixnum, Hash)>] PageConvenioResponse data, response status code and response headers
    def listar_convenios_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_convenios_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/convenios".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'banco'] = opts[:'banco'] if opts[:'banco']
      query_params[:'agencia'] = opts[:'agencia'] if opts[:'agencia']
      query_params[:'contaCorrente'] = opts[:'conta_corrente'] if opts[:'conta_corrente']
      query_params[:'numeroConvenio'] = opts[:'numero_convenio'] if opts[:'numero_convenio']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageConvenioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_convenios_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{campo_codificado_resource_listar_estados_civis}}}
    # {{{campo_codificado_resource_listar_estados_civis_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageCampoCodificadoDescricaoResponse]
    def listar_estados_civis_using_get(opts = {})
      data, _status_code, _headers = listar_estados_civis_using_get_with_http_info(opts)
      return data
    end

    # {{{campo_codificado_resource_listar_estados_civis}}}
    # {{{campo_codificado_resource_listar_estados_civis_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageCampoCodificadoDescricaoResponse, Fixnum, Hash)>] PageCampoCodificadoDescricaoResponse data, response status code and response headers
    def listar_estados_civis_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_estados_civis_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/estados-civis".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCampoCodificadoDescricaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_estados_civis_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{fantasia_basica_resource_listar_fantasias_basicas}}}
    # {{{fantasia_basica_resource_listar_fantasias_basicas_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageFantasiaBasicaResponse]
    def listar_fantasias_basicas_using_get(opts = {})
      data, _status_code, _headers = listar_fantasias_basicas_using_get_with_http_info(opts)
      return data
    end

    # {{{fantasia_basica_resource_listar_fantasias_basicas}}}
    # {{{fantasia_basica_resource_listar_fantasias_basicas_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageFantasiaBasicaResponse, Fixnum, Hash)>] PageFantasiaBasicaResponse data, response status code and response headers
    def listar_fantasias_basicas_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_fantasias_basicas_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/fantasias-basicas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageFantasiaBasicaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_fantasias_basicas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{pessoa_resource_listar_historico_telefones}}}
    # {{{pessoa_resource_listar_historico_telefones_notes}}}
    # @param id {{{pessoa_resource_listar_historico_telefones_param_id_pessoa}}}
    # @param [Hash] opts the optional parameters
    # @return [HistoricoTelefoneResponse]
    def listar_historico_telefones_using_get(id, opts = {})
      data, _status_code, _headers = listar_historico_telefones_using_get_with_http_info(id, opts)
      return data
    end

    # {{{pessoa_resource_listar_historico_telefones}}}
    # {{{pessoa_resource_listar_historico_telefones_notes}}}
    # @param id {{{pessoa_resource_listar_historico_telefones_param_id_pessoa}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(HistoricoTelefoneResponse, Fixnum, Hash)>] HistoricoTelefoneResponse data, response status code and response headers
    def listar_historico_telefones_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_historico_telefones_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcadastrogeralApi.listar_historico_telefones_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas/{id}/historico-telefones".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HistoricoTelefoneResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_historico_telefones_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{campo_codificado_resource_listar_nacionalidades}}}
    # {{{campo_codificado_resource_listar_nacionalidades_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageCampoCodificadoDescricaoResponse]
    def listar_nacionalidades_using_get(opts = {})
      data, _status_code, _headers = listar_nacionalidades_using_get_with_http_info(opts)
      return data
    end

    # {{{campo_codificado_resource_listar_nacionalidades}}}
    # {{{campo_codificado_resource_listar_nacionalidades_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageCampoCodificadoDescricaoResponse, Fixnum, Hash)>] PageCampoCodificadoDescricaoResponse data, response status code and response headers
    def listar_nacionalidades_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_nacionalidades_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/nacionalidades".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCampoCodificadoDescricaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_nacionalidades_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{campo_codificado_resource_listar_naturezas_ocupacoes}}}
    # {{{campo_codificado_resource_listar_naturezas_ocupacoes_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageCampoCodificadoDescricaoResponse]
    def listar_naturezas_ocupacoes_using_get(opts = {})
      data, _status_code, _headers = listar_naturezas_ocupacoes_using_get_with_http_info(opts)
      return data
    end

    # {{{campo_codificado_resource_listar_naturezas_ocupacoes}}}
    # {{{campo_codificado_resource_listar_naturezas_ocupacoes_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageCampoCodificadoDescricaoResponse, Fixnum, Hash)>] PageCampoCodificadoDescricaoResponse data, response status code and response headers
    def listar_naturezas_ocupacoes_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_naturezas_ocupacoes_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/ocupacoes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCampoCodificadoDescricaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_naturezas_ocupacoes_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{campo_codificado_resource_listar_parentescos}}}
    # {{{campo_codificado_resource_listar_parentescos_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageCampoCodificadoDescricaoResponse]
    def listar_parentescos_using_get(opts = {})
      data, _status_code, _headers = listar_parentescos_using_get_with_http_info(opts)
      return data
    end

    # {{{campo_codificado_resource_listar_parentescos}}}
    # {{{campo_codificado_resource_listar_parentescos_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageCampoCodificadoDescricaoResponse, Fixnum, Hash)>] PageCampoCodificadoDescricaoResponse data, response status code and response headers
    def listar_parentescos_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_parentescos_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/parentescos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCampoCodificadoDescricaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_parentescos_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{campo_codificado_resource_listar_profissoes}}}
    # {{{campo_codificado_resource_listar_profissoes_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageCampoCodificadoDescricaoResponse]
    def listar_profissoes_using_get(opts = {})
      data, _status_code, _headers = listar_profissoes_using_get_with_http_info(opts)
      return data
    end

    # {{{campo_codificado_resource_listar_profissoes}}}
    # {{{campo_codificado_resource_listar_profissoes_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageCampoCodificadoDescricaoResponse, Fixnum, Hash)>] PageCampoCodificadoDescricaoResponse data, response status code and response headers
    def listar_profissoes_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_profissoes_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/profissoes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCampoCodificadoDescricaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_profissoes_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{tipo_campanha_resource_listar_tipos_campanhas}}}
    # {{{tipo_campanha_resource_listar_tipos_campanhas_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageTipoCampanhaResponse]
    def listar_tipos_campanhas_using_get(opts = {})
      data, _status_code, _headers = listar_tipos_campanhas_using_get_with_http_info(opts)
      return data
    end

    # {{{tipo_campanha_resource_listar_tipos_campanhas}}}
    # {{{tipo_campanha_resource_listar_tipos_campanhas_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageTipoCampanhaResponse, Fixnum, Hash)>] PageTipoCampanhaResponse data, response status code and response headers
    def listar_tipos_campanhas_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_tipos_campanhas_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-campanhas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTipoCampanhaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_tipos_campanhas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{configuracao_registro_cobranca_resource_listar}}}
    # {{{configuracao_registro_cobranca_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [ConfiguracaoRegistroCobrancaResponse]
    def listar_using_get14(opts = {})
      data, _status_code, _headers = listar_using_get14_with_http_info(opts)
      return data
    end

    # {{{configuracao_registro_cobranca_resource_listar}}}
    # {{{configuracao_registro_cobranca_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(ConfiguracaoRegistroCobrancaResponse, Fixnum, Hash)>] ConfiguracaoRegistroCobrancaResponse data, response status code and response headers
    def listar_using_get14_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_using_get14 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/configuracoes-registro-cobranca".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfiguracaoRegistroCobrancaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_using_get14\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{configuracao_rotativo_resource_listar}}}
    # {{{configuracao_rotativo_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_produto {{{configuracao_rotativo_request_id_produto_value}}}
    # @return [PageConfiguracaoRotativoResponse]
    def listar_using_get15(opts = {})
      data, _status_code, _headers = listar_using_get15_with_http_info(opts)
      return data
    end

    # {{{configuracao_rotativo_resource_listar}}}
    # {{{configuracao_rotativo_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_produto {{{configuracao_rotativo_request_id_produto_value}}}
    # @return [Array<(PageConfiguracaoRotativoResponse, Fixnum, Hash)>] PageConfiguracaoRotativoResponse data, response status code and response headers
    def listar_using_get15_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_using_get15 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/configuracoes-rotativos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageConfiguracaoRotativoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_using_get15\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{portador_resource_listar}}}
    # {{{portador_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_conta {{{portador_request_id_conta_value}}}
    # @option opts [Integer] :id_produto {{{portador_request_id_produto_value}}}
    # @option opts [Integer] :id_pessoa {{{portador_request_id_pessoa_value}}}
    # @option opts [Integer] :id_parentesco {{{portador_request_id_parentesco_value}}}
    # @option opts [String] :tipo_portador {{{portador_request_tipo_portador_value}}}
    # @option opts [String] :nome_impresso {{{portador_request_nome_impresso_value}}}
    # @option opts [Integer] :id_tipo_cartao {{{portador_request_id_tipo_cartao_value}}}
    # @option opts [Integer] :flag_ativo {{{portador_request_flag_ativo_value}}}
    # @option opts [String] :data_cadastro_portador {{{portador_request_data_cadastro_portador_value}}}
    # @option opts [String] :data_cancelamento_portador {{{portador_request_data_cancelamento_portador_value}}}
    # @return [PagePortadorResponse]
    def listar_using_get41(opts = {})
      data, _status_code, _headers = listar_using_get41_with_http_info(opts)
      return data
    end

    # {{{portador_resource_listar}}}
    # {{{portador_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_conta {{{portador_request_id_conta_value}}}
    # @option opts [Integer] :id_produto {{{portador_request_id_produto_value}}}
    # @option opts [Integer] :id_pessoa {{{portador_request_id_pessoa_value}}}
    # @option opts [Integer] :id_parentesco {{{portador_request_id_parentesco_value}}}
    # @option opts [String] :tipo_portador {{{portador_request_tipo_portador_value}}}
    # @option opts [String] :nome_impresso {{{portador_request_nome_impresso_value}}}
    # @option opts [Integer] :id_tipo_cartao {{{portador_request_id_tipo_cartao_value}}}
    # @option opts [Integer] :flag_ativo {{{portador_request_flag_ativo_value}}}
    # @option opts [String] :data_cadastro_portador {{{portador_request_data_cadastro_portador_value}}}
    # @option opts [String] :data_cancelamento_portador {{{portador_request_data_cancelamento_portador_value}}}
    # @return [Array<(PagePortadorResponse, Fixnum, Hash)>] PagePortadorResponse data, response status code and response headers
    def listar_using_get41_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_using_get41 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/portadores".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idConta'] = opts[:'id_conta'] if opts[:'id_conta']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']
      query_params[:'idPessoa'] = opts[:'id_pessoa'] if opts[:'id_pessoa']
      query_params[:'idParentesco'] = opts[:'id_parentesco'] if opts[:'id_parentesco']
      query_params[:'tipoPortador'] = opts[:'tipo_portador'] if opts[:'tipo_portador']
      query_params[:'nomeImpresso'] = opts[:'nome_impresso'] if opts[:'nome_impresso']
      query_params[:'idTipoCartao'] = opts[:'id_tipo_cartao'] if opts[:'id_tipo_cartao']
      query_params[:'flagAtivo'] = opts[:'flag_ativo'] if opts[:'flag_ativo']
      query_params[:'dataCadastroPortador'] = opts[:'data_cadastro_portador'] if opts[:'data_cadastro_portador']
      query_params[:'dataCancelamentoPortador'] = opts[:'data_cancelamento_portador'] if opts[:'data_cancelamento_portador']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePortadorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_using_get41\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{produto_resource_listar}}}
    # {{{produto_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :nome {{{produto_request_nome_value}}}
    # @option opts [Integer] :status {{{produto_request_status_value}}}
    # @option opts [Integer] :id_fantasia_basica {{{produto_request_id_fantasia_basica_value}}}
    # @return [PageProdutoResponse]
    def listar_using_get42(opts = {})
      data, _status_code, _headers = listar_using_get42_with_http_info(opts)
      return data
    end

    # {{{produto_resource_listar}}}
    # {{{produto_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :nome {{{produto_request_nome_value}}}
    # @option opts [Integer] :status {{{produto_request_status_value}}}
    # @option opts [Integer] :id_fantasia_basica {{{produto_request_id_fantasia_basica_value}}}
    # @return [Array<(PageProdutoResponse, Fixnum, Hash)>] PageProdutoResponse data, response status code and response headers
    def listar_using_get42_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_using_get42 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/produtos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']
      query_params[:'status'] = opts[:'status'] if opts[:'status']
      query_params[:'idFantasiaBasica'] = opts[:'id_fantasia_basica'] if opts[:'id_fantasia_basica']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageProdutoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_using_get42\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{promotor_resource_listar}}}
    # {{{promotor_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{promotor_request_id_value}}}
    # @option opts [String] :nome {{{promotor_request_nome_value}}}
    # @option opts [String] :data_cadastro {{{promotor_request_data_cadastro_value}}}
    # @option opts [Integer] :id_estabelecimento {{{promotor_request_id_estabelecimento_value}}}
    # @option opts [Integer] :id_usuario {{{promotor_request_id_usuario_value}}}
    # @return [PagePromotorResponse]
    def listar_using_get43(opts = {})
      data, _status_code, _headers = listar_using_get43_with_http_info(opts)
      return data
    end

    # {{{promotor_resource_listar}}}
    # {{{promotor_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{promotor_request_id_value}}}
    # @option opts [String] :nome {{{promotor_request_nome_value}}}
    # @option opts [String] :data_cadastro {{{promotor_request_data_cadastro_value}}}
    # @option opts [Integer] :id_estabelecimento {{{promotor_request_id_estabelecimento_value}}}
    # @option opts [Integer] :id_usuario {{{promotor_request_id_usuario_value}}}
    # @return [Array<(PagePromotorResponse, Fixnum, Hash)>] PagePromotorResponse data, response status code and response headers
    def listar_using_get43_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_using_get43 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/promotores".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']
      query_params[:'dataCadastro'] = opts[:'data_cadastro'] if opts[:'data_cadastro']
      query_params[:'idEstabelecimento'] = opts[:'id_estabelecimento'] if opts[:'id_estabelecimento']
      query_params[:'idUsuario'] = opts[:'id_usuario'] if opts[:'id_usuario']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePromotorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_using_get43\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{tipo_ajuste_resource_consultar}}}
    # {{{tipo_ajuste_resource_consultar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{tipo_ajuste_request_id_value}}}
    # @option opts [String] :descricao {{{tipo_ajuste_request_descricao_value}}}
    # @return [PageTipoAjusteResponse]
    def listar_using_get52(opts = {})
      data, _status_code, _headers = listar_using_get52_with_http_info(opts)
      return data
    end

    # {{{tipo_ajuste_resource_consultar}}}
    # {{{tipo_ajuste_resource_consultar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{tipo_ajuste_request_id_value}}}
    # @option opts [String] :descricao {{{tipo_ajuste_request_descricao_value}}}
    # @return [Array<(PageTipoAjusteResponse, Fixnum, Hash)>] PageTipoAjusteResponse data, response status code and response headers
    def listar_using_get52_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_using_get52 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-ajustes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'descricao'] = opts[:'descricao'] if opts[:'descricao']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTipoAjusteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_using_get52\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{tipo_endereco_resource_listar}}}
    # {{{tipo_endereco_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{tipo_endereco_request_id_value}}}
    # @option opts [String] :nome {{{tipo_endereco_request_nome_value}}}
    # @return [PageTipoEnderecoResponse]
    def listar_using_get54(opts = {})
      data, _status_code, _headers = listar_using_get54_with_http_info(opts)
      return data
    end

    # {{{tipo_endereco_resource_listar}}}
    # {{{tipo_endereco_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{tipo_endereco_request_id_value}}}
    # @option opts [String] :nome {{{tipo_endereco_request_nome_value}}}
    # @return [Array<(PageTipoEnderecoResponse, Fixnum, Hash)>] PageTipoEnderecoResponse data, response status code and response headers
    def listar_using_get54_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_using_get54 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-enderecos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTipoEnderecoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_using_get54\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{tipo_telefone_resource_listar}}}
    # {{{tipo_telefone_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{tipo_telefone_request_id_value}}}
    # @option opts [String] :nome {{{tipo_telefone_request_nome_value}}}
    # @return [PageTipoTelefoneResponse]
    def listar_using_get56(opts = {})
      data, _status_code, _headers = listar_using_get56_with_http_info(opts)
      return data
    end

    # {{{tipo_telefone_resource_listar}}}
    # {{{tipo_telefone_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{tipo_telefone_request_id_value}}}
    # @option opts [String] :nome {{{tipo_telefone_request_nome_value}}}
    # @return [Array<(PageTipoTelefoneResponse, Fixnum, Hash)>] PageTipoTelefoneResponse data, response status code and response headers
    def listar_using_get56_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_using_get56 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-telefones".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTipoTelefoneResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_using_get56\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{vencimento_resource_listar}}}
    # {{{vencimento_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :data_vencimento {{{controle_vencimento_request_data_vencimento_value}}}
    # @return [PageControleVencimentoResponse]
    def listar_using_get63(opts = {})
      data, _status_code, _headers = listar_using_get63_with_http_info(opts)
      return data
    end

    # {{{vencimento_resource_listar}}}
    # {{{vencimento_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :data_vencimento {{{controle_vencimento_request_data_vencimento_value}}}
    # @return [Array<(PageControleVencimentoResponse, Fixnum, Hash)>] PageControleVencimentoResponse data, response status code and response headers
    def listar_using_get63_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_using_get63 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/vencimentos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'dataVencimento'] = opts[:'data_vencimento'] if opts[:'data_vencimento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageControleVencimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_using_get63\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{atendimento_cliente_resource_listar}}}
    # {{{atendimento_cliente_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_tipo_atendimento {{{atendimento_cliente_request_id_tipo_atendimento_value}}}
    # @option opts [Integer] :id_conta {{{atendimento_cliente_request_id_conta_value}}}
    # @option opts [String] :nome_atendente {{{atendimento_cliente_request_nome_atendente_value}}}
    # @option opts [String] :data_atendimento {{{atendimento_cliente_request_data_atendimento_value}}}
    # @return [PageAtendimentoClienteResponse]
    def listar_using_get7(opts = {})
      data, _status_code, _headers = listar_using_get7_with_http_info(opts)
      return data
    end

    # {{{atendimento_cliente_resource_listar}}}
    # {{{atendimento_cliente_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_tipo_atendimento {{{atendimento_cliente_request_id_tipo_atendimento_value}}}
    # @option opts [Integer] :id_conta {{{atendimento_cliente_request_id_conta_value}}}
    # @option opts [String] :nome_atendente {{{atendimento_cliente_request_nome_atendente_value}}}
    # @option opts [String] :data_atendimento {{{atendimento_cliente_request_data_atendimento_value}}}
    # @return [Array<(PageAtendimentoClienteResponse, Fixnum, Hash)>] PageAtendimentoClienteResponse data, response status code and response headers
    def listar_using_get7_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_using_get7 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/atendimento-clientes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idTipoAtendimento'] = opts[:'id_tipo_atendimento'] if opts[:'id_tipo_atendimento']
      query_params[:'idConta'] = opts[:'id_conta'] if opts[:'id_conta']
      query_params[:'nomeAtendente'] = opts[:'nome_atendente'] if opts[:'nome_atendente']
      query_params[:'dataAtendimento'] = opts[:'data_atendimento'] if opts[:'data_atendimento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageAtendimentoClienteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_using_get7\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{banco_resource_listar}}}
    # {{{banco_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageBancoResponse]
    def listar_using_get9(opts = {})
      data, _status_code, _headers = listar_using_get9_with_http_info(opts)
      return data
    end

    # {{{banco_resource_listar}}}
    # {{{banco_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageBancoResponse, Fixnum, Hash)>] PageBancoResponse data, response status code and response headers
    def listar_using_get9_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.listar_using_get9 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/bancos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageBancoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#listar_using_get9\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{atendimento_cliente_resource_salvar}}}
    # {{{atendimento_cliente_resource_salvar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_conta {{{atendimento_cliente_persist_id_conta_value}}}
    # @option opts [String] :conteudo_atendimento {{{atendimento_cliente_persist_conteudo_atendimento_value}}}
    # @option opts [String] :detalhes_atendimento {{{atendimento_cliente_persist_detalhes_atendimento_value}}}
    # @option opts [String] :nome_atendente {{{atendimento_cliente_persist_nome_atendente_value}}}
    # @option opts [String] :data_atendimento {{{atendimento_cliente_persist_data_atendimento_value}}}
    # @option opts [String] :data_agendamento {{{atendimento_cliente_persist_data_agendamento_value}}}
    # @option opts [String] :data_hora_inicio_atendimento {{{atendimento_cliente_persist_data_hora_inicio_atendimento_value}}}
    # @option opts [String] :data_hora_fim_atendimento {{{atendimento_cliente_persist_data_hora_fim_atendimento_value}}}
    # @option opts [Integer] :flag_fila_fraude {{{atendimento_cliente_persist_flag_fila_fraude_value}}}
    # @return [AtendimentoClienteResponse]
    def salvar_using_post2(opts = {})
      data, _status_code, _headers = salvar_using_post2_with_http_info(opts)
      return data
    end

    # {{{atendimento_cliente_resource_salvar}}}
    # {{{atendimento_cliente_resource_salvar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_conta {{{atendimento_cliente_persist_id_conta_value}}}
    # @option opts [String] :conteudo_atendimento {{{atendimento_cliente_persist_conteudo_atendimento_value}}}
    # @option opts [String] :detalhes_atendimento {{{atendimento_cliente_persist_detalhes_atendimento_value}}}
    # @option opts [String] :nome_atendente {{{atendimento_cliente_persist_nome_atendente_value}}}
    # @option opts [String] :data_atendimento {{{atendimento_cliente_persist_data_atendimento_value}}}
    # @option opts [String] :data_agendamento {{{atendimento_cliente_persist_data_agendamento_value}}}
    # @option opts [String] :data_hora_inicio_atendimento {{{atendimento_cliente_persist_data_hora_inicio_atendimento_value}}}
    # @option opts [String] :data_hora_fim_atendimento {{{atendimento_cliente_persist_data_hora_fim_atendimento_value}}}
    # @option opts [Integer] :flag_fila_fraude {{{atendimento_cliente_persist_flag_fila_fraude_value}}}
    # @return [Array<(AtendimentoClienteResponse, Fixnum, Hash)>] AtendimentoClienteResponse data, response status code and response headers
    def salvar_using_post2_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.salvar_using_post2 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/atendimento-clientes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idConta'] = opts[:'id_conta'] if opts[:'id_conta']
      query_params[:'conteudoAtendimento'] = opts[:'conteudo_atendimento'] if opts[:'conteudo_atendimento']
      query_params[:'detalhesAtendimento'] = opts[:'detalhes_atendimento'] if opts[:'detalhes_atendimento']
      query_params[:'nomeAtendente'] = opts[:'nome_atendente'] if opts[:'nome_atendente']
      query_params[:'dataAtendimento'] = opts[:'data_atendimento'] if opts[:'data_atendimento']
      query_params[:'dataAgendamento'] = opts[:'data_agendamento'] if opts[:'data_agendamento']
      query_params[:'dataHoraInicioAtendimento'] = opts[:'data_hora_inicio_atendimento'] if opts[:'data_hora_inicio_atendimento']
      query_params[:'dataHoraFimAtendimento'] = opts[:'data_hora_fim_atendimento'] if opts[:'data_hora_fim_atendimento']
      query_params[:'flagFilaFraude'] = opts[:'flag_fila_fraude'] if opts[:'flag_fila_fraude']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AtendimentoClienteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#salvar_using_post2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{campanha_resource_salvar}}}
    # {{{campanha_resource_salvar_notes}}}
    # @param campanha_persist campanhaPersist
    # @param [Hash] opts the optional parameters
    # @return [CampanhaResponse]
    def salvar_using_post4(campanha_persist, opts = {})
      data, _status_code, _headers = salvar_using_post4_with_http_info(campanha_persist, opts)
      return data
    end

    # {{{campanha_resource_salvar}}}
    # {{{campanha_resource_salvar_notes}}}
    # @param campanha_persist campanhaPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(CampanhaResponse, Fixnum, Hash)>] CampanhaResponse data, response status code and response headers
    def salvar_using_post4_with_http_info(campanha_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.salvar_using_post4 ..."
      end
      
      
      # verify the required parameter 'campanha_persist' is set
      fail ArgumentError, "Missing the required parameter 'campanha_persist' when calling GlobaltagcadastrogeralApi.salvar_using_post4" if campanha_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/campanhas".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(campanha_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CampanhaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#salvar_using_post4\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{configuracao_rotativo_resource_salvar}}}
    # {{{configuracao_rotativo_resource_salvar_notes}}}
    # @param configuracao_rotativo_persist configuracaoRotativoPersist
    # @param [Hash] opts the optional parameters
    # @return [ConfiguracaoRotativoDetalheResponse]
    def salvar_using_post6(configuracao_rotativo_persist, opts = {})
      data, _status_code, _headers = salvar_using_post6_with_http_info(configuracao_rotativo_persist, opts)
      return data
    end

    # {{{configuracao_rotativo_resource_salvar}}}
    # {{{configuracao_rotativo_resource_salvar_notes}}}
    # @param configuracao_rotativo_persist configuracaoRotativoPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfiguracaoRotativoDetalheResponse, Fixnum, Hash)>] ConfiguracaoRotativoDetalheResponse data, response status code and response headers
    def salvar_using_post6_with_http_info(configuracao_rotativo_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcadastrogeralApi.salvar_using_post6 ..."
      end
      
      
      # verify the required parameter 'configuracao_rotativo_persist' is set
      fail ArgumentError, "Missing the required parameter 'configuracao_rotativo_persist' when calling GlobaltagcadastrogeralApi.salvar_using_post6" if configuracao_rotativo_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/configuracoes-rotativos".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuracao_rotativo_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfiguracaoRotativoDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcadastrogeralApi#salvar_using_post6\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
