=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::GlobaltagusuarioApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GlobaltagusuarioApi' do
  before do
    # run before each test
    @instance = Pier::GlobaltagusuarioApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlobaltagusuarioApi' do
    it 'should create an instact of GlobaltagusuarioApi' do
      @instance.should be_a(Pier::GlobaltagusuarioApi)
    end
  end


  # unit tests for alterar_senha_login_using_post
  # {{{usuario_resource_alterar_senha_login}}}
  # {{{usuario_resource_alterar_senha_login_notes}}}
  # @param login {{{usuario_resource_alterar_senha_login_param_login}}}
  # @param senha_nova {{{usuario_resource_alterar_senha_login_param_senha_nova}}}
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'alterar_senha_login_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for alterar_senha_using_put
  # {{{usuario_resource_alterar_senha}}}
  # {{{usuario_resource_alterar_senha_notes}}}
  # @param id {{{usuario_resource_alterar_senha_param_id}}}
  # @param senha_atual {{{usuario_resource_alterar_senha_param_senha_atual}}}
  # @param senha_nova {{{usuario_resource_alterar_senha_param_senha_nova}}}
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'alterar_senha_using_put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for alterar_using_put23
  # {{{usuario_resource_alterar}}}
  # {{{usuario_resource_alterar_notes}}}
  # @param id {{{usuario_resource_alterar_param_id}}}
  # @param update update
  # @param [Hash] opts the optional parameters
  # @return [UsuarioResponse]
  describe 'alterar_using_put23 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for ativar_usuario_using_post1
  # {{{usuario_resource_ativar_usuario}}}
  # {{{usuario_resource_ativar_usuario_notes}}}
  # @param id {{{usuario_resource_ativar_usuario_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [UsuarioResponse]
  describe 'ativar_usuario_using_post1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for atualizar_using_put2
  # {{{controle_seguranca_dispositivo_atualizar}}}
  # {{{controle_seguranca_dispositivo_atualizar_notas}}}
  # @param update update
  # @param [Hash] opts the optional parameters
  # @return [ControleSegurancaDispositivoResponse]
  describe 'atualizar_using_put2 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_contas_vinculadas_using_get
  # {{{usuario_recurso_listar_por_id_usuario}}}
  # {{{usuario_recurso_listar_por_id_usuario_notas}}}
  # @param id {{{usuario_recurso_listar_por_id_param_id_usuario}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageUsuarioContasResponse]
  describe 'consultar_contas_vinculadas_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get15
  # {{{controle_seguranca_dispositivo_consultar}}}
  # {{{controle_seguranca_dispositivo_consultar_notas}}}
  # @param id_usuario {{{usuario_resource_consultar_param_idUsuario}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageControleSegurancaDispositivoResponse]
  describe 'consultar_using_get15 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get51
  # {{{usuario_resource_consultar}}}
  # {{{usuario_resource_consultar_notes}}}
  # @param id {{{usuario_resource_consultar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [UsuarioResponse]
  describe 'consultar_using_get51 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for desativar_usuario_using_post1
  # {{{usuario_resource_desativar_usuario}}}
  # {{{usuario_resource_desativar_usuario_notes}}}
  # @param id {{{usuario_resource_desativar_usuario_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [UsuarioResponse]
  describe 'desativar_usuario_using_post1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get62
  # {{{usuario_resource_listar}}}
  # {{{usuario_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :nome {{{usuario_request_nome_value}}}
  # @option opts [String] :cpf {{{usuario_request_cpf_value}}}
  # @option opts [String] :email {{{usuario_request_email_value}}}
  # @option opts [String] :status {{{usuario_request_status_value}}}
  # @return [PageUsuarioResponse]
  describe 'listar_using_get62 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for recuperar_senha_using_post
  # {{{usuario_resource_recuperar_senha}}}
  # {{{usuario_resource_recuperar_senha_notes}}}
  # @param id {{{usuario_resource_recuperar_senha_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'recuperar_senha_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for salvar_using_post33
  # {{{usuario_resource_salvar}}}
  # {{{usuario_resource_salvar_notes}}}
  # @param persist persist
  # @param [Hash] opts the optional parameters
  # @return [UsuarioResponse]
  describe 'salvar_using_post33 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for salvar_using_post9
  # {{{controle_seguranca_dispositivo_salvar}}}
  # {{{controle_seguranca_dispositivo_salvar_notas}}}
  # @param persist persist
  # @param [Hash] opts the optional parameters
  # @return [ControleSegurancaDispositivoResponse]
  describe 'salvar_using_post9 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for validar_senha_forte_using_post
  # {{{usuario_resource_validar_senha_forte}}}
  # {{{usuario_resource_validar_senha_forte_notes}}}
  # @param senha {{{usuario_resource_validar_senha_forte_param_senha}}}
  # @param usuario_senha_forte_persist {{{usuario_resource_validar_senha_forte_param_id_plataforma}}}
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'validar_senha_forte_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for validar_senha_login_using_post
  # {{{usuario_resource_validar_senha_login}}}
  # {{{usuario_resource_validar_senha_login_notes}}}
  # @param login {{{usuario_resource_validar_senha_login_param_login}}}
  # @param senha {{{usuario_resource_validar_senha_login_param_senha}}}
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'validar_senha_login_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for validar_senha_using_get1
  # {{{usuario_resource_validar_senha}}}
  # {{{usuario_resource_validar_senha_notes}}}
  # @param senha {{{usuario_resource_validar_senha_param_senha}}}
  # @param id {{{usuario_resource_validar_senha_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'validar_senha_using_get1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for vincular_contas_using_post
  # {{{usuario_recurso_vincular_usuarios}}}
  # {{{usuario_recurso_vincular_usuarios_notas}}}
  # @param id {{{usuario_recurso_vincular_usuarios_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'vincular_contas_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


end

