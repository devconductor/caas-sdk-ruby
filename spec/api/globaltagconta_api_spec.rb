=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::GlobaltagcontaApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GlobaltagcontaApi' do
  before do
    # run before each test
    @instance = Pier::GlobaltagcontaApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlobaltagcontaApi' do
    it 'should create an instact of GlobaltagcontaApi' do
      @instance.should be_a(Pier::GlobaltagcontaApi)
    end
  end


  # unit tests for ajustar_conta_using_post1
  # {{{conta_resource_ajustar_conta}}}
  # {{{conta_resource_ajustar_conta_notes}}}
  # @param id {{{conta_resource_ajustar_conta_param_id}}}
  # @param id_tipo_ajuste {{{ajuste_persist_id_tipo_ajuste_value}}}
  # @param data_ajuste {{{ajuste_persist_data_ajuste_value}}}
  # @param valor_ajuste {{{ajuste_persist_valor_ajuste_value}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @option opts [String] :identificador_externo {{{ajuste_persist_identificador_externo_value}}}
  # @option opts [Integer] :id_transacao_original {{{ajuste_persist_id_transacao_original}}}
  # @return [AjusteFinanceiroResponse]
  describe 'ajustar_conta_using_post1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for alterar_produto_using_post
  # {{{conta_resource_alterar_produto}}}
  # {{{conta_resource_alterar_produto_notes}}}
  # @param id {{{conta_resource_alterar_produto_param_id}}}
  # @param request request
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [String]
  describe 'alterar_produto_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for alterar_titular_using_post
  # {{{conta_resource_alterar_titular}}}
  # {{{conta_resource_alterar_titular_notes}}}
  # @param id {{{conta_resource_alterar_titular_param_id_conta}}}
  # @param id_pessoa {{{conta_resource_alterar_titular_param_id_pessoa}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [ContaResponse]
  describe 'alterar_titular_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for alterar_vencimento_using_put
  # {{{conta_resource_alterar_vencimento}}}
  # {{{conta_resource_alterar_vencimento_notes}}}
  # @param id {{{conta_resource_alterar_vencimento_param_id}}}
  # @param novo_dia_vencimento {{{conta_resource_alterar_vencimento_param_novo_dia_vencimento}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [ContaResponse]
  describe 'alterar_vencimento_using_put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for ativar_anuidade_using_post
  # {{{conta_resource_ativar_anuidade}}}
  # {{{conta_resource_ativar_anuidade_notes}}}
  # @param id {{{conta_resource_ativar_anuidade_param_id}}}
  # @param id_anuidade {{{anuidade_request_id_anuidade_value}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :ddd {{{anuidade_request_d_d_d_value}}}
  # @option opts [String] :celular {{{anuidade_request_celular_value}}}
  # @option opts [Integer] :id_operadora {{{anuidade_request_id_operadora_value}}}
  # @option opts [Integer] :id_origem_comercial {{{anuidade_request_id_origem_comercial_value}}}
  # @return [Object]
  describe 'ativar_anuidade_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for ativar_envio_fatura_email_using_post
  # {{{conta_resource_ativar_envio_fatura_email}}}
  # {{{conta_resource_ativar_envio_fatura_email_notes}}}
  # @param id {{{conta_resource_ativar_envio_fatura_email_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [Object]
  describe 'ativar_envio_fatura_email_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for bloquear_using_post1
  # {{{conta_resource_bloquear}}}
  # {{{conta_resource_bloquear_notes}}}
  # @param id {{{conta_resource_bloquear_param_id}}}
  # @param id_status {{{conta_resource_bloquear_param_id_status}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [ContaResponse]
  describe 'bloquear_using_post1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for cadastrar_using_post
  # {{{aderir_pagamento_sabado_recurso_cadastrar}}}
  # {{{aderir_pagamento_sabado_recurso_cadastrar_notas}}}
  # @param id {{{aderir_pagamento_sabado_recurso_cadastrar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [AdesaoPagamentoSabadoResponse]
  describe 'cadastrar_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for cancelar_using_post1
  # {{{conta_resource_cancelar}}}
  # {{{conta_resource_cancelar_notes}}}
  # @param id {{{conta_resource_cancelar_param_id}}}
  # @param id_status {{{conta_resource_cancelar_param_id_status}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [ContaResponse]
  describe 'cancelar_using_post1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_beneficio_pagamento_atraso_using_get
  # {{{conta_resource_consultar_beneficio_pagamento_atraso}}}
  # {{{conta_resource_consultar_beneficio_pagamento_atraso_notes}}}
  # @param id {{{conta_resource_consultar_beneficio_pagamento_atraso_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [BeneficioPagamentoAtrasoResponse]
  describe 'consultar_beneficio_pagamento_atraso_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_boleto_emitido_using_get
  # {{{conta_resource_consultar_boleto_emitido}}}
  # {{{conta_resource_consultar_boleto_emitido_notes}}}
  # @param id {{{conta_resource_consultar_boleto_emitido_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [BoletoResponse]
  describe 'consultar_boleto_emitido_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_divida_atualizada_cliente_using_get
  # {{{conta_resource_consultar_divida_atualizada_cliente}}}
  # {{{conta_resource_consultar_divida_atualizada_cliente_notes}}}
  # @param id {{{conta_resource_consultar_divida_atualizada_cliente_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :data_vencimento {{{divida_cliente_request_data_vencimento_value}}}
  # @option opts [Integer] :id_escritorio_cobranca {{{divida_cliente_request_id_escritorio_cobranca_value}}}
  # @return [DividaClienteResponse]
  describe 'consultar_divida_atualizada_cliente_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_taxas_tarifas_using_get
  # {{{conta_resource_consultar_taxas_tarifas}}}
  # {{{conta_resource_consultar_taxas_tarifas_notes}}}
  # @param id {{{conta_resource_consultar_taxas_tarifas_param_id_conta}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageTaxasRefinanciamentoResponse]
  describe 'consultar_taxas_tarifas_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get1
  # {{{aderir_pagamento_sabado_recurso_consultar}}}
  # {{{aderir_pagamento_sabado_recurso_consultar_notas}}}
  # @param id {{{aderir_pagamento_sabado_recurso_consultar_param_id}}}
  # @param data_vencimento {{{aderir_pagamento_sabado_recurso_consultar_param_data_vencimento}}}
  # @param [Hash] opts the optional parameters
  # @return [AdesaoPagamentoSabadoResponse]
  describe 'consultar_using_get1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get14
  # {{{conta_resource_consultar}}}
  # {{{conta_resource_consultar_notes}}}
  # @param id {{{conta_resource_consultar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [ContaDetalheResponse]
  describe 'consultar_using_get14 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get49
  # {{{transferencia_resource_consultar}}}
  # {{{transferencia_resource_consultar_notes}}}
  # @param id {{{transferencia_resource_consultar_param_id_conta}}}
  # @param id_transferencia {{{transferencia_resource_consultar_param_id_transferencia}}}
  # @param [Hash] opts the optional parameters
  # @return [TransferenciaDetalheResponse]
  describe 'consultar_using_get49 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for desativar_envio_fatura_email_using_post
  # {{{conta_resource_desativar_envio_fatura_email}}}
  # {{{conta_resource_desativar_envio_fatura_email_notes}}}
  # @param id {{{conta_resource_desativar_envio_fatura_email_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [Object]
  describe 'desativar_envio_fatura_email_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for gerar_boleto_recarga_using_post
  # {{{conta_resource_gerar_boleto_recarga}}}
  # {{{conta_resource_gerar_boleto_recarga_notes}}}
  # @param id {{{conta_resource_gerar_boleto_recarga_param_id}}}
  # @param valor {{{boleto_recarga_request_valor_value}}}
  # @param data_vencimento {{{boleto_recarga_request_data_vencimento_value}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [BoletoResponse]
  describe 'gerar_boleto_recarga_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for gerar_cartao_embossing_using_post
  # {{{conta_resource_gerar_cartao_embossing}}}
  # {{{conta_resource_gerar_cartao_embossing_notes}}}
  # @param id {{{conta_resource_gerar_cartao_embossing_param_id}}}
  # @param cartao_embossing_request cartaoEmbossingRequest
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [CartaoEmbossingResponse]
  describe 'gerar_cartao_embossing_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for gerar_cartao_provisorio_using_post
  # {{{conta_resource_gerar_cartao_provisorio}}}
  # {{{conta_resource_gerar_cartao_provisorio_notes}}}
  # @param id {{{conta_resource_gerar_cartao_provisorio_param_id_conta}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [CartaoImpressaoProvisorioResponse]
  describe 'gerar_cartao_provisorio_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for gerar_cartao_using_post
  # {{{conta_resource_gerar_cartao}}}
  # {{{conta_resource_gerar_cartao_notes}}}
  # @param id {{{conta_resource_gerar_cartao_param_id}}}
  # @param id_pessoa {{{conta_resource_gerar_cartao_param_id_pessoa}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @option opts [Integer] :id_tipo_plastico {{{conta_resource_gerar_cartao_param_id_tipo_plastico}}}
  # @return [CartaoImpressaoResponse]
  describe 'gerar_cartao_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for gerar_cartao_virtual_using_post
  # {{{conta_resource_gerar_cartao_virtual}}}
  # {{{conta_resource_gerar_cartao_virtual_notes}}}
  # @param id {{{conta_resource_gerar_cartao_virtual_param_id}}}
  # @param data_validade {{{conta_resource_gerar_cartao_virtual_param_data_validade}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [CartaoImpressaoResponse]
  describe 'gerar_cartao_virtual_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_historico_alteracoes_limites_using_get
  # {{{conta_resource_listar_historico_alteracoes_limites}}}
  # {{{conta_resource_listar_historico_alteracoes_limites_notes}}}
  # @param id {{{conta_resource_listar_historico_alteracoes_limites_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageHistoricoEventosResponse]
  describe 'listar_historico_alteracoes_limites_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_historico_assessoria_using_get
  # {{{conta_resource_listar_historico_assessoria}}}
  # {{{conta_resource_listar_historico_assessoria_notes}}}
  # @param id {{{conta_resource_listar_historico_assessoria_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageHistoricoAssessoriaResponse]
  describe 'listar_historico_assessoria_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_historico_atrasos_faturas_using_get
  # {{{conta_resource_listar_historico_atrasos_faturas}}}
  # {{{conta_resource_listar_historico_atrasos_faturas_notes}}}
  # @param id {{{conta_resource_listar_historico_atrasos_faturas_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageHistoricoAtrasoFaturaResponse]
  describe 'listar_historico_atrasos_faturas_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_nao_processadas_using_get
  # {{{transacoes_correntes_resource_listar_nao_processadas}}}
  # {{{transacoes_correntes_resource_listar_nao_processadas_notes}}}
  # @param id {{{transacoes_correntes_resource_listar_nao_processadas_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :data_inicio {{{transacoes_nao_processadas_request_data_inicio_value}}}
  # @option opts [String] :data_fim {{{transacoes_nao_processadas_request_data_fim_value}}}
  # @return [PageTransacaoNaoProcessadaResponse]
  describe 'listar_nao_processadas_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_processadas_using_get
  # {{{transacoes_correntes_resource_listar_processadas}}}
  # {{{transacoes_correntes_resource_listar_processadas_notes}}}
  # @param id {{{transacoes_correntes_resource_listar_processadas_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :data_vencimento {{{transacoes_processadas_request_data_vencimento_value}}}
  # @option opts [String] :data_inicio {{{transacoes_processadas_request_data_inicio_value}}}
  # @option opts [String] :data_fim {{{transacoes_processadas_request_data_fim_value}}}
  # @option opts [Integer] :id_tipo_transacao {{{transacoes_processadas_request_tipo_transacao}}}
  # @option opts [Integer] :recupera_encargos {{{transacoes_processadas_request_recupera_encargos}}}
  # @return [PageTransacoesCorrentesResponse]
  describe 'listar_processadas_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get18
  # {{{conta_resource_listar}}}
  # {{{conta_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [Integer] :id_produto {{{conta_request_id_produto_value}}}
  # @option opts [Integer] :id_origem_comercial {{{conta_request_id_origem_comercial_value}}}
  # @option opts [Integer] :id_pessoa {{{conta_request_id_pessoa_value}}}
  # @option opts [Integer] :id_status_conta {{{conta_request_id_status_conta_value}}}
  # @option opts [Integer] :dia_vencimento {{{conta_request_dia_vencimento_value}}}
  # @option opts [Integer] :melhor_dia_compra {{{conta_request_melhor_dia_compra_value}}}
  # @option opts [String] :data_status_conta {{{conta_request_data_status_conta_value}}}
  # @option opts [String] :data_cadastro {{{conta_request_data_cadastro_value}}}
  # @option opts [String] :data_ultima_alteracao_vencimento {{{conta_request_data_ultima_alteracao_vencimento_value}}}
  # @return [PageContaResponse]
  describe 'listar_using_get18 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get58
  # {{{transacoes_correntes_resource_listar_nao_processadas_e_processadas}}}
  # {{{transacoes_correntes_resource_listar_nao_processadas_e_processadas_notes}}}
  # @param id {{{transacoes_correntes_resource_listar_nao_processadas_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :data_vencimento {{{transacoes_processadas_request_data_vencimento_value}}}
  # @option opts [String] :data_inicio {{{transacoes_processadas_request_data_inicio_value}}}
  # @option opts [String] :data_fim {{{transacoes_processadas_request_data_fim_value}}}
  # @option opts [Integer] :id_tipo_transacao {{{transacoes_processadas_request_tipo_transacao}}}
  # @return [PageTransacaoProcessadaNaoProcessadaResponse]
  describe 'listar_using_get58 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get60
  # {{{transferencia_resource_listar}}}
  # {{{transferencia_resource_listar_notes}}}
  # @param id {{{transferencia_resource_listar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [Integer] :id_transferencia {{{transferencia_request_id_transferencia_value}}}
  # @option opts [Integer] :id_conta_origem {{{transferencia_request_id_conta_origem_value}}}
  # @option opts [Integer] :id_conta_destino {{{transferencia_request_id_conta_destino_value}}}
  # @option opts [Float] :valor_transferencia {{{transferencia_request_valor_transferencia_value}}}
  # @option opts [String] :data_transferencia {{{transferencia_request_data_transferencia_value}}}
  # @return [PageTransferenciaResponse]
  describe 'listar_using_get60 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for reativar_using_post1
  # {{{conta_resource_reativar}}}
  # {{{conta_resource_reativar_notes}}}
  # @param id {{{conta_resource_reativar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [Object]
  describe 'reativar_using_post1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for salvar_using_post8
  # {{{conta_resource_salvar}}}
  # {{{conta_resource_salvar_notes}}}
  # @param conta_persist contaPersist
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @return [ContaResponse]
  describe 'salvar_using_post8 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for simular_emprestimo_financiamento_using_post
  # {{{financiamento_resource_simular_emprestimo_financiamento}}}
  # {{{financiamento_resource_simular_emprestimo_financiamento_notes}}}
  # @param id {{{financiamento_resource_simular_emprestimo_financiamento_param_id_conta}}}
  # @param request request
  # @param [Hash] opts the optional parameters
  # @return [EmprestimoPessoalResponse]
  describe 'simular_emprestimo_financiamento_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for transacoes_using_get
  # {{{conta_resource_transacoes}}}
  # {{{conta_resource_transacoes_notes}}}
  # @param id {{{conta_resource_transacoes_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :authorization Authorization
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageTransacaoResponse]
  describe 'transacoes_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for transferir_using_post1
  # {{{transferencia_resource_transferir}}}
  # {{{transferencia_resource_transferir_notes}}}
  # @param id {{{transferencia_resource_transferir_param_id_conta_origem}}}
  # @param id_conta_destino {{{transferencia_resource_transferir_param_id_conta_destino}}}
  # @param valor_transferencia {{{transferencia_resource_transferir_param_valor_transferencia}}}
  # @param [Hash] opts the optional parameters
  # @return [TransferenciaDetalheResponse]
  describe 'transferir_using_post1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


end

