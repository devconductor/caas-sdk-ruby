=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::GlobaltagfaqApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GlobaltagfaqApi' do
  before do
    # run before each test
    @instance = Pier::GlobaltagfaqApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlobaltagfaqApi' do
    it 'should create an instact of GlobaltagfaqApi' do
      @instance.should be_a(Pier::GlobaltagfaqApi)
    end
  end


  # unit tests for adicionar_using_post
  # {{{faq_resource_adicionar}}}
  # {{{faq_resource_adicionar_notes}}}
  # @param pergunta {{{faq_persist_pergunta_value}}}
  # @param resposta {{{faq_persist_resposta_value}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :relevancia {{{faq_persist_relevancia_value}}}
  # @option opts [String] :plataforma {{{faq_persist_plataforma_value}}}
  # @option opts [String] :categoria {{{faq_persist_categoria_value}}}
  # @option opts [String] :status {{{faq_persist_status_value}}}
  # @return [FaqResponse]
  describe 'adicionar_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for alterar_using_put7
  # {{{faq_resource_alterar}}}
  # {{{faq_resource_alterar_notes}}}
  # @param id {{{faq_resource_alterar_param_id_faq}}}
  # @param pergunta {{{faq_persist_pergunta_value}}}
  # @param resposta {{{faq_persist_resposta_value}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :relevancia {{{faq_persist_relevancia_value}}}
  # @option opts [String] :plataforma {{{faq_persist_plataforma_value}}}
  # @option opts [String] :categoria {{{faq_persist_categoria_value}}}
  # @option opts [String] :status {{{faq_persist_status_value}}}
  # @return [FaqResponse]
  describe 'alterar_using_put7 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get21
  # {{{faq_resource_consultar}}}
  # {{{faq_resource_consultar_notes}}}
  # @param id {{{faq_resource_consultar_param_id_faq}}}
  # @param [Hash] opts the optional parameters
  # @return [FaqResponse]
  describe 'consultar_using_get21 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get26
  # {{{faq_resource_listar}}}
  # {{{faq_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [Integer] :id_faq {{{faq_request_id_faq_value}}}
  # @option opts [String] :pergunta {{{faq_request_pergunta_value}}}
  # @option opts [String] :resposta {{{faq_request_resposta_value}}}
  # @option opts [Integer] :relevancia {{{faq_request_relevancia_value}}}
  # @option opts [String] :plataforma {{{faq_request_plataforma_value}}}
  # @option opts [String] :categoria {{{faq_request_categoria_value}}}
  # @option opts [String] :status {{{faq_request_status_value}}}
  # @return [PageFaqResponse]
  describe 'listar_using_get26 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


end

