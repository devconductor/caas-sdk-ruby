=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class MockApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # Altera o produto associado \u00C3\u00A0 conta.
    # O recurso permite fazer modifica\u00C3\u00A7\u00C3\u00A3o do produto associado \u00C3\u00A0 conta.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param request request
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def alterar_produto_using_post(id, request, opts = {})
      data, _status_code, _headers = alterar_produto_using_post_with_http_info(id, request, opts)
      return data
    end

    # Altera o produto associado \u00C3\u00A0 conta.
    # O recurso permite fazer modifica\u00C3\u00A7\u00C3\u00A3o do produto associado \u00C3\u00A0 conta.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param request request
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def alterar_produto_using_post_with_http_info(id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MockApi.alterar_produto_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling MockApi.alterar_produto_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling MockApi.alterar_produto_using_post" if request.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/alterar-produto".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MockApi#alterar_produto_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Envia 2\u00C2\u00AA via de fatura por E-mail
    # Envia a segunda via da fatura para o e-mail informado/cadastrado.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param data_vencimento Data de Vencimento da fatura.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email E-mail para envio da 2\u00C2\u00AA via da fatura, caso n\u00C3\u00A3o seja informado ser\u00C3\u00A1 usado o e-mail cadastrado.
    # @return [Object]
    def enviar_fatura_email_using_post(id, data_vencimento, opts = {})
      data, _status_code, _headers = enviar_fatura_email_using_post_with_http_info(id, data_vencimento, opts)
      return data
    end

    # Envia 2\u00C2\u00AA via de fatura por E-mail
    # Envia a segunda via da fatura para o e-mail informado/cadastrado.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param data_vencimento Data de Vencimento da fatura.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email E-mail para envio da 2\u00C2\u00AA via da fatura, caso n\u00C3\u00A3o seja informado ser\u00C3\u00A1 usado o e-mail cadastrado.
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def enviar_fatura_email_using_post_with_http_info(id, data_vencimento, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MockApi.enviar_fatura_email_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling MockApi.enviar_fatura_email_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_vencimento' is set
      fail ArgumentError, "Missing the required parameter 'data_vencimento' when calling MockApi.enviar_fatura_email_using_post" if data_vencimento.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/faturas/{dataVencimento}/enviar-email".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'dataVencimento' + '}', data_vencimento.to_s)

      # query parameters
      query_params = {}
      query_params[:'email'] = opts[:'email'] if opts[:'email']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MockApi#enviar_fatura_email_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Simula valores de presta\u00C3\u00A7\u00C3\u00B5es de empr\u00C3\u00A9stimos/financiamentos
    # Esta opera\u00C3\u00A7\u00C3\u00A3o pode ser utilizada para simular opera\u00C3\u00A7\u00C3\u00B5es financeiras a partir de informa\u00C3\u00A7\u00C3\u00B5es fornecidas pelo usu\u00C3\u00A1rio. Os c\u00C3\u00A1lculos gerados devem ser considerados apenas como refer\u00C3\u00AAncia para as situa\u00C3\u00A7\u00C3\u00B5es reais e n\u00C3\u00A3o como valores oficiais.
    # @param request request
    # @param [Hash] opts the optional parameters
    # @return [EmprestimoPessoalResponse]
    def simular_emprestimo_financiamento_using_post(request, opts = {})
      data, _status_code, _headers = simular_emprestimo_financiamento_using_post_with_http_info(request, opts)
      return data
    end

    # Simula valores de presta\u00C3\u00A7\u00C3\u00B5es de empr\u00C3\u00A9stimos/financiamentos
    # Esta opera\u00C3\u00A7\u00C3\u00A3o pode ser utilizada para simular opera\u00C3\u00A7\u00C3\u00B5es financeiras a partir de informa\u00C3\u00A7\u00C3\u00B5es fornecidas pelo usu\u00C3\u00A1rio. Os c\u00C3\u00A1lculos gerados devem ser considerados apenas como refer\u00C3\u00AAncia para as situa\u00C3\u00A7\u00C3\u00B5es reais e n\u00C3\u00A3o como valores oficiais.
    # @param request request
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmprestimoPessoalResponse, Fixnum, Hash)>] EmprestimoPessoalResponse data, response status code and response headers
    def simular_emprestimo_financiamento_using_post_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MockApi.simular_emprestimo_financiamento_using_post ..."
      end
      
      
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling MockApi.simular_emprestimo_financiamento_using_post" if request.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/simular-emprestimos-financiamentos".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmprestimoPessoalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MockApi#simular_emprestimo_financiamento_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Permite visualizar o extrato da fatura em formato PDF
    # Esta opera\u00C3\u00A7\u00C3\u00A3o permite visualizar o extrato da fatura de uma determinada conta, em formato PDF. Quando ela for a fatura ativa, ou seja, a do m\u00C3\u00AAs corrente, o pdf ser\u00C3\u00A1 composto pelo extrato de lan\u00C3\u00A7amentos e pela ficha de compensa\u00C3\u00A7\u00C3\u00A3o banc\u00C3\u00A1ria. Quando for de uma fatura do hist\u00C3\u00B3rico do cliente, o PDF ser\u00C3\u00A1 composto apenas pelo extrato de transa\u00C3\u00A7\u00C3\u00B5es.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param data_vencimento Data de Vencimento da fatura.
    # @param [Hash] opts the optional parameters
    # @return [Array<ByteArray>]
    def visualizar_documento_using_post(id, data_vencimento, opts = {})
      data, _status_code, _headers = visualizar_documento_using_post_with_http_info(id, data_vencimento, opts)
      return data
    end

    # Permite visualizar o extrato da fatura em formato PDF
    # Esta opera\u00C3\u00A7\u00C3\u00A3o permite visualizar o extrato da fatura de uma determinada conta, em formato PDF. Quando ela for a fatura ativa, ou seja, a do m\u00C3\u00AAs corrente, o pdf ser\u00C3\u00A1 composto pelo extrato de lan\u00C3\u00A7amentos e pela ficha de compensa\u00C3\u00A7\u00C3\u00A3o banc\u00C3\u00A1ria. Quando for de uma fatura do hist\u00C3\u00B3rico do cliente, o PDF ser\u00C3\u00A1 composto apenas pelo extrato de transa\u00C3\u00A7\u00C3\u00B5es.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id).
    # @param data_vencimento Data de Vencimento da fatura.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ByteArray>, Fixnum, Hash)>] Array<ByteArray> data, response status code and response headers
    def visualizar_documento_using_post_with_http_info(id, data_vencimento, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MockApi.visualizar_documento_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling MockApi.visualizar_documento_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_vencimento' is set
      fail ArgumentError, "Missing the required parameter 'data_vencimento' when calling MockApi.visualizar_documento_using_post" if data_vencimento.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/faturas/{dataVencimento}/arquivo.pdf".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'dataVencimento' + '}', data_vencimento.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/pdf', '*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ByteArray>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MockApi#visualizar_documento_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
