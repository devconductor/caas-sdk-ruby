=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'date'

module Pier
  # Objeto conta
  class ContaDetalheResponse
    # C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o de conta (id).
    attr_accessor :id

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa Titular da Conta (id).
    attr_accessor :id_pessoa

    # Apresenta o 'Nome Completo da PF' ou o 'Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)'.
    attr_accessor :nome

    # C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do produto ao qual a conta faz parte. (id).
    attr_accessor :id_produto

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id) que deu origem a Conta.
    attr_accessor :id_origem_comercial

    # Nome da origem comercial
    attr_accessor :nome_origem_comercial

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Fantasia Basica (id).
    attr_accessor :id_fantasia_basica

    # Nome da Fantasia Basica
    attr_accessor :nome_fantasia_basica

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto a qual o cart\u00C3\u00A3o pertence (id).
    attr_accessor :id_status_conta

    # Descri\u00C3\u00A7\u00C3\u00A3o do status da conta
    attr_accessor :status_conta

    # Apresenta o dia de vencimento.
    attr_accessor :dia_vencimento

    # Apresenta o melhor dia de compra.
    attr_accessor :melhor_dia_compra

    # Apresenta a data em que o idStatusConta atual fora atribu\u00C3\u00ADdo para ela.
    attr_accessor :data_status_conta

    # Valor da renda comprovada.
    attr_accessor :valor_renda

    # Apresenta a data em que o cart\u00C3\u00A3o foi gerado.
    attr_accessor :data_cadastro

    # Apresenta a data da ultima altera\u00C3\u00A7\u00C3\u00A3o de vencimento.
    attr_accessor :data_ultima_alteracao_vencimento

    # Apresenta a data da ultima altera\u00C3\u00A7\u00C3\u00A3o de vencimento.
    attr_accessor :data_hora_ultima_compra

    # N\u00C3\u00BAmero da ag\u00C3\u00AAncia.
    attr_accessor :numero_agencia

    # N\u00C3\u00BAmero da conta corrente.
    attr_accessor :numero_conta_corrente

    # Forma de envio da fatura.
    attr_accessor :forma_envio_fatura

    # Apresenta se a pessoa \u00C3\u00A9 titular da conta.
    attr_accessor :titular

    # Apresenta o valor do limite de cr\u00C3\u00A9dito que o portador do cart\u00C3\u00A3o possui.
    attr_accessor :limite_global

    # Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador pode utilizar para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Nacional.
    attr_accessor :limite_saque_global

    # Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador possui para uso exclusivo em Compras Nacionais.
    attr_accessor :saldo_disponivel_global

    # Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador pode utilizar para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Nacional dentro de cada ciclo de faturamento.
    attr_accessor :saldo_disponivel_saque

    # Apresenta a data da ultima cobran\u00C3\u00A7a.
    attr_accessor :data_inicio_atraso


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'id',
        
        :'id_pessoa' => :'idPessoa',
        
        :'nome' => :'nome',
        
        :'id_produto' => :'idProduto',
        
        :'id_origem_comercial' => :'idOrigemComercial',
        
        :'nome_origem_comercial' => :'nomeOrigemComercial',
        
        :'id_fantasia_basica' => :'idFantasiaBasica',
        
        :'nome_fantasia_basica' => :'nomeFantasiaBasica',
        
        :'id_status_conta' => :'idStatusConta',
        
        :'status_conta' => :'statusConta',
        
        :'dia_vencimento' => :'diaVencimento',
        
        :'melhor_dia_compra' => :'melhorDiaCompra',
        
        :'data_status_conta' => :'dataStatusConta',
        
        :'valor_renda' => :'valorRenda',
        
        :'data_cadastro' => :'dataCadastro',
        
        :'data_ultima_alteracao_vencimento' => :'dataUltimaAlteracaoVencimento',
        
        :'data_hora_ultima_compra' => :'dataHoraUltimaCompra',
        
        :'numero_agencia' => :'numeroAgencia',
        
        :'numero_conta_corrente' => :'numeroContaCorrente',
        
        :'forma_envio_fatura' => :'formaEnvioFatura',
        
        :'titular' => :'titular',
        
        :'limite_global' => :'limiteGlobal',
        
        :'limite_saque_global' => :'limiteSaqueGlobal',
        
        :'saldo_disponivel_global' => :'saldoDisponivelGlobal',
        
        :'saldo_disponivel_saque' => :'saldoDisponivelSaque',
        
        :'data_inicio_atraso' => :'dataInicioAtraso'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'id' => :'Integer',
        
        :'id_pessoa' => :'Integer',
        
        :'nome' => :'String',
        
        :'id_produto' => :'Integer',
        
        :'id_origem_comercial' => :'Integer',
        
        :'nome_origem_comercial' => :'String',
        
        :'id_fantasia_basica' => :'Integer',
        
        :'nome_fantasia_basica' => :'String',
        
        :'id_status_conta' => :'Integer',
        
        :'status_conta' => :'String',
        
        :'dia_vencimento' => :'Integer',
        
        :'melhor_dia_compra' => :'Integer',
        
        :'data_status_conta' => :'DateTime',
        
        :'valor_renda' => :'Float',
        
        :'data_cadastro' => :'DateTime',
        
        :'data_ultima_alteracao_vencimento' => :'DateTime',
        
        :'data_hora_ultima_compra' => :'DateTime',
        
        :'numero_agencia' => :'Integer',
        
        :'numero_conta_corrente' => :'String',
        
        :'forma_envio_fatura' => :'String',
        
        :'titular' => :'BOOLEAN',
        
        :'limite_global' => :'Float',
        
        :'limite_saque_global' => :'Float',
        
        :'saldo_disponivel_global' => :'Float',
        
        :'saldo_disponivel_saque' => :'Float',
        
        :'data_inicio_atraso' => :'DateTime'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'id']
        
        
        self.id = attributes[:'id']
        
      
      end

      
      if attributes[:'idPessoa']
        
        
        self.id_pessoa = attributes[:'idPessoa']
        
      
      end

      
      if attributes[:'nome']
        
        
        self.nome = attributes[:'nome']
        
      
      end

      
      if attributes[:'idProduto']
        
        
        self.id_produto = attributes[:'idProduto']
        
      
      end

      
      if attributes[:'idOrigemComercial']
        
        
        self.id_origem_comercial = attributes[:'idOrigemComercial']
        
      
      end

      
      if attributes[:'nomeOrigemComercial']
        
        
        self.nome_origem_comercial = attributes[:'nomeOrigemComercial']
        
      
      end

      
      if attributes[:'idFantasiaBasica']
        
        
        self.id_fantasia_basica = attributes[:'idFantasiaBasica']
        
      
      end

      
      if attributes[:'nomeFantasiaBasica']
        
        
        self.nome_fantasia_basica = attributes[:'nomeFantasiaBasica']
        
      
      end

      
      if attributes[:'idStatusConta']
        
        
        self.id_status_conta = attributes[:'idStatusConta']
        
      
      end

      
      if attributes[:'statusConta']
        
        
        self.status_conta = attributes[:'statusConta']
        
      
      end

      
      if attributes[:'diaVencimento']
        
        
        self.dia_vencimento = attributes[:'diaVencimento']
        
      
      end

      
      if attributes[:'melhorDiaCompra']
        
        
        self.melhor_dia_compra = attributes[:'melhorDiaCompra']
        
      
      end

      
      if attributes[:'dataStatusConta']
        
        
        self.data_status_conta = attributes[:'dataStatusConta']
        
      
      end

      
      if attributes[:'valorRenda']
        
        
        self.valor_renda = attributes[:'valorRenda']
        
      
      end

      
      if attributes[:'dataCadastro']
        
        
        self.data_cadastro = attributes[:'dataCadastro']
        
      
      end

      
      if attributes[:'dataUltimaAlteracaoVencimento']
        
        
        self.data_ultima_alteracao_vencimento = attributes[:'dataUltimaAlteracaoVencimento']
        
      
      end

      
      if attributes[:'dataHoraUltimaCompra']
        
        
        self.data_hora_ultima_compra = attributes[:'dataHoraUltimaCompra']
        
      
      end

      
      if attributes[:'numeroAgencia']
        
        
        self.numero_agencia = attributes[:'numeroAgencia']
        
      
      end

      
      if attributes[:'numeroContaCorrente']
        
        
        self.numero_conta_corrente = attributes[:'numeroContaCorrente']
        
      
      end

      
      if attributes[:'formaEnvioFatura']
        
        
        self.forma_envio_fatura = attributes[:'formaEnvioFatura']
        
      
      end

      
      if attributes[:'titular']
        
        
        self.titular = attributes[:'titular']
        
      
      end

      
      if attributes[:'limiteGlobal']
        
        
        self.limite_global = attributes[:'limiteGlobal']
        
      
      end

      
      if attributes[:'limiteSaqueGlobal']
        
        
        self.limite_saque_global = attributes[:'limiteSaqueGlobal']
        
      
      end

      
      if attributes[:'saldoDisponivelGlobal']
        
        
        self.saldo_disponivel_global = attributes[:'saldoDisponivelGlobal']
        
      
      end

      
      if attributes[:'saldoDisponivelSaque']
        
        
        self.saldo_disponivel_saque = attributes[:'saldoDisponivelSaque']
        
      
      end

      
      if attributes[:'dataInicioAtraso']
        
        
        self.data_inicio_atraso = attributes[:'dataInicioAtraso']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      if @nome.nil?
        return false
      end

      
      
      
      
      
      
      
      
      
      
      
      
      
      if @nome_origem_comercial.nil?
        return false
      end

      
      
      
      
      
      
      
      
      
      if @nome_fantasia_basica.nil?
        return false
      end

      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if @limite_global.nil?
        return false
      end

      
      
      
      
      
      if @limite_saque_global.nil?
        return false
      end

      
      
      
      
      
      if @saldo_disponivel_global.nil?
        return false
      end

      
      
      
      
      
      if @saldo_disponivel_saque.nil?
        return false
      end

      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          id_pessoa == o.id_pessoa &&
          nome == o.nome &&
          id_produto == o.id_produto &&
          id_origem_comercial == o.id_origem_comercial &&
          nome_origem_comercial == o.nome_origem_comercial &&
          id_fantasia_basica == o.id_fantasia_basica &&
          nome_fantasia_basica == o.nome_fantasia_basica &&
          id_status_conta == o.id_status_conta &&
          status_conta == o.status_conta &&
          dia_vencimento == o.dia_vencimento &&
          melhor_dia_compra == o.melhor_dia_compra &&
          data_status_conta == o.data_status_conta &&
          valor_renda == o.valor_renda &&
          data_cadastro == o.data_cadastro &&
          data_ultima_alteracao_vencimento == o.data_ultima_alteracao_vencimento &&
          data_hora_ultima_compra == o.data_hora_ultima_compra &&
          numero_agencia == o.numero_agencia &&
          numero_conta_corrente == o.numero_conta_corrente &&
          forma_envio_fatura == o.forma_envio_fatura &&
          titular == o.titular &&
          limite_global == o.limite_global &&
          limite_saque_global == o.limite_saque_global &&
          saldo_disponivel_global == o.saldo_disponivel_global &&
          saldo_disponivel_saque == o.saldo_disponivel_saque &&
          data_inicio_atraso == o.data_inicio_atraso
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, id_pessoa, nome, id_produto, id_origem_comercial, nome_origem_comercial, id_fantasia_basica, nome_fantasia_basica, id_status_conta, status_conta, dia_vencimento, melhor_dia_compra, data_status_conta, valor_renda, data_cadastro, data_ultima_alteracao_vencimento, data_hora_ultima_compra, numero_agencia, numero_conta_corrente, forma_envio_fatura, titular, limite_global, limite_saque_global, saldo_disponivel_global, saldo_disponivel_saque, data_inicio_atraso].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end


end
