=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'date'

module Pier
  # {{{cartao_detalhe_response_description}}}
  class CartaoDetalheResponse
    # {{{cartao_response_id_value}}}
    attr_accessor :id

    # {{{cartao_response_flag_titular_value}}}
    attr_accessor :flag_titular

    # {{{cartao_response_id_pessoa_value}}}
    attr_accessor :id_pessoa

    # {{{cartao_response_sequencial_cartao_value}}}
    attr_accessor :sequencial_cartao

    # {{{cartao_response_id_conta_value}}}
    attr_accessor :id_conta

    # {{{cartao_response_id_status_value}}}
    attr_accessor :id_status

    # {{{cartao_response_data_status_value}}}
    attr_accessor :data_status

    # {{{cartao_response_id_estagio_value}}}
    attr_accessor :id_estagio

    # {{{cartao_response_data_estagio_value}}}
    attr_accessor :data_estagio

    # {{{cartao_response_numero_bin_value}}}
    attr_accessor :numero_bin

    # {{{cartao_response_numero_cartao_value}}}
    attr_accessor :numero_cartao

    # {{{cartao_response_numero_cartao_hash_value}}}
    attr_accessor :numero_cartao_hash

    # {{{cartao_response_numero_cartao_criptografado_value}}}
    attr_accessor :numero_cartao_criptografado

    # {{{cartao_response_data_emissao_value}}}
    attr_accessor :data_emissao

    # {{{cartao_response_data_validade_value}}}
    attr_accessor :data_validade

    # {{{cartao_response_cartao_virtual_value}}}
    attr_accessor :cartao_virtual

    # {{{cartao_response_impressao_avulsa_value}}}
    attr_accessor :impressao_avulsa

    # {{{cartao_response_data_impressao_value}}}
    attr_accessor :data_impressao

    # {{{cartao_response_nome_arquivo_impressao_value}}}
    attr_accessor :nome_arquivo_impressao

    # {{{cartao_detalhe_response_descricao_tipo_cartao_value}}}
    attr_accessor :descricao_tipo_cartao

    # {{{cartao_response_id_produto_value}}}
    attr_accessor :id_produto

    # {{{cartao_response_nome_impresso_value}}}
    attr_accessor :nome_impresso

    # {{{cartao_detalhe_response_tipo_cartao_value}}}
    attr_accessor :tipo_cartao

    # {{{cartao_response_codigo_desbloqueio_value}}}
    attr_accessor :codigo_desbloqueio


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'id',
        
        :'flag_titular' => :'flagTitular',
        
        :'id_pessoa' => :'idPessoa',
        
        :'sequencial_cartao' => :'sequencialCartao',
        
        :'id_conta' => :'idConta',
        
        :'id_status' => :'idStatus',
        
        :'data_status' => :'dataStatus',
        
        :'id_estagio' => :'idEstagio',
        
        :'data_estagio' => :'dataEstagio',
        
        :'numero_bin' => :'numeroBin',
        
        :'numero_cartao' => :'numeroCartao',
        
        :'numero_cartao_hash' => :'numeroCartaoHash',
        
        :'numero_cartao_criptografado' => :'numeroCartaoCriptografado',
        
        :'data_emissao' => :'dataEmissao',
        
        :'data_validade' => :'dataValidade',
        
        :'cartao_virtual' => :'cartaoVirtual',
        
        :'impressao_avulsa' => :'impressaoAvulsa',
        
        :'data_impressao' => :'dataImpressao',
        
        :'nome_arquivo_impressao' => :'nomeArquivoImpressao',
        
        :'descricao_tipo_cartao' => :'descricaoTipoCartao',
        
        :'id_produto' => :'idProduto',
        
        :'nome_impresso' => :'nomeImpresso',
        
        :'tipo_cartao' => :'tipoCartao',
        
        :'codigo_desbloqueio' => :'codigoDesbloqueio'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'id' => :'Integer',
        
        :'flag_titular' => :'Integer',
        
        :'id_pessoa' => :'Integer',
        
        :'sequencial_cartao' => :'Integer',
        
        :'id_conta' => :'Integer',
        
        :'id_status' => :'Integer',
        
        :'data_status' => :'String',
        
        :'id_estagio' => :'Integer',
        
        :'data_estagio' => :'String',
        
        :'numero_bin' => :'Integer',
        
        :'numero_cartao' => :'String',
        
        :'numero_cartao_hash' => :'Integer',
        
        :'numero_cartao_criptografado' => :'String',
        
        :'data_emissao' => :'String',
        
        :'data_validade' => :'String',
        
        :'cartao_virtual' => :'Integer',
        
        :'impressao_avulsa' => :'Integer',
        
        :'data_impressao' => :'String',
        
        :'nome_arquivo_impressao' => :'String',
        
        :'descricao_tipo_cartao' => :'String',
        
        :'id_produto' => :'Integer',
        
        :'nome_impresso' => :'String',
        
        :'tipo_cartao' => :'Integer',
        
        :'codigo_desbloqueio' => :'String'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'id']
        
        
        self.id = attributes[:'id']
        
      
      end

      
      if attributes[:'flagTitular']
        
        
        self.flag_titular = attributes[:'flagTitular']
        
      
      end

      
      if attributes[:'idPessoa']
        
        
        self.id_pessoa = attributes[:'idPessoa']
        
      
      end

      
      if attributes[:'sequencialCartao']
        
        
        self.sequencial_cartao = attributes[:'sequencialCartao']
        
      
      end

      
      if attributes[:'idConta']
        
        
        self.id_conta = attributes[:'idConta']
        
      
      end

      
      if attributes[:'idStatus']
        
        
        self.id_status = attributes[:'idStatus']
        
      
      end

      
      if attributes[:'dataStatus']
        
        
        self.data_status = attributes[:'dataStatus']
        
      
      end

      
      if attributes[:'idEstagio']
        
        
        self.id_estagio = attributes[:'idEstagio']
        
      
      end

      
      if attributes[:'dataEstagio']
        
        
        self.data_estagio = attributes[:'dataEstagio']
        
      
      end

      
      if attributes[:'numeroBin']
        
        
        self.numero_bin = attributes[:'numeroBin']
        
      
      end

      
      if attributes[:'numeroCartao']
        
        
        self.numero_cartao = attributes[:'numeroCartao']
        
      
      end

      
      if attributes[:'numeroCartaoHash']
        
        
        self.numero_cartao_hash = attributes[:'numeroCartaoHash']
        
      
      end

      
      if attributes[:'numeroCartaoCriptografado']
        
        
        self.numero_cartao_criptografado = attributes[:'numeroCartaoCriptografado']
        
      
      end

      
      if attributes[:'dataEmissao']
        
        
        self.data_emissao = attributes[:'dataEmissao']
        
      
      end

      
      if attributes[:'dataValidade']
        
        
        self.data_validade = attributes[:'dataValidade']
        
      
      end

      
      if attributes[:'cartaoVirtual']
        
        
        self.cartao_virtual = attributes[:'cartaoVirtual']
        
      
      end

      
      if attributes[:'impressaoAvulsa']
        
        
        self.impressao_avulsa = attributes[:'impressaoAvulsa']
        
      
      end

      
      if attributes[:'dataImpressao']
        
        
        self.data_impressao = attributes[:'dataImpressao']
        
      
      end

      
      if attributes[:'nomeArquivoImpressao']
        
        
        self.nome_arquivo_impressao = attributes[:'nomeArquivoImpressao']
        
      
      end

      
      if attributes[:'descricaoTipoCartao']
        
        
        self.descricao_tipo_cartao = attributes[:'descricaoTipoCartao']
        
      
      end

      
      if attributes[:'idProduto']
        
        
        self.id_produto = attributes[:'idProduto']
        
      
      end

      
      if attributes[:'nomeImpresso']
        
        
        self.nome_impresso = attributes[:'nomeImpresso']
        
      
      end

      
      if attributes[:'tipoCartao']
        
        
        self.tipo_cartao = attributes[:'tipoCartao']
        
      
      end

      
      if attributes[:'codigoDesbloqueio']
        
        
        self.codigo_desbloqueio = attributes[:'codigoDesbloqueio']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          flag_titular == o.flag_titular &&
          id_pessoa == o.id_pessoa &&
          sequencial_cartao == o.sequencial_cartao &&
          id_conta == o.id_conta &&
          id_status == o.id_status &&
          data_status == o.data_status &&
          id_estagio == o.id_estagio &&
          data_estagio == o.data_estagio &&
          numero_bin == o.numero_bin &&
          numero_cartao == o.numero_cartao &&
          numero_cartao_hash == o.numero_cartao_hash &&
          numero_cartao_criptografado == o.numero_cartao_criptografado &&
          data_emissao == o.data_emissao &&
          data_validade == o.data_validade &&
          cartao_virtual == o.cartao_virtual &&
          impressao_avulsa == o.impressao_avulsa &&
          data_impressao == o.data_impressao &&
          nome_arquivo_impressao == o.nome_arquivo_impressao &&
          descricao_tipo_cartao == o.descricao_tipo_cartao &&
          id_produto == o.id_produto &&
          nome_impresso == o.nome_impresso &&
          tipo_cartao == o.tipo_cartao &&
          codigo_desbloqueio == o.codigo_desbloqueio
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, flag_titular, id_pessoa, sequencial_cartao, id_conta, id_status, data_status, id_estagio, data_estagio, numero_bin, numero_cartao, numero_cartao_hash, numero_cartao_criptografado, data_emissao, data_validade, cartao_virtual, impressao_avulsa, data_impressao, nome_arquivo_impressao, descricao_tipo_cartao, id_produto, nome_impresso, tipo_cartao, codigo_desbloqueio].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end


end
