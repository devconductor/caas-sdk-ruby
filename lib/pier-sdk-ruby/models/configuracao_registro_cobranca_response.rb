=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'date'

module Pier
  # {{{configuracao_registro_cobranca_response_description}}}
  class ConfiguracaoRegistroCobrancaResponse
    # {{{configuracao_registro_cobranca_response_id_value}}}
    attr_accessor :id

    # {{{configuracao_registro_cobranca_response_id_emissor_value}}}
    attr_accessor :id_emissor

    # {{{configuracao_registro_cobranca_response_codigo_banco_value}}}
    attr_accessor :codigo_banco

    # {{{configuracao_registro_cobranca_response_uri_value}}}
    attr_accessor :uri

    # {{{configuracao_registro_cobranca_response_key_store_name_value}}}
    attr_accessor :key_store_name

    # {{{configuracao_registro_cobranca_response_key_store_password_value}}}
    attr_accessor :key_store_password

    # {{{configuracao_registro_cobranca_response_keystore_alias_value}}}
    attr_accessor :keystore_alias

    # {{{configuracao_registro_cobranca_response_key_store_private_key_password_value}}}
    attr_accessor :key_store_private_key_password

    # {{{configuracao_registro_cobranca_response_type_keystore_value}}}
    attr_accessor :type_keystore

    # {{{configuracao_registro_cobranca_response_trust_store_name_value}}}
    attr_accessor :trust_store_name

    # {{{configuracao_registro_cobranca_response_trust_store_password_value}}}
    attr_accessor :trust_store_password

    # {{{configuracao_registro_cobranca_response_truststore_alias_value}}}
    attr_accessor :truststore_alias

    # {{{configuracao_registro_cobranca_response_type_truststore_value}}}
    attr_accessor :type_truststore

    # {{{configuracao_registro_cobranca_response_uri_adicional_value}}}
    attr_accessor :uri_adicional

    # {{{configuracao_registro_cobranca_response_status_value}}}
    attr_accessor :status

    # {{{configuracao_registro_cobranca_persist_secret_value}}}
    attr_accessor :secret

    # {{{configuracao_registro_cobranca_persist_client_id_value}}}
    attr_accessor :client_id


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'id',
        
        :'id_emissor' => :'idEmissor',
        
        :'codigo_banco' => :'codigoBanco',
        
        :'uri' => :'uri',
        
        :'key_store_name' => :'keyStoreName',
        
        :'key_store_password' => :'keyStorePassword',
        
        :'keystore_alias' => :'keystoreAlias',
        
        :'key_store_private_key_password' => :'keyStorePrivateKeyPassword',
        
        :'type_keystore' => :'typeKeystore',
        
        :'trust_store_name' => :'trustStoreName',
        
        :'trust_store_password' => :'trustStorePassword',
        
        :'truststore_alias' => :'truststoreAlias',
        
        :'type_truststore' => :'typeTruststore',
        
        :'uri_adicional' => :'uriAdicional',
        
        :'status' => :'status',
        
        :'secret' => :'secret',
        
        :'client_id' => :'clientID'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'id' => :'Integer',
        
        :'id_emissor' => :'Integer',
        
        :'codigo_banco' => :'Integer',
        
        :'uri' => :'String',
        
        :'key_store_name' => :'String',
        
        :'key_store_password' => :'String',
        
        :'keystore_alias' => :'String',
        
        :'key_store_private_key_password' => :'String',
        
        :'type_keystore' => :'String',
        
        :'trust_store_name' => :'String',
        
        :'trust_store_password' => :'String',
        
        :'truststore_alias' => :'String',
        
        :'type_truststore' => :'String',
        
        :'uri_adicional' => :'String',
        
        :'status' => :'String',
        
        :'secret' => :'String',
        
        :'client_id' => :'String'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'id']
        
        
        self.id = attributes[:'id']
        
      
      end

      
      if attributes[:'idEmissor']
        
        
        self.id_emissor = attributes[:'idEmissor']
        
      
      end

      
      if attributes[:'codigoBanco']
        
        
        self.codigo_banco = attributes[:'codigoBanco']
        
      
      end

      
      if attributes[:'uri']
        
        
        self.uri = attributes[:'uri']
        
      
      end

      
      if attributes[:'keyStoreName']
        
        
        self.key_store_name = attributes[:'keyStoreName']
        
      
      end

      
      if attributes[:'keyStorePassword']
        
        
        self.key_store_password = attributes[:'keyStorePassword']
        
      
      end

      
      if attributes[:'keystoreAlias']
        
        
        self.keystore_alias = attributes[:'keystoreAlias']
        
      
      end

      
      if attributes[:'keyStorePrivateKeyPassword']
        
        
        self.key_store_private_key_password = attributes[:'keyStorePrivateKeyPassword']
        
      
      end

      
      if attributes[:'typeKeystore']
        
        
        self.type_keystore = attributes[:'typeKeystore']
        
      
      end

      
      if attributes[:'trustStoreName']
        
        
        self.trust_store_name = attributes[:'trustStoreName']
        
      
      end

      
      if attributes[:'trustStorePassword']
        
        
        self.trust_store_password = attributes[:'trustStorePassword']
        
      
      end

      
      if attributes[:'truststoreAlias']
        
        
        self.truststore_alias = attributes[:'truststoreAlias']
        
      
      end

      
      if attributes[:'typeTruststore']
        
        
        self.type_truststore = attributes[:'typeTruststore']
        
      
      end

      
      if attributes[:'uriAdicional']
        
        
        self.uri_adicional = attributes[:'uriAdicional']
        
      
      end

      
      if attributes[:'status']
        
        
        self.status = attributes[:'status']
        
      
      end

      
      if attributes[:'secret']
        
        
        self.secret = attributes[:'secret']
        
      
      end

      
      if attributes[:'clientID']
        
        
        self.client_id = attributes[:'clientID']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      allowed_values = ["INATIVO", "ATIVO"]
      if @status && !allowed_values.include?(@status)
        return false
      end
      
      
      
      
      if @secret.nil?
        return false
      end

      
      
      allowed_values = ["INATIVO", "ATIVO"]
      if @secret && !allowed_values.include?(@secret)
        return false
      end
      
      
      
      
      if @client_id.nil?
        return false
      end

      
      
      allowed_values = ["INATIVO", "ATIVO"]
      if @client_id && !allowed_values.include?(@client_id)
        return false
      end
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      allowed_values = ["INATIVO", "ATIVO"]
      if status && !allowed_values.include?(status)
        fail ArgumentError, "invalid value for 'status', must be one of #{allowed_values}."
      end
      @status = status
    end

    
    
    
    
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secret Object to be assigned
    def secret=(secret)
      allowed_values = ["INATIVO", "ATIVO"]
      if secret && !allowed_values.include?(secret)
        fail ArgumentError, "invalid value for 'secret', must be one of #{allowed_values}."
      end
      @secret = secret
    end

    
    
    
    
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] client_id Object to be assigned
    def client_id=(client_id)
      allowed_values = ["INATIVO", "ATIVO"]
      if client_id && !allowed_values.include?(client_id)
        fail ArgumentError, "invalid value for 'client_id', must be one of #{allowed_values}."
      end
      @client_id = client_id
    end

    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          id_emissor == o.id_emissor &&
          codigo_banco == o.codigo_banco &&
          uri == o.uri &&
          key_store_name == o.key_store_name &&
          key_store_password == o.key_store_password &&
          keystore_alias == o.keystore_alias &&
          key_store_private_key_password == o.key_store_private_key_password &&
          type_keystore == o.type_keystore &&
          trust_store_name == o.trust_store_name &&
          trust_store_password == o.trust_store_password &&
          truststore_alias == o.truststore_alias &&
          type_truststore == o.type_truststore &&
          uri_adicional == o.uri_adicional &&
          status == o.status &&
          secret == o.secret &&
          client_id == o.client_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, id_emissor, codigo_banco, uri, key_store_name, key_store_password, keystore_alias, key_store_private_key_password, type_keystore, trust_store_name, trust_store_password, truststore_alias, type_truststore, uri_adicional, status, secret, client_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end


end
