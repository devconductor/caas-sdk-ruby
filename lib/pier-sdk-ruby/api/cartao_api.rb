=begin
PIER Labs

Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require "uri"

module Pier
  class CartaoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Realiza a altera\u00E7\u00E3o da senha de um Cart\u00E3o
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que o portador de um determinado cart\u00E3o possa definir uma senha a sua escolha.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param senha Senha para ser cadastrada ou alterada.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def alterar_alterar_senha_using_put(id, senha, opts = {})
      data, _status_code, _headers = alterar_alterar_senha_using_put_with_http_info(id, senha, opts)
      return data
    end

    # Realiza a altera\u00E7\u00E3o da senha de um Cart\u00E3o
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que o portador de um determinado cart\u00E3o possa definir uma senha a sua escolha.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param senha Senha para ser cadastrada ou alterada.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def alterar_alterar_senha_using_put_with_http_info(id, senha, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.alterar_alterar_senha_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.alterar_alterar_senha_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha' is set
      fail ArgumentError, "Missing the required parameter 'senha' when calling CartaoApi.alterar_alterar_senha_using_put" if senha.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/alterar-senha".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'senha'] = senha

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#alterar_alterar_senha_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza a altera\u00E7\u00E3o do Status de Impress\u00E3o do Cart\u00E3o
    # Este m\u00E9todo permite que uma Aplica\u00E7\u00E3o que realize a impress\u00E3o de cart\u00F5es possa indicar que um determinado idCartao fora impresso ou est\u00E1 em processo de impress\u00E3o. Para isso, basta informar o respectivo c\u00F3digo de identifica\u00E7\u00E3o do cart\u00E3o (id) que deseja ter seu um determinado id_status_impressao atribu\u00EDdo a ele. Por padr\u00E3o, cart\u00F5es provis\u00F3rios ou que j\u00E1 tenham sido inclu\u00EDdos em um arquivo para impress\u00E3o via gr\u00E1fica ter\u00E3o esta requisi\u00E7\u00E3o negada, se utilizada.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param id_status_impressao C\u00F3digo de Identifica\u00E7\u00E3o do Status Impress\u00E3o (Id).
    # @param [Hash] opts the optional parameters
    # @return [HistoricoImpressaoCartaoResponse]
    def alterar_status_impressao_using_put(id, id_status_impressao, opts = {})
      data, _status_code, _headers = alterar_status_impressao_using_put_with_http_info(id, id_status_impressao, opts)
      return data
    end

    # Realiza a altera\u00E7\u00E3o do Status de Impress\u00E3o do Cart\u00E3o
    # Este m\u00E9todo permite que uma Aplica\u00E7\u00E3o que realize a impress\u00E3o de cart\u00F5es possa indicar que um determinado idCartao fora impresso ou est\u00E1 em processo de impress\u00E3o. Para isso, basta informar o respectivo c\u00F3digo de identifica\u00E7\u00E3o do cart\u00E3o (id) que deseja ter seu um determinado id_status_impressao atribu\u00EDdo a ele. Por padr\u00E3o, cart\u00F5es provis\u00F3rios ou que j\u00E1 tenham sido inclu\u00EDdos em um arquivo para impress\u00E3o via gr\u00E1fica ter\u00E3o esta requisi\u00E7\u00E3o negada, se utilizada.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param id_status_impressao C\u00F3digo de Identifica\u00E7\u00E3o do Status Impress\u00E3o (Id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(HistoricoImpressaoCartaoResponse, Fixnum, Hash)>] HistoricoImpressaoCartaoResponse data, response status code and response headers
    def alterar_status_impressao_using_put_with_http_info(id, id_status_impressao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.alterar_status_impressao_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.alterar_status_impressao_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_status_impressao' is set
      fail ArgumentError, "Missing the required parameter 'id_status_impressao' when calling CartaoApi.alterar_status_impressao_using_put" if id_status_impressao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/alterar-status-impressao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_status_impressao'] = id_status_impressao

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HistoricoImpressaoCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#alterar_status_impressao_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza a atribui\u00E7\u00E3o de um cart\u00E3o pr\u00E9-pago a uma pessoa
    # Esta m\u00E9todo permite que um cart\u00E3o pr\u00E9-pago impresso de forma avulsa e an\u00F4nimo seja atribu\u00EDdo a uma pessoa para que esta passe a ser a portadora titular dele.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id)
    # @param id_pessoa C\u00F3digo de identifica\u00E7\u00E3o de uma Pessoa (id).
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def atribuir_pessoa_using_put(id, id_pessoa, opts = {})
      data, _status_code, _headers = atribuir_pessoa_using_put_with_http_info(id, id_pessoa, opts)
      return data
    end

    # Realiza a atribui\u00E7\u00E3o de um cart\u00E3o pr\u00E9-pago a uma pessoa
    # Esta m\u00E9todo permite que um cart\u00E3o pr\u00E9-pago impresso de forma avulsa e an\u00F4nimo seja atribu\u00EDdo a uma pessoa para que esta passe a ser a portadora titular dele.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id)
    # @param id_pessoa C\u00F3digo de identifica\u00E7\u00E3o de uma Pessoa (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def atribuir_pessoa_using_put_with_http_info(id, id_pessoa, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.atribuir_pessoa_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.atribuir_pessoa_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_pessoa' is set
      fail ArgumentError, "Missing the required parameter 'id_pessoa' when calling CartaoApi.atribuir_pessoa_using_put" if id_pessoa.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/atribuir-titular".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_pessoa'] = id_pessoa

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#atribuir_pessoa_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza o bloqueio de um determinado Cart\u00E3o
    # Este m\u00E9todo permite a realiza\u00E7\u00E3o do bloqueio (tempor\u00E1rio) ou do cancelamento (definitivo) de um determinado cart\u00E3o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id). Para isso, \u00E9 preciso informar qual o motivo deste bloqueio que nada mais \u00E9 do que atribuir um novo StatusCartao para ele dentre as op\u00E7\u00F5es praticadas pelo emissor.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param id_status C\u00F3digo de Identifica\u00E7\u00E3o do Novo Status Cart\u00E3o.
    # @param observacao Texto informando uma observa\u00E7\u00E3o sobre o bloqueio.
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def bloquear_using_post(id, id_status, observacao, opts = {})
      data, _status_code, _headers = bloquear_using_post_with_http_info(id, id_status, observacao, opts)
      return data
    end

    # Realiza o bloqueio de um determinado Cart\u00E3o
    # Este m\u00E9todo permite a realiza\u00E7\u00E3o do bloqueio (tempor\u00E1rio) ou do cancelamento (definitivo) de um determinado cart\u00E3o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id). Para isso, \u00E9 preciso informar qual o motivo deste bloqueio que nada mais \u00E9 do que atribuir um novo StatusCartao para ele dentre as op\u00E7\u00F5es praticadas pelo emissor.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param id_status C\u00F3digo de Identifica\u00E7\u00E3o do Novo Status Cart\u00E3o.
    # @param observacao Texto informando uma observa\u00E7\u00E3o sobre o bloqueio.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def bloquear_using_post_with_http_info(id, id_status, observacao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.bloquear_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.bloquear_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_status' is set
      fail ArgumentError, "Missing the required parameter 'id_status' when calling CartaoApi.bloquear_using_post" if id_status.nil?
      
      
      
      
      
      
      # verify the required parameter 'observacao' is set
      fail ArgumentError, "Missing the required parameter 'observacao' when calling CartaoApi.bloquear_using_post" if observacao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/bloquear".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_status'] = id_status
      query_params[:'observacao'] = observacao

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#bloquear_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza o cadastro da senha de um Cart\u00E3o
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que o portador de um determinado cart\u00E3o possa definir uma senha a sua escolha.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param senha Senha para ser cadastrada ou alterada.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def cadastrar_alterar_senha_using_post(id, senha, opts = {})
      data, _status_code, _headers = cadastrar_alterar_senha_using_post_with_http_info(id, senha, opts)
      return data
    end

    # Realiza o cadastro da senha de um Cart\u00E3o
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que o portador de um determinado cart\u00E3o possa definir uma senha a sua escolha.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param senha Senha para ser cadastrada ou alterada.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def cadastrar_alterar_senha_using_post_with_http_info(id, senha, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.cadastrar_alterar_senha_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.cadastrar_alterar_senha_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha' is set
      fail ArgumentError, "Missing the required parameter 'senha' when calling CartaoApi.cadastrar_alterar_senha_using_post" if senha.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/cadastrar-senha".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'senha'] = senha

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#cadastrar_alterar_senha_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza o cancelamento de um determinado Cart\u00E3o
    # Este m\u00E9todo permite a realiza\u00E7\u00E3o cancelamento de um determinado cart\u00E3o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id). Para isso, \u00E9 preciso informar qual o motivo deste bloqueio que nada mais \u00E9 do que atribuir um novo StatusCartao para ele dentre as op\u00E7\u00F5es praticadas pelo emissor.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param id_status C\u00F3digo de Identifica\u00E7\u00E3o do Novo Status Cart\u00E3o.
    # @param observacao Texto informando uma observa\u00E7\u00E3o sobre o cancelamento.
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def cancelar_using_post(id, id_status, observacao, opts = {})
      data, _status_code, _headers = cancelar_using_post_with_http_info(id, id_status, observacao, opts)
      return data
    end

    # Realiza o cancelamento de um determinado Cart\u00E3o
    # Este m\u00E9todo permite a realiza\u00E7\u00E3o cancelamento de um determinado cart\u00E3o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id). Para isso, \u00E9 preciso informar qual o motivo deste bloqueio que nada mais \u00E9 do que atribuir um novo StatusCartao para ele dentre as op\u00E7\u00F5es praticadas pelo emissor.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param id_status C\u00F3digo de Identifica\u00E7\u00E3o do Novo Status Cart\u00E3o.
    # @param observacao Texto informando uma observa\u00E7\u00E3o sobre o cancelamento.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def cancelar_using_post_with_http_info(id, id_status, observacao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.cancelar_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.cancelar_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_status' is set
      fail ArgumentError, "Missing the required parameter 'id_status' when calling CartaoApi.cancelar_using_post" if id_status.nil?
      
      
      
      
      
      
      # verify the required parameter 'observacao' is set
      fail ArgumentError, "Missing the required parameter 'observacao' when calling CartaoApi.cancelar_using_post" if observacao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/cancelar".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_status'] = id_status
      query_params[:'observacao'] = observacao

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#cancelar_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar os dados de impress\u00E3o de um Cart\u00E3o
    # Esse recurso permite consultar os dados de impress\u00E3o de um cart\u00E3o
    # @param id C\u00F3digo de identifica\u00E7\u00E3o do cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [DadosCartaoImpressaoResponse]
    def consultar_cartao_impressao_using_get(id, opts = {})
      data, _status_code, _headers = consultar_cartao_impressao_using_get_with_http_info(id, opts)
      return data
    end

    # Consultar os dados de impress\u00E3o de um Cart\u00E3o
    # Esse recurso permite consultar os dados de impress\u00E3o de um cart\u00E3o
    # @param id C\u00F3digo de identifica\u00E7\u00E3o do cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(DadosCartaoImpressaoResponse, Fixnum, Hash)>] DadosCartaoImpressaoResponse data, response status code and response headers
    def consultar_cartao_impressao_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.consultar_cartao_impressao_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.consultar_cartao_impressao_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/consultar-dados-impressao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DadosCartaoImpressaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#consultar_cartao_impressao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar Detalhes do Cart\u00E3o
    # Este m\u00E9todo permite que seja consultado os dados necessarios de um cart\u00E3o para executar servi\u00E7os de autoriza\u00E7\u00E3o.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [DadosCartaoResponse]
    def consultar_dados_reais_cartao_using_get(id, opts = {})
      data, _status_code, _headers = consultar_dados_reais_cartao_using_get_with_http_info(id, opts)
      return data
    end

    # Consultar Detalhes do Cart\u00E3o
    # Este m\u00E9todo permite que seja consultado os dados necessarios de um cart\u00E3o para executar servi\u00E7os de autoriza\u00E7\u00E3o.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(DadosCartaoResponse, Fixnum, Hash)>] DadosCartaoResponse data, response status code and response headers
    def consultar_dados_reais_cartao_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.consultar_dados_reais_cartao_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.consultar_dados_reais_cartao_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/consultar-dados-reais".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DadosCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#consultar_dados_reais_cartao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apresenta os limites do Portador do Cart\u00E3o
    # Este m\u00E9todo permite consultar os Limites configurados para o Portador de um determinado Cart\u00E3o, seja ele o titular da conta ou um adicional, a partir do c\u00F3digo de identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [LimiteDisponibilidadeResponse]
    def consultar_limite_disponibilidade_using_get(id, opts = {})
      data, _status_code, _headers = consultar_limite_disponibilidade_using_get_with_http_info(id, opts)
      return data
    end

    # Apresenta os limites do Portador do Cart\u00E3o
    # Este m\u00E9todo permite consultar os Limites configurados para o Portador de um determinado Cart\u00E3o, seja ele o titular da conta ou um adicional, a partir do c\u00F3digo de identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(LimiteDisponibilidadeResponse, Fixnum, Hash)>] LimiteDisponibilidadeResponse data, response status code and response headers
    def consultar_limite_disponibilidade_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.consultar_limite_disponibilidade_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.consultar_limite_disponibilidade_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/limites-disponibilidades".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LimiteDisponibilidadeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#consultar_limite_disponibilidade_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Permite consultar um determinado Lote de Cart\u00F5es Pr\u00E9-Pago
    # Este m\u00E9todo permite consultar os cart\u00F5es pr\u00E9-pagos existentes na base do emissor atrav\u00E9s do id do lote.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do lote de cart\u00F5es (id)
    # @param [Hash] opts the optional parameters
    # @return [LoteCartoesPrePagosResponse]
    def consultar_lotes_cartoes_pre_pagos_using_get(id, opts = {})
      data, _status_code, _headers = consultar_lotes_cartoes_pre_pagos_using_get_with_http_info(id, opts)
      return data
    end

    # Permite consultar um determinado Lote de Cart\u00F5es Pr\u00E9-Pago
    # Este m\u00E9todo permite consultar os cart\u00F5es pr\u00E9-pagos existentes na base do emissor atrav\u00E9s do id do lote.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do lote de cart\u00F5es (id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(LoteCartoesPrePagosResponse, Fixnum, Hash)>] LoteCartoesPrePagosResponse data, response status code and response headers
    def consultar_lotes_cartoes_pre_pagos_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.consultar_lotes_cartoes_pre_pagos_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.consultar_lotes_cartoes_pre_pagos_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/lotes-cartoes-pre-pagos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LoteCartoesPrePagosResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#consultar_lotes_cartoes_pre_pagos_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apresenta os dados do Portador do Cart\u00E3o
    # Este m\u00E9todo permite consultar as informa\u00E7\u00F5es do Portador de um determinado Cart\u00E3o a partir do c\u00F3digo de identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [PortadorResponse]
    def consultar_portador_using_get(id, opts = {})
      data, _status_code, _headers = consultar_portador_using_get_with_http_info(id, opts)
      return data
    end

    # Apresenta os dados do Portador do Cart\u00E3o
    # Este m\u00E9todo permite consultar as informa\u00E7\u00F5es do Portador de um determinado Cart\u00E3o a partir do c\u00F3digo de identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortadorResponse, Fixnum, Hash)>] PortadorResponse data, response status code and response headers
    def consultar_portador_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.consultar_portador_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.consultar_portador_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/portadores".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortadorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#consultar_portador_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apresenta os dados de um determinado Cart\u00E3o
    # Este m\u00E9todo permite consultar as informa\u00E7\u00F5es b\u00E1sicas de um determinado Cart\u00E3o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [CartaoDetalheResponse]
    def consultar_using_get9(id, opts = {})
      data, _status_code, _headers = consultar_using_get9_with_http_info(id, opts)
      return data
    end

    # Apresenta os dados de um determinado Cart\u00E3o
    # Este m\u00E9todo permite consultar as informa\u00E7\u00F5es b\u00E1sicas de um determinado Cart\u00E3o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoDetalheResponse, Fixnum, Hash)>] CartaoDetalheResponse data, response status code and response headers
    def consultar_using_get9_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.consultar_using_get9 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.consultar_using_get9" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#consultar_using_get9\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza o desbloqueio de um cart\u00E3o bloqueado por tentativas de senha incorretas
    # Este m\u00E9todo permite que seja desbloqueado um determinado cart\u00E3o que foi bloqueado por tentativas de senha incorretas, a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def desbloquear_senha_incorreta_using_post(id, opts = {})
      data, _status_code, _headers = desbloquear_senha_incorreta_using_post_with_http_info(id, opts)
      return data
    end

    # Realiza o desbloqueio de um cart\u00E3o bloqueado por tentativas de senha incorretas
    # Este m\u00E9todo permite que seja desbloqueado um determinado cart\u00E3o que foi bloqueado por tentativas de senha incorretas, a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def desbloquear_senha_incorreta_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.desbloquear_senha_incorreta_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.desbloquear_senha_incorreta_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/desbloquear-senha-incorreta".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#desbloquear_senha_incorreta_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza o desbloqueio de um determinado Cart\u00E3o
    # Este m\u00E9todo permite que seja desbloqueado um determinado cart\u00E3o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def desbloquear_using_post(id, opts = {})
      data, _status_code, _headers = desbloquear_using_post_with_http_info(id, opts)
      return data
    end

    # Realiza o desbloqueio de um determinado Cart\u00E3o
    # Este m\u00E9todo permite que seja desbloqueado um determinado cart\u00E3o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def desbloquear_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.desbloquear_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.desbloquear_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/desbloquear".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#desbloquear_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Permite gerar um novo Lote de Cart\u00F5es Pr\u00E9-Pago
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que os Emissores gerem uma determinada quantidade de Cart\u00F5es Pr\u00E9-Pagos, de forma n\u00E3o nominal, os quais poder\u00E3o ser comercializados e posteriormente vinculados a um cliente que o adquirir. Para isso, al\u00E9m de definir quantos cart\u00F5es dever\u00E3o ser gerados, ser\u00E1 poss\u00EDvel definir qual a Origem Comercial, o Produto, o Tipo do Cart\u00E3o, a Imagem e o Endere\u00E7o para entrega dos Cart\u00F5es presentes no lote gerado. Por padr\u00E3o, todos os cart\u00F5es ser\u00E3o associados a um idPessoa fict\u00EDcio e receber\u00E1 um idConta \u00FAnico para cada um deles. Feito isso, os Cart\u00F5es gerados por esta opera\u00E7\u00E3o seguir\u00E3o os mesmos processos de impress\u00E3o via gr\u00E1fica previamente definidos entre o Emissor e a Conductor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_origem_comercial C\u00F3digo de Identifica\u00E7\u00E3o da Origem Comercial (id).
    # @option opts [Integer] :id_produto C\u00F3digo de Identifica\u00E7\u00E3o do Produto (id).
    # @option opts [Integer] :id_tipo_cartao C\u00F3digo de Identifica\u00E7\u00E3o do Tipo do Cart\u00E3o (id).
    # @option opts [Integer] :id_imagem C\u00F3digo de Identifica\u00E7\u00E3o da Imagem (id).
    # @option opts [Integer] :id_endereco C\u00F3digo de Identifica\u00E7\u00E3o do Endere\u00E7o (id).
    # @option opts [Integer] :quantidade_cartoes N\u00FAmero de cart\u00F5es existentes no Lote.
    # @option opts [String] :identificador_externo N\u00FAmero de identifica\u00E7\u00E3o externo (utilizado pelo emissor).
    # @return [LoteCartoesPrePagosResponse]
    def gerar_lotes_cartoes_pre_pagos_using_post(opts = {})
      data, _status_code, _headers = gerar_lotes_cartoes_pre_pagos_using_post_with_http_info(opts)
      return data
    end

    # Permite gerar um novo Lote de Cart\u00F5es Pr\u00E9-Pago
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que os Emissores gerem uma determinada quantidade de Cart\u00F5es Pr\u00E9-Pagos, de forma n\u00E3o nominal, os quais poder\u00E3o ser comercializados e posteriormente vinculados a um cliente que o adquirir. Para isso, al\u00E9m de definir quantos cart\u00F5es dever\u00E3o ser gerados, ser\u00E1 poss\u00EDvel definir qual a Origem Comercial, o Produto, o Tipo do Cart\u00E3o, a Imagem e o Endere\u00E7o para entrega dos Cart\u00F5es presentes no lote gerado. Por padr\u00E3o, todos os cart\u00F5es ser\u00E3o associados a um idPessoa fict\u00EDcio e receber\u00E1 um idConta \u00FAnico para cada um deles. Feito isso, os Cart\u00F5es gerados por esta opera\u00E7\u00E3o seguir\u00E3o os mesmos processos de impress\u00E3o via gr\u00E1fica previamente definidos entre o Emissor e a Conductor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_origem_comercial C\u00F3digo de Identifica\u00E7\u00E3o da Origem Comercial (id).
    # @option opts [Integer] :id_produto C\u00F3digo de Identifica\u00E7\u00E3o do Produto (id).
    # @option opts [Integer] :id_tipo_cartao C\u00F3digo de Identifica\u00E7\u00E3o do Tipo do Cart\u00E3o (id).
    # @option opts [Integer] :id_imagem C\u00F3digo de Identifica\u00E7\u00E3o da Imagem (id).
    # @option opts [Integer] :id_endereco C\u00F3digo de Identifica\u00E7\u00E3o do Endere\u00E7o (id).
    # @option opts [Integer] :quantidade_cartoes N\u00FAmero de cart\u00F5es existentes no Lote.
    # @option opts [String] :identificador_externo N\u00FAmero de identifica\u00E7\u00E3o externo (utilizado pelo emissor).
    # @return [Array<(LoteCartoesPrePagosResponse, Fixnum, Hash)>] LoteCartoesPrePagosResponse data, response status code and response headers
    def gerar_lotes_cartoes_pre_pagos_using_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.gerar_lotes_cartoes_pre_pagos_using_post ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/lotes-cartoes-pre-pagos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idOrigemComercial'] = opts[:'id_origem_comercial'] if opts[:'id_origem_comercial']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']
      query_params[:'idTipoCartao'] = opts[:'id_tipo_cartao'] if opts[:'id_tipo_cartao']
      query_params[:'idImagem'] = opts[:'id_imagem'] if opts[:'id_imagem']
      query_params[:'idEndereco'] = opts[:'id_endereco'] if opts[:'id_endereco']
      query_params[:'quantidadeCartoes'] = opts[:'quantidade_cartoes'] if opts[:'quantidade_cartoes']
      query_params[:'identificadorExterno'] = opts[:'identificador_externo'] if opts[:'identificador_externo']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LoteCartoesPrePagosResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#gerar_lotes_cartoes_pre_pagos_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gerar uma nova via de Cart\u00E3o
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que os Emissores ou seus clientes possam solicitar a gera\u00E7\u00E3o de uma nova via de Cart\u00E3o que ser\u00E1 encaminhando para impress\u00E3o e postagem de acordo com os fluxos padr\u00F5es j\u00E1 definidos pelo emissor. Para isso, \u00E9 preciso que o cliente j\u00E1 possua um cart\u00E3o gerado e informar o C\u00F3digo de Identifica\u00E7\u00E3o deste (idCartao) para que ele possa utilizar esta opera\u00E7\u00E3o. Assim, esta funcionalidade se aplica apenas para a gera\u00E7\u00E3o de cart\u00F5es f\u00EDsicos.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id)
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def gerar_nova_via_using_post(id, opts = {})
      data, _status_code, _headers = gerar_nova_via_using_post_with_http_info(id, opts)
      return data
    end

    # Gerar uma nova via de Cart\u00E3o
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que os Emissores ou seus clientes possam solicitar a gera\u00E7\u00E3o de uma nova via de Cart\u00E3o que ser\u00E1 encaminhando para impress\u00E3o e postagem de acordo com os fluxos padr\u00F5es j\u00E1 definidos pelo emissor. Para isso, \u00E9 preciso que o cliente j\u00E1 possua um cart\u00E3o gerado e informar o C\u00F3digo de Identifica\u00E7\u00E3o deste (idCartao) para que ele possa utilizar esta opera\u00E7\u00E3o. Assim, esta funcionalidade se aplica apenas para a gera\u00E7\u00E3o de cart\u00F5es f\u00EDsicos.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def gerar_nova_via_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.gerar_nova_via_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.gerar_nova_via_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/gerar-nova-via".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#gerar_nova_via_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adiciona tarifa de ajuste da segunda via do cart\u00E3o
    # Esse recurso permite adicionar tar\u00EDfa de ajuste pela emiss\u00E3o da segunda via do cart\u00E3o.
    # @param id C\u00F3digo de identifica\u00E7\u00E3o do cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def lancar_tarifa_segunda_via_using_post(id, opts = {})
      data, _status_code, _headers = lancar_tarifa_segunda_via_using_post_with_http_info(id, opts)
      return data
    end

    # Adiciona tarifa de ajuste da segunda via do cart\u00E3o
    # Esse recurso permite adicionar tar\u00EDfa de ajuste pela emiss\u00E3o da segunda via do cart\u00E3o.
    # @param id C\u00F3digo de identifica\u00E7\u00E3o do cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def lancar_tarifa_segunda_via_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.lancar_tarifa_segunda_via_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.lancar_tarifa_segunda_via_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/lancar-tarifa-reemissao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#lancar_tarifa_segunda_via_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Permite listar os Lotes de Cart\u00F5es Pr\u00E9-Pago
    # Este m\u00E9todo permite que sejam listados os cart\u00F5es pr\u00E9-pagos existentes na base do emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_origem_comercial C\u00F3digo de Identifica\u00E7\u00E3o da Origem Comercial (id).
    # @option opts [Integer] :id_produto C\u00F3digo de Identifica\u00E7\u00E3o do Produto (id).
    # @option opts [Integer] :id_tipo_cartao C\u00F3digo de Identifica\u00E7\u00E3o do Tipo do Cart\u00E3o (id).
    # @option opts [Integer] :id_imagem C\u00F3digo de Identifica\u00E7\u00E3o da Imagem (id).
    # @option opts [Integer] :id_endereco C\u00F3digo de Identifica\u00E7\u00E3o do Endere\u00E7o (id).
    # @option opts [Integer] :quantidade_cartoes N\u00FAmero de cart\u00F5es existentes no Lote.
    # @option opts [String] :data_cadastro Data de Cadastro do Lote de Cart\u00F5es N\u00E3o Nominais.
    # @option opts [String] :usuario_cadastro Nome do Usu\u00E1rio que criou o Lote.
    # @option opts [Integer] :status_processamento Indica o Status de Processamento do Lote.
    # @option opts [String] :identificador_externo N\u00FAmero de identifica\u00E7\u00E3o externo (utilizado pelo emissor).
    # @return [PageLoteCartoesPrePagosResponse]
    def listar_lotes_cartoes_pre_pagos_using_get(opts = {})
      data, _status_code, _headers = listar_lotes_cartoes_pre_pagos_using_get_with_http_info(opts)
      return data
    end

    # Permite listar os Lotes de Cart\u00F5es Pr\u00E9-Pago
    # Este m\u00E9todo permite que sejam listados os cart\u00F5es pr\u00E9-pagos existentes na base do emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_origem_comercial C\u00F3digo de Identifica\u00E7\u00E3o da Origem Comercial (id).
    # @option opts [Integer] :id_produto C\u00F3digo de Identifica\u00E7\u00E3o do Produto (id).
    # @option opts [Integer] :id_tipo_cartao C\u00F3digo de Identifica\u00E7\u00E3o do Tipo do Cart\u00E3o (id).
    # @option opts [Integer] :id_imagem C\u00F3digo de Identifica\u00E7\u00E3o da Imagem (id).
    # @option opts [Integer] :id_endereco C\u00F3digo de Identifica\u00E7\u00E3o do Endere\u00E7o (id).
    # @option opts [Integer] :quantidade_cartoes N\u00FAmero de cart\u00F5es existentes no Lote.
    # @option opts [String] :data_cadastro Data de Cadastro do Lote de Cart\u00F5es N\u00E3o Nominais.
    # @option opts [String] :usuario_cadastro Nome do Usu\u00E1rio que criou o Lote.
    # @option opts [Integer] :status_processamento Indica o Status de Processamento do Lote.
    # @option opts [String] :identificador_externo N\u00FAmero de identifica\u00E7\u00E3o externo (utilizado pelo emissor).
    # @return [Array<(PageLoteCartoesPrePagosResponse, Fixnum, Hash)>] PageLoteCartoesPrePagosResponse data, response status code and response headers
    def listar_lotes_cartoes_pre_pagos_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.listar_lotes_cartoes_pre_pagos_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/lotes-cartoes-pre-pagos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idOrigemComercial'] = opts[:'id_origem_comercial'] if opts[:'id_origem_comercial']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']
      query_params[:'idTipoCartao'] = opts[:'id_tipo_cartao'] if opts[:'id_tipo_cartao']
      query_params[:'idImagem'] = opts[:'id_imagem'] if opts[:'id_imagem']
      query_params[:'idEndereco'] = opts[:'id_endereco'] if opts[:'id_endereco']
      query_params[:'quantidadeCartoes'] = opts[:'quantidade_cartoes'] if opts[:'quantidade_cartoes']
      query_params[:'dataCadastro'] = opts[:'data_cadastro'] if opts[:'data_cadastro']
      query_params[:'usuarioCadastro'] = opts[:'usuario_cadastro'] if opts[:'usuario_cadastro']
      query_params[:'statusProcessamento'] = opts[:'status_processamento'] if opts[:'status_processamento']
      query_params[:'identificadorExterno'] = opts[:'identificador_externo'] if opts[:'identificador_externo']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageLoteCartoesPrePagosResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#listar_lotes_cartoes_pre_pagos_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista os Cart\u00F5es gerados pelo Emissor
    # Este m\u00E9todo permite que sejam listados os cart\u00F5es existentes na base do emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_status_cartao C\u00F3digo de Identifica\u00E7\u00E3o do Status do Cart\u00E3o (id).
    # @option opts [Integer] :id_estagio_cartao C\u00F3digo de Identifica\u00E7\u00E3o do Est\u00E1gio de Impress\u00E3o do Cart\u00E3o (id).
    # @option opts [Integer] :id_conta C\u00F3digo de Identifica\u00E7\u00E3o da Conta a qual o cart\u00E3o pertence (id).
    # @option opts [Integer] :id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa a qual o cart\u00E3o pertence (id)
    # @option opts [Integer] :id_produto C\u00F3digo de Identifica\u00E7\u00E3o do Produto a qual o cart\u00E3o pertence (id).
    # @option opts [String] :tipo_portador Apresenta o tipo do Portador do cart\u00E3o, sendo: (&#39;T&#39;: Titular, &#39;A&#39;: Adicional).
    # @option opts [String] :numero_cartao Apresenta o n\u00FAmero do cart\u00E3o.
    # @option opts [String] :nome_impresso Apresenta o nome impresso no cart\u00E3o.
    # @option opts [String] :data_geracao Apresenta a data em que o cart\u00E3o foi gerado.
    # @option opts [String] :data_status_cartao Apresenta a data em que o idStatusCartao atual do cart\u00E3o fora aplicado, quando houver.
    # @option opts [String] :data_estagio_cartao Apresenta a data em que o idEstagioCartao atual do cart\u00E3o fora aplicado, quando houver.
    # @option opts [String] :data_validade Apresenta a data de validade do cart\u00E3o em formato yyyy-MM, quando houver.
    # @option opts [String] :data_impressao Apresenta a data em que o cart\u00E3o fora impresso, caso impress\u00E3o em loja, ou a data em que ele fora inclu\u00EDdo no arquivo para impress\u00E3o via gr\u00E1fica.
    # @option opts [String] :arquivo_impressao Apresenta o nome do arquivo onde o cart\u00E3o fora inclu\u00EDdo para impress\u00E3o por uma gr\u00E1fica, quando houver.
    # @option opts [Integer] :flag_impressao_origem_comercial Quando ativa, indica que o cart\u00E3o fora impresso na Origem Comercial.
    # @option opts [Integer] :flag_provisorio Quando ativa, indica que o cart\u00E3o \u00E9 provis\u00F3rio. Ou seja, \u00E9 um cart\u00E3o para uso tempor\u00E1rio quando se deseja permitir que o cliente transacione sem que ele tenha recebido um cart\u00E3o definitivo.
    # @option opts [String] :codigo_desbloqueio Apresenta um c\u00F3digo espec\u00EDfico para ser utilizado como vari\u00E1vel no processo de desbloqueio do cart\u00E3o para emissores que querem usar esta funcionalidade.
    # @option opts [Integer] :sequencial_cartao N\u00FAmero sequencial do cart\u00E3o
    # @return [PageCartaoResponse]
    def listar_using_get11(opts = {})
      data, _status_code, _headers = listar_using_get11_with_http_info(opts)
      return data
    end

    # Lista os Cart\u00F5es gerados pelo Emissor
    # Este m\u00E9todo permite que sejam listados os cart\u00F5es existentes na base do emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_status_cartao C\u00F3digo de Identifica\u00E7\u00E3o do Status do Cart\u00E3o (id).
    # @option opts [Integer] :id_estagio_cartao C\u00F3digo de Identifica\u00E7\u00E3o do Est\u00E1gio de Impress\u00E3o do Cart\u00E3o (id).
    # @option opts [Integer] :id_conta C\u00F3digo de Identifica\u00E7\u00E3o da Conta a qual o cart\u00E3o pertence (id).
    # @option opts [Integer] :id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa a qual o cart\u00E3o pertence (id)
    # @option opts [Integer] :id_produto C\u00F3digo de Identifica\u00E7\u00E3o do Produto a qual o cart\u00E3o pertence (id).
    # @option opts [String] :tipo_portador Apresenta o tipo do Portador do cart\u00E3o, sendo: (&#39;T&#39;: Titular, &#39;A&#39;: Adicional).
    # @option opts [String] :numero_cartao Apresenta o n\u00FAmero do cart\u00E3o.
    # @option opts [String] :nome_impresso Apresenta o nome impresso no cart\u00E3o.
    # @option opts [String] :data_geracao Apresenta a data em que o cart\u00E3o foi gerado.
    # @option opts [String] :data_status_cartao Apresenta a data em que o idStatusCartao atual do cart\u00E3o fora aplicado, quando houver.
    # @option opts [String] :data_estagio_cartao Apresenta a data em que o idEstagioCartao atual do cart\u00E3o fora aplicado, quando houver.
    # @option opts [String] :data_validade Apresenta a data de validade do cart\u00E3o em formato yyyy-MM, quando houver.
    # @option opts [String] :data_impressao Apresenta a data em que o cart\u00E3o fora impresso, caso impress\u00E3o em loja, ou a data em que ele fora inclu\u00EDdo no arquivo para impress\u00E3o via gr\u00E1fica.
    # @option opts [String] :arquivo_impressao Apresenta o nome do arquivo onde o cart\u00E3o fora inclu\u00EDdo para impress\u00E3o por uma gr\u00E1fica, quando houver.
    # @option opts [Integer] :flag_impressao_origem_comercial Quando ativa, indica que o cart\u00E3o fora impresso na Origem Comercial.
    # @option opts [Integer] :flag_provisorio Quando ativa, indica que o cart\u00E3o \u00E9 provis\u00F3rio. Ou seja, \u00E9 um cart\u00E3o para uso tempor\u00E1rio quando se deseja permitir que o cliente transacione sem que ele tenha recebido um cart\u00E3o definitivo.
    # @option opts [String] :codigo_desbloqueio Apresenta um c\u00F3digo espec\u00EDfico para ser utilizado como vari\u00E1vel no processo de desbloqueio do cart\u00E3o para emissores que querem usar esta funcionalidade.
    # @option opts [Integer] :sequencial_cartao N\u00FAmero sequencial do cart\u00E3o
    # @return [Array<(PageCartaoResponse, Fixnum, Hash)>] PageCartaoResponse data, response status code and response headers
    def listar_using_get11_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.listar_using_get11 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idStatusCartao'] = opts[:'id_status_cartao'] if opts[:'id_status_cartao']
      query_params[:'idEstagioCartao'] = opts[:'id_estagio_cartao'] if opts[:'id_estagio_cartao']
      query_params[:'idConta'] = opts[:'id_conta'] if opts[:'id_conta']
      query_params[:'idPessoa'] = opts[:'id_pessoa'] if opts[:'id_pessoa']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']
      query_params[:'tipoPortador'] = opts[:'tipo_portador'] if opts[:'tipo_portador']
      query_params[:'numeroCartao'] = opts[:'numero_cartao'] if opts[:'numero_cartao']
      query_params[:'nomeImpresso'] = opts[:'nome_impresso'] if opts[:'nome_impresso']
      query_params[:'dataGeracao'] = opts[:'data_geracao'] if opts[:'data_geracao']
      query_params[:'dataStatusCartao'] = opts[:'data_status_cartao'] if opts[:'data_status_cartao']
      query_params[:'dataEstagioCartao'] = opts[:'data_estagio_cartao'] if opts[:'data_estagio_cartao']
      query_params[:'dataValidade'] = opts[:'data_validade'] if opts[:'data_validade']
      query_params[:'dataImpressao'] = opts[:'data_impressao'] if opts[:'data_impressao']
      query_params[:'arquivoImpressao'] = opts[:'arquivo_impressao'] if opts[:'arquivo_impressao']
      query_params[:'flagImpressaoOrigemComercial'] = opts[:'flag_impressao_origem_comercial'] if opts[:'flag_impressao_origem_comercial']
      query_params[:'flagProvisorio'] = opts[:'flag_provisorio'] if opts[:'flag_provisorio']
      query_params[:'codigoDesbloqueio'] = opts[:'codigo_desbloqueio'] if opts[:'codigo_desbloqueio']
      query_params[:'sequencialCartao'] = opts[:'sequencial_cartao'] if opts[:'sequencial_cartao']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#listar_using_get11\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza a reativa\u00E7\u00E3o de um determinado Cart\u00E3o
    # Este m\u00E9todo permite a realiza\u00E7\u00E3o da reativa\u00E7\u00E3o de um determinado cart\u00E3o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [CartaoResponse]
    def reativar_using_post(id, opts = {})
      data, _status_code, _headers = reativar_using_post_with_http_info(id, opts)
      return data
    end

    # Realiza a reativa\u00E7\u00E3o de um determinado Cart\u00E3o
    # Este m\u00E9todo permite a realiza\u00E7\u00E3o da reativa\u00E7\u00E3o de um determinado cart\u00E3o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartaoResponse, Fixnum, Hash)>] CartaoResponse data, response status code and response headers
    def reativar_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.reativar_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.reativar_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/reativar".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#reativar_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validar CVV do cart\u00E3o
    # Esse recurso permite a valida\u00E7\u00E3o do cvv de um cart\u00E3o
    # @param id C\u00F3digo de identifica\u00E7\u00E3o do cart\u00E3o (id).
    # @param valida_cvv validaCVV
    # @param [Hash] opts the optional parameters
    # @return [String]
    def validar_cvv_using_post(id, valida_cvv, opts = {})
      data, _status_code, _headers = validar_cvv_using_post_with_http_info(id, valida_cvv, opts)
      return data
    end

    # Validar CVV do cart\u00E3o
    # Esse recurso permite a valida\u00E7\u00E3o do cvv de um cart\u00E3o
    # @param id C\u00F3digo de identifica\u00E7\u00E3o do cart\u00E3o (id).
    # @param valida_cvv validaCVV
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def validar_cvv_using_post_with_http_info(id, valida_cvv, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.validar_cvv_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.validar_cvv_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'valida_cvv' is set
      fail ArgumentError, "Missing the required parameter 'valida_cvv' when calling CartaoApi.validar_cvv_using_post" if valida_cvv.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/validar-cvv".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(valida_cvv)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#validar_cvv_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Permite validar os dados impressos em um cart\u00E3o bandeirado
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00E3o a partir do envio dos dados sens\u00EDveis impressos nele. A utiliza\u00E7\u00E3o desde m\u00E9todo tem diversas aplica\u00E7\u00F5es, sendo a principal delas a de Identifica\u00E7\u00E3o Positiva do Cart\u00E3o para a realiza\u00E7\u00E3o de transa\u00E7\u00F5es e-commerce ou por meio de Centrais de Atendimento Eletr\u00F4nico (URA), dentre outras.
    # @param numero_cartao N\u00FAmero do cart\u00E3o a ser validado.
    # @param nome_portador Nome do portador do cart\u00E3o
    # @param data_validade Data de validade do cart\u00E3o no formato yyyy-MM
    # @param codigo_seguranca C\u00F3digo de seguran\u00E7a do cart\u00E3o com tr\u00EAs n\u00FAmeros
    # @param [Hash] opts the optional parameters
    # @return [ValidaCartaoResponse]
    def validar_dados_impressos_bandeirado_using_get(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts = {})
      data, _status_code, _headers = validar_dados_impressos_bandeirado_using_get_with_http_info(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts)
      return data
    end

    # Permite validar os dados impressos em um cart\u00E3o bandeirado
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00E3o a partir do envio dos dados sens\u00EDveis impressos nele. A utiliza\u00E7\u00E3o desde m\u00E9todo tem diversas aplica\u00E7\u00F5es, sendo a principal delas a de Identifica\u00E7\u00E3o Positiva do Cart\u00E3o para a realiza\u00E7\u00E3o de transa\u00E7\u00F5es e-commerce ou por meio de Centrais de Atendimento Eletr\u00F4nico (URA), dentre outras.
    # @param numero_cartao N\u00FAmero do cart\u00E3o a ser validado.
    # @param nome_portador Nome do portador do cart\u00E3o
    # @param data_validade Data de validade do cart\u00E3o no formato yyyy-MM
    # @param codigo_seguranca C\u00F3digo de seguran\u00E7a do cart\u00E3o com tr\u00EAs n\u00FAmeros
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidaCartaoResponse, Fixnum, Hash)>] ValidaCartaoResponse data, response status code and response headers
    def validar_dados_impressos_bandeirado_using_get_with_http_info(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.validar_dados_impressos_bandeirado_using_get ..."
      end
      
      
      # verify the required parameter 'numero_cartao' is set
      fail ArgumentError, "Missing the required parameter 'numero_cartao' when calling CartaoApi.validar_dados_impressos_bandeirado_using_get" if numero_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'nome_portador' is set
      fail ArgumentError, "Missing the required parameter 'nome_portador' when calling CartaoApi.validar_dados_impressos_bandeirado_using_get" if nome_portador.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_validade' is set
      fail ArgumentError, "Missing the required parameter 'data_validade' when calling CartaoApi.validar_dados_impressos_bandeirado_using_get" if data_validade.nil?
      
      
      
      
      
      
      # verify the required parameter 'codigo_seguranca' is set
      fail ArgumentError, "Missing the required parameter 'codigo_seguranca' when calling CartaoApi.validar_dados_impressos_bandeirado_using_get" if codigo_seguranca.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/validar-dados-impressos-bandeirados".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'numero_cartao'] = numero_cartao
      query_params[:'nome_portador'] = nome_portador
      query_params[:'data_validade'] = data_validade
      query_params[:'codigo_seguranca'] = codigo_seguranca

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidaCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#validar_dados_impressos_bandeirado_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Permite validar os dados impressos de um cartao n\u00E3o bandeirado
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00E3o a partir do envio dos dados sens\u00EDveis impressos nele. A utiliza\u00E7\u00E3o desde m\u00E9todo tem diversas aplica\u00E7\u00F5es, sendo a principal delas a de Identifica\u00E7\u00E3o Positiva do Cart\u00E3o para a realiza\u00E7\u00E3o de transa\u00E7\u00F5es e-commerce ou por meio de Centrais de Atendimento Eletr\u00F4nico (URA), dentre outras.
    # @param numero_cartao N\u00FAmero do cart\u00E3o a ser validado.
    # @param nome_portador Nome do portador do cart\u00E3o
    # @param data_validade Data de validade do cart\u00E3o no formato yyyy-MM
    # @param codigo_seguranca C\u00F3digo de seguran\u00E7a do cart\u00E3o com tr\u00EAs n\u00FAmeros
    # @param [Hash] opts the optional parameters
    # @return [ValidaCartaoResponse]
    def validar_dados_impressos_nao_bandeirado_using_get(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts = {})
      data, _status_code, _headers = validar_dados_impressos_nao_bandeirado_using_get_with_http_info(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts)
      return data
    end

    # Permite validar os dados impressos de um cartao n\u00E3o bandeirado
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00E3o a partir do envio dos dados sens\u00EDveis impressos nele. A utiliza\u00E7\u00E3o desde m\u00E9todo tem diversas aplica\u00E7\u00F5es, sendo a principal delas a de Identifica\u00E7\u00E3o Positiva do Cart\u00E3o para a realiza\u00E7\u00E3o de transa\u00E7\u00F5es e-commerce ou por meio de Centrais de Atendimento Eletr\u00F4nico (URA), dentre outras.
    # @param numero_cartao N\u00FAmero do cart\u00E3o a ser validado.
    # @param nome_portador Nome do portador do cart\u00E3o
    # @param data_validade Data de validade do cart\u00E3o no formato yyyy-MM
    # @param codigo_seguranca C\u00F3digo de seguran\u00E7a do cart\u00E3o com tr\u00EAs n\u00FAmeros
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidaCartaoResponse, Fixnum, Hash)>] ValidaCartaoResponse data, response status code and response headers
    def validar_dados_impressos_nao_bandeirado_using_get_with_http_info(numero_cartao, nome_portador, data_validade, codigo_seguranca, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.validar_dados_impressos_nao_bandeirado_using_get ..."
      end
      
      
      # verify the required parameter 'numero_cartao' is set
      fail ArgumentError, "Missing the required parameter 'numero_cartao' when calling CartaoApi.validar_dados_impressos_nao_bandeirado_using_get" if numero_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'nome_portador' is set
      fail ArgumentError, "Missing the required parameter 'nome_portador' when calling CartaoApi.validar_dados_impressos_nao_bandeirado_using_get" if nome_portador.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_validade' is set
      fail ArgumentError, "Missing the required parameter 'data_validade' when calling CartaoApi.validar_dados_impressos_nao_bandeirado_using_get" if data_validade.nil?
      
      
      
      
      
      
      # verify the required parameter 'codigo_seguranca' is set
      fail ArgumentError, "Missing the required parameter 'codigo_seguranca' when calling CartaoApi.validar_dados_impressos_nao_bandeirado_using_get" if codigo_seguranca.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/validar-dados-impressos-nao-bandeirados".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'numero_cartao'] = numero_cartao
      query_params[:'nome_portador'] = nome_portador
      query_params[:'data_validade'] = data_validade
      query_params[:'codigo_seguranca'] = codigo_seguranca

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidaCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#validar_dados_impressos_nao_bandeirado_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Permite validar um Cart\u00E3o com bandeira Mastercard a partir do de55
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que os Emissores validem o DE55 gerado a partir da leitura de um chip EMV de um Cart\u00E3o com bandeira Mastercard a fim de verificar a sua autenticidade. A utiliza\u00E7\u00E3o desde m\u00E9todo tem diversas aplica\u00E7\u00F5es, sendo a principal delas a de Identifica\u00E7\u00E3o Positiva do Cart\u00E3o antes de permitir que o portador realize transa\u00E7\u00F5es diversas, como as de compra e saque na modalidade d\u00E9bito em conta corrente, dentre outras.
    # @param numero_cartao N\u00FAmero do cart\u00E3o a ser validado.
    # @param criptograma Criptograma do cart\u00E3o no formato de55
    # @param [Hash] opts the optional parameters
    # @return [ValidaCartaoResponse]
    def validar_de55_cartao_mastercard_using_get(numero_cartao, criptograma, opts = {})
      data, _status_code, _headers = validar_de55_cartao_mastercard_using_get_with_http_info(numero_cartao, criptograma, opts)
      return data
    end

    # Permite validar um Cart\u00E3o com bandeira Mastercard a partir do de55
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que os Emissores validem o DE55 gerado a partir da leitura de um chip EMV de um Cart\u00E3o com bandeira Mastercard a fim de verificar a sua autenticidade. A utiliza\u00E7\u00E3o desde m\u00E9todo tem diversas aplica\u00E7\u00F5es, sendo a principal delas a de Identifica\u00E7\u00E3o Positiva do Cart\u00E3o antes de permitir que o portador realize transa\u00E7\u00F5es diversas, como as de compra e saque na modalidade d\u00E9bito em conta corrente, dentre outras.
    # @param numero_cartao N\u00FAmero do cart\u00E3o a ser validado.
    # @param criptograma Criptograma do cart\u00E3o no formato de55
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidaCartaoResponse, Fixnum, Hash)>] ValidaCartaoResponse data, response status code and response headers
    def validar_de55_cartao_mastercard_using_get_with_http_info(numero_cartao, criptograma, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.validar_de55_cartao_mastercard_using_get ..."
      end
      
      
      # verify the required parameter 'numero_cartao' is set
      fail ArgumentError, "Missing the required parameter 'numero_cartao' when calling CartaoApi.validar_de55_cartao_mastercard_using_get" if numero_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'criptograma' is set
      fail ArgumentError, "Missing the required parameter 'criptograma' when calling CartaoApi.validar_de55_cartao_mastercard_using_get" if criptograma.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/validar-de55-mastercard".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'numero_cartao'] = numero_cartao
      query_params[:'criptograma'] = criptograma

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidaCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#validar_de55_cartao_mastercard_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Permite validar a senha de um Cart\u00E3o
    # Esta opera\u00E7\u00E3o tem como objetivo permitir validar que a senha informada pelo portador de um determinado cart\u00E3o est\u00E1 correta.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param senha Senha para ser validada.
    # @param [Hash] opts the optional parameters
    # @return [ValidaSenhaCartaoResponse]
    def validar_senha_using_get(id, senha, opts = {})
      data, _status_code, _headers = validar_senha_using_get_with_http_info(id, senha, opts)
      return data
    end

    # Permite validar a senha de um Cart\u00E3o
    # Esta opera\u00E7\u00E3o tem como objetivo permitir validar que a senha informada pelo portador de um determinado cart\u00E3o est\u00E1 correta.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Cart\u00E3o (id).
    # @param senha Senha para ser validada.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidaSenhaCartaoResponse, Fixnum, Hash)>] ValidaSenhaCartaoResponse data, response status code and response headers
    def validar_senha_using_get_with_http_info(id, senha, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.validar_senha_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CartaoApi.validar_senha_using_get" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha' is set
      fail ArgumentError, "Missing the required parameter 'senha' when calling CartaoApi.validar_senha_using_get" if senha.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/{id}/validar-senha".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'senha'] = senha

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidaSenhaCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#validar_senha_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Permite validar um Cart\u00E3o Bandeirado a partir da Tarja
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00E3o a partir da leitura da tarja magn\u00E9tica do mesmo. A utiliza\u00E7\u00E3o desde m\u00E9todo tem diversas aplica\u00E7\u00F5es, sendo a principal delas a de Identifica\u00E7\u00E3o Positiva do Cart\u00E3o antes de permitir que o portador realize transa\u00E7\u00F5es diversas, como as de compra e saque na modalidade d\u00E9bito em conta corrente, dentre outras.
    # @param numero_cartao N\u00FAmero do cart\u00E3o a ser validado.
    # @param trilha1 Trilha 1 do cart\u00E3o a ser validado
    # @param trilha2 Trilha 2 do cart\u00E3o a ser validado
    # @param [Hash] opts the optional parameters
    # @return [ValidaCartaoResponse]
    def validar_tarja_using_get(numero_cartao, trilha1, trilha2, opts = {})
      data, _status_code, _headers = validar_tarja_using_get_with_http_info(numero_cartao, trilha1, trilha2, opts)
      return data
    end

    # Permite validar um Cart\u00E3o Bandeirado a partir da Tarja
    # Esta opera\u00E7\u00E3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00E3o a partir da leitura da tarja magn\u00E9tica do mesmo. A utiliza\u00E7\u00E3o desde m\u00E9todo tem diversas aplica\u00E7\u00F5es, sendo a principal delas a de Identifica\u00E7\u00E3o Positiva do Cart\u00E3o antes de permitir que o portador realize transa\u00E7\u00F5es diversas, como as de compra e saque na modalidade d\u00E9bito em conta corrente, dentre outras.
    # @param numero_cartao N\u00FAmero do cart\u00E3o a ser validado.
    # @param trilha1 Trilha 1 do cart\u00E3o a ser validado
    # @param trilha2 Trilha 2 do cart\u00E3o a ser validado
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidaCartaoResponse, Fixnum, Hash)>] ValidaCartaoResponse data, response status code and response headers
    def validar_tarja_using_get_with_http_info(numero_cartao, trilha1, trilha2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoApi.validar_tarja_using_get ..."
      end
      
      
      # verify the required parameter 'numero_cartao' is set
      fail ArgumentError, "Missing the required parameter 'numero_cartao' when calling CartaoApi.validar_tarja_using_get" if numero_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'trilha1' is set
      fail ArgumentError, "Missing the required parameter 'trilha1' when calling CartaoApi.validar_tarja_using_get" if trilha1.nil?
      
      
      
      
      
      
      # verify the required parameter 'trilha2' is set
      fail ArgumentError, "Missing the required parameter 'trilha2' when calling CartaoApi.validar_tarja_using_get" if trilha2.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/cartoes/validar-tarja".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'numero_cartao'] = numero_cartao
      query_params[:'trilha1'] = trilha1
      query_params[:'trilha2'] = trilha2

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ValidaCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoApi#validar_tarja_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
