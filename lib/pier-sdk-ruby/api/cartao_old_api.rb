=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class CartaoOldApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # Bloqueia um cart\u00C3\u00A3o
    # Bloquear um determinado cart\u00C3\u00A3o
    # @param id_conta ID da Conta
    # @param id_cartao ID do Cart\u00C3\u00A3o que deseja cancelar
    # @param motivo Motivo do bloqueio
    # @param [Hash] opts the optional parameters
    # @option opts [String] :observacao Alguma observa\u00C3\u00A7\u00C3\u00A3o para o bloqueio
    # @return [CancelarCartaoResponse]
    def bloquear_cartao_using_post(id_conta, id_cartao, motivo, opts = {})
      data, _status_code, _headers = bloquear_cartao_using_post_with_http_info(id_conta, id_cartao, motivo, opts)
      return data
    end

    # Bloqueia um cart\u00C3\u00A3o
    # Bloquear um determinado cart\u00C3\u00A3o
    # @param id_conta ID da Conta
    # @param id_cartao ID do Cart\u00C3\u00A3o que deseja cancelar
    # @param motivo Motivo do bloqueio
    # @param [Hash] opts the optional parameters
    # @option opts [String] :observacao Alguma observa\u00C3\u00A7\u00C3\u00A3o para o bloqueio
    # @return [Array<(CancelarCartaoResponse, Fixnum, Hash)>] CancelarCartaoResponse data, response status code and response headers
    def bloquear_cartao_using_post_with_http_info(id_conta, id_cartao, motivo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoOldApi.bloquear_cartao_using_post ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoOldApi.bloquear_cartao_using_post" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartaoOldApi.bloquear_cartao_using_post" if id_cartao.nil?
      
      
      
      
      
      
      # verify the required parameter 'motivo' is set
      fail ArgumentError, "Missing the required parameter 'motivo' when calling CartaoOldApi.bloquear_cartao_using_post" if motivo.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{idConta}/cartoes/{idCartao}/bloquear".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s).sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}
      query_params[:'motivo'] = motivo
      query_params[:'observacao'] = opts[:'observacao'] if opts[:'observacao']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CancelarCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoOldApi#bloquear_cartao_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Retorna um cart\u00C3\u00A3o
    # Consultar as informa\u00C3\u00A7\u00C3\u00B5es de um determinado cart\u00C3\u00A3o de uma conta
    # @param id_conta ID da Conta que pertence o cart\u00C3\u00A3o
    # @param id_cartao ID do Cart\u00C3\u00A3o que deseja consultar
    # @param [Hash] opts the optional parameters
    # @option opts [String] :numero_cartao N\u00C3\u00BAmero do Cart\u00C3\u00A3o que deseja consultar (opcional)
    # @return [ConsultarCartaoResponse]
    def consultar_cartao_using_get(id_conta, id_cartao, opts = {})
      data, _status_code, _headers = consultar_cartao_using_get_with_http_info(id_conta, id_cartao, opts)
      return data
    end

    # Retorna um cart\u00C3\u00A3o
    # Consultar as informa\u00C3\u00A7\u00C3\u00B5es de um determinado cart\u00C3\u00A3o de uma conta
    # @param id_conta ID da Conta que pertence o cart\u00C3\u00A3o
    # @param id_cartao ID do Cart\u00C3\u00A3o que deseja consultar
    # @param [Hash] opts the optional parameters
    # @option opts [String] :numero_cartao N\u00C3\u00BAmero do Cart\u00C3\u00A3o que deseja consultar (opcional)
    # @return [Array<(ConsultarCartaoResponse, Fixnum, Hash)>] ConsultarCartaoResponse data, response status code and response headers
    def consultar_cartao_using_get_with_http_info(id_conta, id_cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoOldApi.consultar_cartao_using_get ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoOldApi.consultar_cartao_using_get" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartaoOldApi.consultar_cartao_using_get" if id_cartao.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{idConta}/cartoes/{idCartao}".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s).sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'numeroCartao'] = opts[:'numero_cartao'] if opts[:'numero_cartao']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsultarCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoOldApi#consultar_cartao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Retorna todos os cart\u00C3\u00B5es
    # Consultar todos os cart\u00C3\u00B5es de uma determinada conta
    # @param id_conta ID da Conta
    # @param [Hash] opts the optional parameters
    # @return [ConsultarCartaoResponse]
    def consultar_cartoes_using_get(id_conta, opts = {})
      data, _status_code, _headers = consultar_cartoes_using_get_with_http_info(id_conta, opts)
      return data
    end

    # Retorna todos os cart\u00C3\u00B5es
    # Consultar todos os cart\u00C3\u00B5es de uma determinada conta
    # @param id_conta ID da Conta
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConsultarCartaoResponse, Fixnum, Hash)>] ConsultarCartaoResponse data, response status code and response headers
    def consultar_cartoes_using_get_with_http_info(id_conta, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoOldApi.consultar_cartoes_using_get ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoOldApi.consultar_cartoes_using_get" if id_conta.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{idConta}/cartoes".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsultarCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoOldApi#consultar_cartoes_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Desbloqueia um cart\u00C3\u00A3o
    # Desbloquear cart\u00C3\u00A3o de uma determinada conta
    # @param id_conta ID da Conta
    # @param id_cartao ID do Cart\u00C3\u00A3o que deseja consultar o saldo/limite
    # @param [Hash] opts the optional parameters
    # @option opts [String] :codigo_segurancao C\u00C3\u00B3digo seguran\u00C3\u00A7a do cart\u00C3\u00A3o
    # @return [DesbloquearCartaoResponse]
    def desbloquear_cartao_using_post(id_conta, id_cartao, opts = {})
      data, _status_code, _headers = desbloquear_cartao_using_post_with_http_info(id_conta, id_cartao, opts)
      return data
    end

    # Desbloqueia um cart\u00C3\u00A3o
    # Desbloquear cart\u00C3\u00A3o de uma determinada conta
    # @param id_conta ID da Conta
    # @param id_cartao ID do Cart\u00C3\u00A3o que deseja consultar o saldo/limite
    # @param [Hash] opts the optional parameters
    # @option opts [String] :codigo_segurancao C\u00C3\u00B3digo seguran\u00C3\u00A7a do cart\u00C3\u00A3o
    # @return [Array<(DesbloquearCartaoResponse, Fixnum, Hash)>] DesbloquearCartaoResponse data, response status code and response headers
    def desbloquear_cartao_using_post_with_http_info(id_conta, id_cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoOldApi.desbloquear_cartao_using_post ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoOldApi.desbloquear_cartao_using_post" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartaoOldApi.desbloquear_cartao_using_post" if id_cartao.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{idConta}/cartoes/{idCartao}/desbloquear".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s).sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'codigoSegurancao'] = opts[:'codigo_segurancao'] if opts[:'codigo_segurancao']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DesbloquearCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoOldApi#desbloquear_cartao_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Embossado
    # N\u00C3\u00B3s informe caso tenha embossado algum cart\u00C3\u00A3o.
    # @param id_conta ID da Conta
    # @param id_cartao ID do Cart\u00C3\u00A3o que deseja cancelar
    # @param [Hash] opts the optional parameters
    # @return [EmbossadoCartaoResponse]
    def embossado_cartao_using_put(id_conta, id_cartao, opts = {})
      data, _status_code, _headers = embossado_cartao_using_put_with_http_info(id_conta, id_cartao, opts)
      return data
    end

    # Embossado
    # N\u00C3\u00B3s informe caso tenha embossado algum cart\u00C3\u00A3o.
    # @param id_conta ID da Conta
    # @param id_cartao ID do Cart\u00C3\u00A3o que deseja cancelar
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmbossadoCartaoResponse, Fixnum, Hash)>] EmbossadoCartaoResponse data, response status code and response headers
    def embossado_cartao_using_put_with_http_info(id_conta, id_cartao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CartaoOldApi.embossado_cartao_using_put ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling CartaoOldApi.embossado_cartao_using_put" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_cartao' is set
      fail ArgumentError, "Missing the required parameter 'id_cartao' when calling CartaoOldApi.embossado_cartao_using_put" if id_cartao.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{idConta}/cartoes/{idCartao}/embossado".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s).sub('{' + 'idCartao' + '}', id_cartao.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmbossadoCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartaoOldApi#embossado_cartao_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
