=begin
PIER Labs

Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require "uri"

module Pier
  class BinchaveresourceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # alterarBinChave
    # 
    # @param id id
    # @param request request
    # @param login login
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def alterar_bin_chave_using_put(id, request, login, opts = {})
      data, _status_code, _headers = alterar_bin_chave_using_put_with_http_info(id, request, login, opts)
      return data
    end

    # alterarBinChave
    # 
    # @param id id
    # @param request request
    # @param login login
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def alterar_bin_chave_using_put_with_http_info(id, request, login, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BinchaveresourceApi.alterar_bin_chave_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling BinchaveresourceApi.alterar_bin_chave_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BinchaveresourceApi.alterar_bin_chave_using_put" if request.nil?
      
      
      
      
      
      
      # verify the required parameter 'login' is set
      fail ArgumentError, "Missing the required parameter 'login' when calling BinchaveresourceApi.alterar_bin_chave_using_put" if login.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/bins-chaves/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'login'] = login

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BinchaveresourceApi#alterar_bin_chave_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # consultar
    # 
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def consultar_using_get10(id, opts = {})
      data, _status_code, _headers = consultar_using_get10_with_http_info(id, opts)
      return data
    end

    # consultar
    # 
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def consultar_using_get10_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BinchaveresourceApi.consultar_using_get10 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling BinchaveresourceApi.consultar_using_get10" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/bins-chaves/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BinchaveresourceApi#consultar_using_get10\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # listarBinChave
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id 
    # @option opts [Integer] :id_tipo_chave 
    # @option opts [Integer] :id_bin 
    # @option opts [String] :chave 
    # @option opts [String] :check_value 
    # @option opts [String] :validade 
    # @option opts [BOOLEAN] :flag_descriptografado 
    # @option opts [String] :label 
    # @return [Object]
    def listar_bin_chave_using_get(opts = {})
      data, _status_code, _headers = listar_bin_chave_using_get_with_http_info(opts)
      return data
    end

    # listarBinChave
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id 
    # @option opts [Integer] :id_tipo_chave 
    # @option opts [Integer] :id_bin 
    # @option opts [String] :chave 
    # @option opts [String] :check_value 
    # @option opts [String] :validade 
    # @option opts [BOOLEAN] :flag_descriptografado 
    # @option opts [String] :label 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def listar_bin_chave_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BinchaveresourceApi.listar_bin_chave_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/bins-chaves".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'idTipoChave'] = opts[:'id_tipo_chave'] if opts[:'id_tipo_chave']
      query_params[:'idBin'] = opts[:'id_bin'] if opts[:'id_bin']
      query_params[:'chave'] = opts[:'chave'] if opts[:'chave']
      query_params[:'checkValue'] = opts[:'check_value'] if opts[:'check_value']
      query_params[:'validade'] = opts[:'validade'] if opts[:'validade']
      query_params[:'flagDescriptografado'] = opts[:'flag_descriptografado'] if opts[:'flag_descriptografado']
      query_params[:'label'] = opts[:'label'] if opts[:'label']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BinchaveresourceApi#listar_bin_chave_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # salvar
    # 
    # @param bin_chave_persist binChavePersist
    # @param login login
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def salvar_using_post4(bin_chave_persist, login, opts = {})
      data, _status_code, _headers = salvar_using_post4_with_http_info(bin_chave_persist, login, opts)
      return data
    end

    # salvar
    # 
    # @param bin_chave_persist binChavePersist
    # @param login login
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def salvar_using_post4_with_http_info(bin_chave_persist, login, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BinchaveresourceApi.salvar_using_post4 ..."
      end
      
      
      # verify the required parameter 'bin_chave_persist' is set
      fail ArgumentError, "Missing the required parameter 'bin_chave_persist' when calling BinchaveresourceApi.salvar_using_post4" if bin_chave_persist.nil?
      
      
      
      
      
      
      # verify the required parameter 'login' is set
      fail ArgumentError, "Missing the required parameter 'login' when calling BinchaveresourceApi.salvar_using_post4" if login.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/bins-chaves".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'login'] = login

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bin_chave_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BinchaveresourceApi#salvar_using_post4\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
