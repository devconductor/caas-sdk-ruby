=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'date'

module Pier
  # Objeto transacoes correntes
  class TransacoesCorrentesResponse
    # C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da transfer\u00C3\u00AAncia (id).
    attr_accessor :id

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo da Transa\u00C3\u00A7\u00C3\u00A3o.
    attr_accessor :id_tipo_transacao

    # Descri\u00C3\u00A7\u00C3\u00A3o Abreviada da Transa\u00C3\u00A7\u00C3\u00A3o.
    attr_accessor :descricao_abreviada

    # Status de Processamento da Transa\u00C3\u00A7\u00C3\u00A3o.
    attr_accessor :status_transacao

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Evento que originou a Transa\u00C3\u00A7\u00C3\u00A3o (id).
    attr_accessor :id_evento

    # Descri\u00C3\u00A7\u00C3\u00A3o do Evento que representa a Transa\u00C3\u00A7\u00C3\u00A3o.
    attr_accessor :tipo_evento

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id).
    attr_accessor :id_conta

    # N\u00C3\u00BAmero do Cart\u00C3\u00A3o em Formato 0000XXXXXXXX0000.
    attr_accessor :cartao_mascarado

    # Nome completo do Portador do Cart\u00C3\u00A3o.
    attr_accessor :nome_portador

    # Data em que a Transa\u00C3\u00A7\u00C3\u00A3o foi realizada sob o padr\u00C3\u00A3o de Tempo Universal Coordenado (UTC).
    attr_accessor :data_transacao_utc

    # Data de Faturamento da Transa\u00C3\u00A7\u00C3\u00A3o.
    attr_accessor :data_faturamento

    # Data de Vencimento da Fatura.
    attr_accessor :data_vencimento

    # Descreve o modo utilizado para realizar a leitura dos dados do cart\u00C3\u00A3o para realizar a Transa\u00C3\u00A7\u00C3\u00A3o.
    attr_accessor :modo_entrada_transacao

    # Valor da Taxa de Embarque em Real (BRL) quando a transa\u00C3\u00A7\u00C3\u00A3o for relacionada a Compra de Passagens A\u00C3\u00A9reas.
    attr_accessor :valor_taxa_embarque

    # Valor da Entrada em Real (BRL) quando a transa\u00C3\u00A7\u00C3\u00A3o for do tipo Parcelada com o pagamento de um valor de Entrada.
    attr_accessor :valor_entrada

    # Valor da Transa\u00C3\u00A7\u00C3\u00A3o em Real (BRL).
    attr_accessor :valor_brl

    # Valor da Transa\u00C3\u00A7\u00C3\u00A3o em D\u00C3\u00B3lar Americano (USD).
    attr_accessor :valor_usd

    # Valor do D\u00C3\u00B3lar Americano (USD) convertido em Real (BRL).
    attr_accessor :cotacao_usd

    # Data de Fechamento da Cota\u00C3\u00A7\u00C3\u00A3o do D\u00C3\u00B3lar Americano (USD).
    attr_accessor :data_cotacao_usd

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Moeda utilizada na Transa\u00C3\u00A7\u00C3\u00A3o, seguindo padr\u00C3\u00A3o ISO 4217.
    attr_accessor :codigo_moeda_origem

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Moeda da Transa\u00C3\u00A7\u00C3\u00A3o ap\u00C3\u00B3s a convers\u00C3\u00A3o, seguindo padr\u00C3\u00A3o ISO 4217.
    attr_accessor :codigo_moeda_destino

    # C\u00C3\u00B3digo de Autoriza\u00C3\u00A7\u00C3\u00A3o da Transa\u00C3\u00A7\u00C3\u00A3o.
    attr_accessor :codigo_autorizacao

    # C\u00C3\u00B3digo de Refer\u00C3\u00AAncia da Transa\u00C3\u00A7\u00C3\u00A3o quando utilizado Cart\u00C3\u00A3o Bandeirado.
    attr_accessor :codigo_referencia

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da origem da captura da Transa\u00C3\u00A7\u00C3\u00A3o.
    attr_accessor :codigo_terminal

    # C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da categoria do Estabelecimento.
    attr_accessor :codigo_mcc

    # C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do grupo do Estabelecimento.
    attr_accessor :grupo_mcc

    # Descri\u00C3\u00A7\u00C3\u00A3o do grupo do Estabelecimento.
    attr_accessor :grupo_descricao_mcc

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento (id).
    attr_accessor :id_estabelecimento

    # Nome do Estabelecimento.
    attr_accessor :nome_estabelecimento

    # Localidade do Estabelecimento.
    attr_accessor :localidade_estabelecimento

    # Quando a Transa\u00C3\u00A7\u00C3\u00A3o for do tipo Parcelada, apresenta o n\u00C3\u00BAmero total de Parcelas.
    attr_accessor :plano_parcelamento

    # Quando a Transa\u00C3\u00A7\u00C3\u00A3o for do tipo Parcelada, apresenta o n\u00C3\u00BAmero da Parcela.
    attr_accessor :numero_parcela

    # Detalhes complementares a respeito da Transa\u00C3\u00A7\u00C3\u00A3o.
    attr_accessor :detalhes_transacao

    # Quando ativa, indica que a Transa\u00C3\u00A7\u00C3\u00A3o \u00C3\u00A9 do Tipo 'Cr\u00C3\u00A9dito'.
    attr_accessor :flag_credito

    # Quando ativa, indica que a Transa\u00C3\u00A7\u00C3\u00A3o foi consolidada em uma Fatura.
    attr_accessor :flag_faturado

    # Quando ativa, indica que a Transa\u00C3\u00A7\u00C3\u00A3o foi estornada.
    attr_accessor :flag_estorno

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Transa\u00C3\u00A7\u00C3\u00A3o (id) que gerou o estorno.
    attr_accessor :id_transacao_estorno


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'id',
        
        :'id_tipo_transacao' => :'idTipoTransacao',
        
        :'descricao_abreviada' => :'descricaoAbreviada',
        
        :'status_transacao' => :'statusTransacao',
        
        :'id_evento' => :'idEvento',
        
        :'tipo_evento' => :'tipoEvento',
        
        :'id_conta' => :'idConta',
        
        :'cartao_mascarado' => :'cartaoMascarado',
        
        :'nome_portador' => :'nomePortador',
        
        :'data_transacao_utc' => :'dataTransacaoUTC',
        
        :'data_faturamento' => :'dataFaturamento',
        
        :'data_vencimento' => :'dataVencimento',
        
        :'modo_entrada_transacao' => :'modoEntradaTransacao',
        
        :'valor_taxa_embarque' => :'valorTaxaEmbarque',
        
        :'valor_entrada' => :'valorEntrada',
        
        :'valor_brl' => :'valorBRL',
        
        :'valor_usd' => :'valorUSD',
        
        :'cotacao_usd' => :'cotacaoUSD',
        
        :'data_cotacao_usd' => :'dataCotacaoUSD',
        
        :'codigo_moeda_origem' => :'codigoMoedaOrigem',
        
        :'codigo_moeda_destino' => :'codigoMoedaDestino',
        
        :'codigo_autorizacao' => :'codigoAutorizacao',
        
        :'codigo_referencia' => :'codigoReferencia',
        
        :'codigo_terminal' => :'codigoTerminal',
        
        :'codigo_mcc' => :'codigoMCC',
        
        :'grupo_mcc' => :'grupoMCC',
        
        :'grupo_descricao_mcc' => :'grupoDescricaoMCC',
        
        :'id_estabelecimento' => :'idEstabelecimento',
        
        :'nome_estabelecimento' => :'nomeEstabelecimento',
        
        :'localidade_estabelecimento' => :'localidadeEstabelecimento',
        
        :'plano_parcelamento' => :'planoParcelamento',
        
        :'numero_parcela' => :'numeroParcela',
        
        :'detalhes_transacao' => :'detalhesTransacao',
        
        :'flag_credito' => :'flagCredito',
        
        :'flag_faturado' => :'flagFaturado',
        
        :'flag_estorno' => :'flagEstorno',
        
        :'id_transacao_estorno' => :'idTransacaoEstorno'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'id' => :'Integer',
        
        :'id_tipo_transacao' => :'Integer',
        
        :'descricao_abreviada' => :'String',
        
        :'status_transacao' => :'String',
        
        :'id_evento' => :'Integer',
        
        :'tipo_evento' => :'String',
        
        :'id_conta' => :'Integer',
        
        :'cartao_mascarado' => :'String',
        
        :'nome_portador' => :'String',
        
        :'data_transacao_utc' => :'String',
        
        :'data_faturamento' => :'String',
        
        :'data_vencimento' => :'String',
        
        :'modo_entrada_transacao' => :'String',
        
        :'valor_taxa_embarque' => :'Float',
        
        :'valor_entrada' => :'Float',
        
        :'valor_brl' => :'Float',
        
        :'valor_usd' => :'Float',
        
        :'cotacao_usd' => :'Float',
        
        :'data_cotacao_usd' => :'String',
        
        :'codigo_moeda_origem' => :'String',
        
        :'codigo_moeda_destino' => :'String',
        
        :'codigo_autorizacao' => :'String',
        
        :'codigo_referencia' => :'String',
        
        :'codigo_terminal' => :'String',
        
        :'codigo_mcc' => :'Integer',
        
        :'grupo_mcc' => :'Integer',
        
        :'grupo_descricao_mcc' => :'String',
        
        :'id_estabelecimento' => :'Integer',
        
        :'nome_estabelecimento' => :'String',
        
        :'localidade_estabelecimento' => :'String',
        
        :'plano_parcelamento' => :'Integer',
        
        :'numero_parcela' => :'Integer',
        
        :'detalhes_transacao' => :'String',
        
        :'flag_credito' => :'Integer',
        
        :'flag_faturado' => :'Integer',
        
        :'flag_estorno' => :'Integer',
        
        :'id_transacao_estorno' => :'Integer'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'id']
        
        
        self.id = attributes[:'id']
        
      
      end

      
      if attributes[:'idTipoTransacao']
        
        
        self.id_tipo_transacao = attributes[:'idTipoTransacao']
        
      
      end

      
      if attributes[:'descricaoAbreviada']
        
        
        self.descricao_abreviada = attributes[:'descricaoAbreviada']
        
      
      end

      
      if attributes[:'statusTransacao']
        
        
        self.status_transacao = attributes[:'statusTransacao']
        
      
      end

      
      if attributes[:'idEvento']
        
        
        self.id_evento = attributes[:'idEvento']
        
      
      end

      
      if attributes[:'tipoEvento']
        
        
        self.tipo_evento = attributes[:'tipoEvento']
        
      
      end

      
      if attributes[:'idConta']
        
        
        self.id_conta = attributes[:'idConta']
        
      
      end

      
      if attributes[:'cartaoMascarado']
        
        
        self.cartao_mascarado = attributes[:'cartaoMascarado']
        
      
      end

      
      if attributes[:'nomePortador']
        
        
        self.nome_portador = attributes[:'nomePortador']
        
      
      end

      
      if attributes[:'dataTransacaoUTC']
        
        
        self.data_transacao_utc = attributes[:'dataTransacaoUTC']
        
      
      end

      
      if attributes[:'dataFaturamento']
        
        
        self.data_faturamento = attributes[:'dataFaturamento']
        
      
      end

      
      if attributes[:'dataVencimento']
        
        
        self.data_vencimento = attributes[:'dataVencimento']
        
      
      end

      
      if attributes[:'modoEntradaTransacao']
        
        
        self.modo_entrada_transacao = attributes[:'modoEntradaTransacao']
        
      
      end

      
      if attributes[:'valorTaxaEmbarque']
        
        
        self.valor_taxa_embarque = attributes[:'valorTaxaEmbarque']
        
      
      end

      
      if attributes[:'valorEntrada']
        
        
        self.valor_entrada = attributes[:'valorEntrada']
        
      
      end

      
      if attributes[:'valorBRL']
        
        
        self.valor_brl = attributes[:'valorBRL']
        
      
      end

      
      if attributes[:'valorUSD']
        
        
        self.valor_usd = attributes[:'valorUSD']
        
      
      end

      
      if attributes[:'cotacaoUSD']
        
        
        self.cotacao_usd = attributes[:'cotacaoUSD']
        
      
      end

      
      if attributes[:'dataCotacaoUSD']
        
        
        self.data_cotacao_usd = attributes[:'dataCotacaoUSD']
        
      
      end

      
      if attributes[:'codigoMoedaOrigem']
        
        
        self.codigo_moeda_origem = attributes[:'codigoMoedaOrigem']
        
      
      end

      
      if attributes[:'codigoMoedaDestino']
        
        
        self.codigo_moeda_destino = attributes[:'codigoMoedaDestino']
        
      
      end

      
      if attributes[:'codigoAutorizacao']
        
        
        self.codigo_autorizacao = attributes[:'codigoAutorizacao']
        
      
      end

      
      if attributes[:'codigoReferencia']
        
        
        self.codigo_referencia = attributes[:'codigoReferencia']
        
      
      end

      
      if attributes[:'codigoTerminal']
        
        
        self.codigo_terminal = attributes[:'codigoTerminal']
        
      
      end

      
      if attributes[:'codigoMCC']
        
        
        self.codigo_mcc = attributes[:'codigoMCC']
        
      
      end

      
      if attributes[:'grupoMCC']
        
        
        self.grupo_mcc = attributes[:'grupoMCC']
        
      
      end

      
      if attributes[:'grupoDescricaoMCC']
        
        
        self.grupo_descricao_mcc = attributes[:'grupoDescricaoMCC']
        
      
      end

      
      if attributes[:'idEstabelecimento']
        
        
        self.id_estabelecimento = attributes[:'idEstabelecimento']
        
      
      end

      
      if attributes[:'nomeEstabelecimento']
        
        
        self.nome_estabelecimento = attributes[:'nomeEstabelecimento']
        
      
      end

      
      if attributes[:'localidadeEstabelecimento']
        
        
        self.localidade_estabelecimento = attributes[:'localidadeEstabelecimento']
        
      
      end

      
      if attributes[:'planoParcelamento']
        
        
        self.plano_parcelamento = attributes[:'planoParcelamento']
        
      
      end

      
      if attributes[:'numeroParcela']
        
        
        self.numero_parcela = attributes[:'numeroParcela']
        
      
      end

      
      if attributes[:'detalhesTransacao']
        
        
        self.detalhes_transacao = attributes[:'detalhesTransacao']
        
      
      end

      
      if attributes[:'flagCredito']
        
        
        self.flag_credito = attributes[:'flagCredito']
        
      
      end

      
      if attributes[:'flagFaturado']
        
        
        self.flag_faturado = attributes[:'flagFaturado']
        
      
      end

      
      if attributes[:'flagEstorno']
        
        
        self.flag_estorno = attributes[:'flagEstorno']
        
      
      end

      
      if attributes[:'idTransacaoEstorno']
        
        
        self.id_transacao_estorno = attributes[:'idTransacaoEstorno']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          id_tipo_transacao == o.id_tipo_transacao &&
          descricao_abreviada == o.descricao_abreviada &&
          status_transacao == o.status_transacao &&
          id_evento == o.id_evento &&
          tipo_evento == o.tipo_evento &&
          id_conta == o.id_conta &&
          cartao_mascarado == o.cartao_mascarado &&
          nome_portador == o.nome_portador &&
          data_transacao_utc == o.data_transacao_utc &&
          data_faturamento == o.data_faturamento &&
          data_vencimento == o.data_vencimento &&
          modo_entrada_transacao == o.modo_entrada_transacao &&
          valor_taxa_embarque == o.valor_taxa_embarque &&
          valor_entrada == o.valor_entrada &&
          valor_brl == o.valor_brl &&
          valor_usd == o.valor_usd &&
          cotacao_usd == o.cotacao_usd &&
          data_cotacao_usd == o.data_cotacao_usd &&
          codigo_moeda_origem == o.codigo_moeda_origem &&
          codigo_moeda_destino == o.codigo_moeda_destino &&
          codigo_autorizacao == o.codigo_autorizacao &&
          codigo_referencia == o.codigo_referencia &&
          codigo_terminal == o.codigo_terminal &&
          codigo_mcc == o.codigo_mcc &&
          grupo_mcc == o.grupo_mcc &&
          grupo_descricao_mcc == o.grupo_descricao_mcc &&
          id_estabelecimento == o.id_estabelecimento &&
          nome_estabelecimento == o.nome_estabelecimento &&
          localidade_estabelecimento == o.localidade_estabelecimento &&
          plano_parcelamento == o.plano_parcelamento &&
          numero_parcela == o.numero_parcela &&
          detalhes_transacao == o.detalhes_transacao &&
          flag_credito == o.flag_credito &&
          flag_faturado == o.flag_faturado &&
          flag_estorno == o.flag_estorno &&
          id_transacao_estorno == o.id_transacao_estorno
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, id_tipo_transacao, descricao_abreviada, status_transacao, id_evento, tipo_evento, id_conta, cartao_mascarado, nome_portador, data_transacao_utc, data_faturamento, data_vencimento, modo_entrada_transacao, valor_taxa_embarque, valor_entrada, valor_brl, valor_usd, cotacao_usd, data_cotacao_usd, codigo_moeda_origem, codigo_moeda_destino, codigo_autorizacao, codigo_referencia, codigo_terminal, codigo_mcc, grupo_mcc, grupo_descricao_mcc, id_estabelecimento, nome_estabelecimento, localidade_estabelecimento, plano_parcelamento, numero_parcela, detalhes_transacao, flag_credito, flag_faturado, flag_estorno, id_transacao_estorno].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end


end
