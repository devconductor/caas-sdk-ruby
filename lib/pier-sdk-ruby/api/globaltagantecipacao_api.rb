=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class GlobaltagantecipacaoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # {{{produto_resource_configurar_taxa_antecipacao}}}
    # {{{produto_resource_configurar_taxa_antecipacao_notes}}}
    # @param id {{{produto_resource_configurar_taxa_antecipacao_param_id}}}
    # @param taxa_antecipacao_request taxaAntecipacaoRequest
    # @param [Hash] opts the optional parameters
    # @return [ParametroProdutoResponse]
    def configurar_taxa_antecipacao_using_post(id, taxa_antecipacao_request, opts = {})
      data, _status_code, _headers = configurar_taxa_antecipacao_using_post_with_http_info(id, taxa_antecipacao_request, opts)
      return data
    end

    # {{{produto_resource_configurar_taxa_antecipacao}}}
    # {{{produto_resource_configurar_taxa_antecipacao_notes}}}
    # @param id {{{produto_resource_configurar_taxa_antecipacao_param_id}}}
    # @param taxa_antecipacao_request taxaAntecipacaoRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(ParametroProdutoResponse, Fixnum, Hash)>] ParametroProdutoResponse data, response status code and response headers
    def configurar_taxa_antecipacao_using_post_with_http_info(id, taxa_antecipacao_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagantecipacaoApi.configurar_taxa_antecipacao_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagantecipacaoApi.configurar_taxa_antecipacao_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'taxa_antecipacao_request' is set
      fail ArgumentError, "Missing the required parameter 'taxa_antecipacao_request' when calling GlobaltagantecipacaoApi.configurar_taxa_antecipacao_using_post" if taxa_antecipacao_request.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/produtos/{id}/configurar-taxa-antecipacao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(taxa_antecipacao_request)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ParametroProdutoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagantecipacaoApi#configurar_taxa_antecipacao_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{produto_resource_consultar_taxa_antecipacao}}}
    # {{{produto_resource_consultar_taxa_antecipacao_notes}}}
    # @param id {{{produto_resource_consultar_taxa_antecipacao_param_id}}}
    # @param tipo_transacao {{{produto_resource_consultar_taxa_antecipacao_param_tipo_transacao}}}
    # @param [Hash] opts the optional parameters
    # @return [ParametroProdutoResponse]
    def consultar_taxa_antecipacao_using_get(id, tipo_transacao, opts = {})
      data, _status_code, _headers = consultar_taxa_antecipacao_using_get_with_http_info(id, tipo_transacao, opts)
      return data
    end

    # {{{produto_resource_consultar_taxa_antecipacao}}}
    # {{{produto_resource_consultar_taxa_antecipacao_notes}}}
    # @param id {{{produto_resource_consultar_taxa_antecipacao_param_id}}}
    # @param tipo_transacao {{{produto_resource_consultar_taxa_antecipacao_param_tipo_transacao}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(ParametroProdutoResponse, Fixnum, Hash)>] ParametroProdutoResponse data, response status code and response headers
    def consultar_taxa_antecipacao_using_get_with_http_info(id, tipo_transacao, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagantecipacaoApi.consultar_taxa_antecipacao_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagantecipacaoApi.consultar_taxa_antecipacao_using_get" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'tipo_transacao' is set
      fail ArgumentError, "Missing the required parameter 'tipo_transacao' when calling GlobaltagantecipacaoApi.consultar_taxa_antecipacao_using_get" if tipo_transacao.nil?
      
      # verify enum value
      unless ['ON_US', 'OFF_US'].include?(tipo_transacao)
        fail ArgumentError, "invalid value for 'tipo_transacao', must be one of ON_US, OFF_US"
      end
      
      
      
      
      
      # resource path
      local_var_path = "/api/produtos/{id}/consultar-taxa-antecipacao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'tipoTransacao'] = tipo_transacao

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ParametroProdutoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagantecipacaoApi#consultar_taxa_antecipacao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{compra_antecipavel_resource_efetivar_antecipacao}}}
    # {{{compra_antecipavel_resource_efetivar_antecipacao_notes}}}
    # @param id_conta {{{compra_antecipavel_resource_efetivar_antecipacao_param_id_conta}}}
    # @param id {{{compra_antecipavel_resource_efetivar_antecipacao_param_id_compra}}}
    # @param quantidade_parcelas {{{compra_antecipavel_resource_efetivar_antecipacao_param_quantidade_parcelas}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :complemento {{{compra_antecipavel_resource_efetivar_antecipacao_param_complemento}}}
    # @return [AntecipacaoResponse]
    def efetivar_antecipacao_using_post(id_conta, id, quantidade_parcelas, opts = {})
      data, _status_code, _headers = efetivar_antecipacao_using_post_with_http_info(id_conta, id, quantidade_parcelas, opts)
      return data
    end

    # {{{compra_antecipavel_resource_efetivar_antecipacao}}}
    # {{{compra_antecipavel_resource_efetivar_antecipacao_notes}}}
    # @param id_conta {{{compra_antecipavel_resource_efetivar_antecipacao_param_id_conta}}}
    # @param id {{{compra_antecipavel_resource_efetivar_antecipacao_param_id_compra}}}
    # @param quantidade_parcelas {{{compra_antecipavel_resource_efetivar_antecipacao_param_quantidade_parcelas}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :complemento {{{compra_antecipavel_resource_efetivar_antecipacao_param_complemento}}}
    # @return [Array<(AntecipacaoResponse, Fixnum, Hash)>] AntecipacaoResponse data, response status code and response headers
    def efetivar_antecipacao_using_post_with_http_info(id_conta, id, quantidade_parcelas, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagantecipacaoApi.efetivar_antecipacao_using_post ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling GlobaltagantecipacaoApi.efetivar_antecipacao_using_post" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagantecipacaoApi.efetivar_antecipacao_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'quantidade_parcelas' is set
      fail ArgumentError, "Missing the required parameter 'quantidade_parcelas' when calling GlobaltagantecipacaoApi.efetivar_antecipacao_using_post" if quantidade_parcelas.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/compras-antecipaveis/{id}/efetivar-antecipacao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'idConta'] = id_conta
      query_params[:'quantidadeParcelas'] = quantidade_parcelas
      query_params[:'complemento'] = opts[:'complemento'] if opts[:'complemento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntecipacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagantecipacaoApi#efetivar_antecipacao_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{compra_antecipavel_resource_efetivar_antecipacoes}}}
    # {{{compra_antecipavel_resource_efetivar_antecipacoes_notes}}}
    # @param id_conta {{{compra_antecipavel_resource_efetivar_antecipacoes_param_id_conta}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :complemento {{{compra_antecipavel_resource_efetivar_antecipacoes_param_complemento}}}
    # @return [AntecipacaoResponse]
    def efetivar_antecipacoes_using_post(id_conta, opts = {})
      data, _status_code, _headers = efetivar_antecipacoes_using_post_with_http_info(id_conta, opts)
      return data
    end

    # {{{compra_antecipavel_resource_efetivar_antecipacoes}}}
    # {{{compra_antecipavel_resource_efetivar_antecipacoes_notes}}}
    # @param id_conta {{{compra_antecipavel_resource_efetivar_antecipacoes_param_id_conta}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :complemento {{{compra_antecipavel_resource_efetivar_antecipacoes_param_complemento}}}
    # @return [Array<(AntecipacaoResponse, Fixnum, Hash)>] AntecipacaoResponse data, response status code and response headers
    def efetivar_antecipacoes_using_post_with_http_info(id_conta, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagantecipacaoApi.efetivar_antecipacoes_using_post ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling GlobaltagantecipacaoApi.efetivar_antecipacoes_using_post" if id_conta.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/compras-antecipaveis/efetivar-antecipacao".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idConta'] = id_conta
      query_params[:'complemento'] = opts[:'complemento'] if opts[:'complemento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntecipacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagantecipacaoApi#efetivar_antecipacoes_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{compra_antecipavel_resource_listar}}}
    # {{{compra_antecipavel_resource_listar_notes}}}
    # @param id_conta {{{compra_d_t_o_id_conta_value}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_compra {{{compra_d_t_o_id_compra_value}}}
    # @option opts [BOOLEAN] :parcelada {{{compra_d_t_o_parcelada_value}}}
    # @option opts [BOOLEAN] :juros {{{compra_d_t_o_juros_value}}}
    # @option opts [String] :tipo_origem_transacao {{{compra_d_t_o_tipo_origem_transacao_value}}}
    # @return [PageCompraResponse]
    def listar_using_get13(id_conta, opts = {})
      data, _status_code, _headers = listar_using_get13_with_http_info(id_conta, opts)
      return data
    end

    # {{{compra_antecipavel_resource_listar}}}
    # {{{compra_antecipavel_resource_listar_notes}}}
    # @param id_conta {{{compra_d_t_o_id_conta_value}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_compra {{{compra_d_t_o_id_compra_value}}}
    # @option opts [BOOLEAN] :parcelada {{{compra_d_t_o_parcelada_value}}}
    # @option opts [BOOLEAN] :juros {{{compra_d_t_o_juros_value}}}
    # @option opts [String] :tipo_origem_transacao {{{compra_d_t_o_tipo_origem_transacao_value}}}
    # @return [Array<(PageCompraResponse, Fixnum, Hash)>] PageCompraResponse data, response status code and response headers
    def listar_using_get13_with_http_info(id_conta, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagantecipacaoApi.listar_using_get13 ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling GlobaltagantecipacaoApi.listar_using_get13" if id_conta.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'tipo_origem_transacao'] && !['ON_US', 'OFF_US'].include?(opts[:'tipo_origem_transacao'])
        fail ArgumentError, 'invalid value for "tipo_origem_transacao", must be one of ON_US, OFF_US'
      end
      
      
      
      
      # resource path
      local_var_path = "/api/compras-antecipaveis".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idConta'] = id_conta
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idCompra'] = opts[:'id_compra'] if opts[:'id_compra']
      query_params[:'parcelada'] = opts[:'parcelada'] if opts[:'parcelada']
      query_params[:'juros'] = opts[:'juros'] if opts[:'juros']
      query_params[:'tipoOrigemTransacao'] = opts[:'tipo_origem_transacao'] if opts[:'tipo_origem_transacao']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCompraResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagantecipacaoApi#listar_using_get13\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{compra_antecipavel_resource_simular_antecipacao}}}
    # {{{compra_antecipavel_resource_simular_antecipacao_notes}}}
    # @param id_conta {{{compra_antecipavel_resource_simular_antecipacao_param_id_conta}}}
    # @param id {{{compra_antecipavel_resource_simular_antecipacao_param_id_evento}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :complemento {{{compra_antecipavel_resource_simular_antecipacao_param_complemento}}}
    # @return [AntecipacaoSimuladaResponse]
    def simular_antecipacao_using_get(id_conta, id, opts = {})
      data, _status_code, _headers = simular_antecipacao_using_get_with_http_info(id_conta, id, opts)
      return data
    end

    # {{{compra_antecipavel_resource_simular_antecipacao}}}
    # {{{compra_antecipavel_resource_simular_antecipacao_notes}}}
    # @param id_conta {{{compra_antecipavel_resource_simular_antecipacao_param_id_conta}}}
    # @param id {{{compra_antecipavel_resource_simular_antecipacao_param_id_evento}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :complemento {{{compra_antecipavel_resource_simular_antecipacao_param_complemento}}}
    # @return [Array<(AntecipacaoSimuladaResponse, Fixnum, Hash)>] AntecipacaoSimuladaResponse data, response status code and response headers
    def simular_antecipacao_using_get_with_http_info(id_conta, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagantecipacaoApi.simular_antecipacao_using_get ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling GlobaltagantecipacaoApi.simular_antecipacao_using_get" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagantecipacaoApi.simular_antecipacao_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/compras-antecipaveis/{id}/simular-antecipacao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'idConta'] = id_conta
      query_params[:'complemento'] = opts[:'complemento'] if opts[:'complemento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntecipacaoSimuladaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagantecipacaoApi#simular_antecipacao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{compra_antecipavel_resource_simular_antecipacoes}}}
    # {{{compra_antecipavel_resource_simular_antecipacoes_notes}}}
    # @param id_conta {{{compra_antecipavel_resource_simular_antecipacoes_param_id_conta}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :complemento {{{compra_antecipavel_resource_simular_antecipacoes_param_complemento}}}
    # @return [AntecipacaoSimuladaLoteResponse]
    def simular_antecipacoes_using_get(id_conta, opts = {})
      data, _status_code, _headers = simular_antecipacoes_using_get_with_http_info(id_conta, opts)
      return data
    end

    # {{{compra_antecipavel_resource_simular_antecipacoes}}}
    # {{{compra_antecipavel_resource_simular_antecipacoes_notes}}}
    # @param id_conta {{{compra_antecipavel_resource_simular_antecipacoes_param_id_conta}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :complemento {{{compra_antecipavel_resource_simular_antecipacoes_param_complemento}}}
    # @return [Array<(AntecipacaoSimuladaLoteResponse, Fixnum, Hash)>] AntecipacaoSimuladaLoteResponse data, response status code and response headers
    def simular_antecipacoes_using_get_with_http_info(id_conta, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagantecipacaoApi.simular_antecipacoes_using_get ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling GlobaltagantecipacaoApi.simular_antecipacoes_using_get" if id_conta.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/compras-antecipaveis/simular-antecipacao".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idConta'] = id_conta
      query_params[:'complemento'] = opts[:'complemento'] if opts[:'complemento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AntecipacaoSimuladaLoteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagantecipacaoApi#simular_antecipacoes_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
