=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'date'

module Pier
  # Fatura futura
  class LancamentoFaturaResponse
    # C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da transa\u00C3\u00A7\u00C3\u00A3o
    attr_accessor :id_transacao

    # Descri\u00C3\u00A7\u00C3\u00A3o do tipo da transa\u00C3\u00A7\u00C3\u00A3o
    attr_accessor :descricao_tipo_transacao

    # C\u00C3\u00B3digo identificador do tipo do evento
    attr_accessor :id_tipo_evento

    # Descri\u00C3\u00A7\u00C3\u00A3o do tipo do evento
    attr_accessor :descricao_tipo_evento

    # C\u00C3\u00B3digo identificador do evento
    attr_accessor :id_evento

    # C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta.
    attr_accessor :id_conta

    # Descri\u00C3\u00A7\u00C3\u00A3o complementar do evento
    attr_accessor :complemento

    # Valor em reais
    attr_accessor :valor_brl

    # Valor em dolar
    attr_accessor :valor_usd

    # N\u00C3\u00BAmero da parcela
    attr_accessor :numero_parcela

    # Quantidade de parcelas
    attr_accessor :quantidade_parcelas

    # Data da transa\u00C3\u00A7\u00C3\u00A3o
    attr_accessor :data_hora_transacao

    # Nome do estabelecimento
    attr_accessor :nome_estabelecimento

    # Descri\u00C3\u00A7\u00C3\u00A3o do estabelecimento
    attr_accessor :descricao_estabelecimento

    # Nome fantasia do estabelecimento
    attr_accessor :nome_fantasia_estabelecimento

    # Flag que indica se o lan\u00C3\u00A7amento \u00C3\u00A9 de cr\u00C3\u00A9dito
    attr_accessor :flag_credito

    # C\u00C3\u00B3digo identificador do MCC (Merchant Category Codes)
    attr_accessor :id_mcc

    # C\u00C3\u00B3digo identificador do grupo MCC
    attr_accessor :id_grupo_mcc

    # Descri\u00C3\u00A7\u00C3\u00A3o do grupo MCC
    attr_accessor :descricao_grupo_mcc

    # Indica se o portador do cart\u00C3\u00A3o \u00C3\u00A9 o titular da conta
    attr_accessor :titular

    # Nome impresso no cart\u00C3\u00A3o
    attr_accessor :nome_portador

    # N\u00C3\u00BAmero do cart\u00C3\u00A3o mascarado
    attr_accessor :numero_cartao_mascarado

    # Flag que indica se o cliente solicitou contesta\u00C3\u00A7\u00C3\u00A3o da transa\u00C3\u00A7\u00C3\u00A3o
    attr_accessor :flag_solicitou_contestacao

    # Valor da taxa de embarque
    attr_accessor :valor_taxa_embarque

    # Descri\u00C3\u00A7\u00C3\u00A3o abreviada da transa\u00C3\u00A7\u00C3\u00A3o
    attr_accessor :descricao_abreviada


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id_transacao' => :'idTransacao',
        
        :'descricao_tipo_transacao' => :'descricaoTipoTransacao',
        
        :'id_tipo_evento' => :'idTipoEvento',
        
        :'descricao_tipo_evento' => :'descricaoTipoEvento',
        
        :'id_evento' => :'idEvento',
        
        :'id_conta' => :'idConta',
        
        :'complemento' => :'complemento',
        
        :'valor_brl' => :'valorBRL',
        
        :'valor_usd' => :'valorUSD',
        
        :'numero_parcela' => :'numeroParcela',
        
        :'quantidade_parcelas' => :'quantidadeParcelas',
        
        :'data_hora_transacao' => :'dataHoraTransacao',
        
        :'nome_estabelecimento' => :'nomeEstabelecimento',
        
        :'descricao_estabelecimento' => :'descricaoEstabelecimento',
        
        :'nome_fantasia_estabelecimento' => :'nomeFantasiaEstabelecimento',
        
        :'flag_credito' => :'flagCredito',
        
        :'id_mcc' => :'idMCC',
        
        :'id_grupo_mcc' => :'idGrupoMCC',
        
        :'descricao_grupo_mcc' => :'descricaoGrupoMCC',
        
        :'titular' => :'titular',
        
        :'nome_portador' => :'nomePortador',
        
        :'numero_cartao_mascarado' => :'numeroCartaoMascarado',
        
        :'flag_solicitou_contestacao' => :'flagSolicitouContestacao',
        
        :'valor_taxa_embarque' => :'valorTaxaEmbarque',
        
        :'descricao_abreviada' => :'descricaoAbreviada'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'id_transacao' => :'Integer',
        
        :'descricao_tipo_transacao' => :'String',
        
        :'id_tipo_evento' => :'Integer',
        
        :'descricao_tipo_evento' => :'String',
        
        :'id_evento' => :'Integer',
        
        :'id_conta' => :'Integer',
        
        :'complemento' => :'String',
        
        :'valor_brl' => :'Float',
        
        :'valor_usd' => :'Float',
        
        :'numero_parcela' => :'Integer',
        
        :'quantidade_parcelas' => :'Integer',
        
        :'data_hora_transacao' => :'String',
        
        :'nome_estabelecimento' => :'String',
        
        :'descricao_estabelecimento' => :'String',
        
        :'nome_fantasia_estabelecimento' => :'String',
        
        :'flag_credito' => :'BOOLEAN',
        
        :'id_mcc' => :'Integer',
        
        :'id_grupo_mcc' => :'Integer',
        
        :'descricao_grupo_mcc' => :'String',
        
        :'titular' => :'BOOLEAN',
        
        :'nome_portador' => :'String',
        
        :'numero_cartao_mascarado' => :'String',
        
        :'flag_solicitou_contestacao' => :'BOOLEAN',
        
        :'valor_taxa_embarque' => :'Float',
        
        :'descricao_abreviada' => :'String'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'idTransacao']
        
        
        self.id_transacao = attributes[:'idTransacao']
        
      
      end

      
      if attributes[:'descricaoTipoTransacao']
        
        
        self.descricao_tipo_transacao = attributes[:'descricaoTipoTransacao']
        
      
      end

      
      if attributes[:'idTipoEvento']
        
        
        self.id_tipo_evento = attributes[:'idTipoEvento']
        
      
      end

      
      if attributes[:'descricaoTipoEvento']
        
        
        self.descricao_tipo_evento = attributes[:'descricaoTipoEvento']
        
      
      end

      
      if attributes[:'idEvento']
        
        
        self.id_evento = attributes[:'idEvento']
        
      
      end

      
      if attributes[:'idConta']
        
        
        self.id_conta = attributes[:'idConta']
        
      
      end

      
      if attributes[:'complemento']
        
        
        self.complemento = attributes[:'complemento']
        
      
      end

      
      if attributes[:'valorBRL']
        
        
        self.valor_brl = attributes[:'valorBRL']
        
      
      end

      
      if attributes[:'valorUSD']
        
        
        self.valor_usd = attributes[:'valorUSD']
        
      
      end

      
      if attributes[:'numeroParcela']
        
        
        self.numero_parcela = attributes[:'numeroParcela']
        
      
      end

      
      if attributes[:'quantidadeParcelas']
        
        
        self.quantidade_parcelas = attributes[:'quantidadeParcelas']
        
      
      end

      
      if attributes[:'dataHoraTransacao']
        
        
        self.data_hora_transacao = attributes[:'dataHoraTransacao']
        
      
      end

      
      if attributes[:'nomeEstabelecimento']
        
        
        self.nome_estabelecimento = attributes[:'nomeEstabelecimento']
        
      
      end

      
      if attributes[:'descricaoEstabelecimento']
        
        
        self.descricao_estabelecimento = attributes[:'descricaoEstabelecimento']
        
      
      end

      
      if attributes[:'nomeFantasiaEstabelecimento']
        
        
        self.nome_fantasia_estabelecimento = attributes[:'nomeFantasiaEstabelecimento']
        
      
      end

      
      if attributes[:'flagCredito']
        
        
        self.flag_credito = attributes[:'flagCredito']
        
      
      end

      
      if attributes[:'idMCC']
        
        
        self.id_mcc = attributes[:'idMCC']
        
      
      end

      
      if attributes[:'idGrupoMCC']
        
        
        self.id_grupo_mcc = attributes[:'idGrupoMCC']
        
      
      end

      
      if attributes[:'descricaoGrupoMCC']
        
        
        self.descricao_grupo_mcc = attributes[:'descricaoGrupoMCC']
        
      
      end

      
      if attributes[:'titular']
        
        
        self.titular = attributes[:'titular']
        
      
      end

      
      if attributes[:'nomePortador']
        
        
        self.nome_portador = attributes[:'nomePortador']
        
      
      end

      
      if attributes[:'numeroCartaoMascarado']
        
        
        self.numero_cartao_mascarado = attributes[:'numeroCartaoMascarado']
        
      
      end

      
      if attributes[:'flagSolicitouContestacao']
        
        
        self.flag_solicitou_contestacao = attributes[:'flagSolicitouContestacao']
        
      
      end

      
      if attributes[:'valorTaxaEmbarque']
        
        
        self.valor_taxa_embarque = attributes[:'valorTaxaEmbarque']
        
      
      end

      
      if attributes[:'descricaoAbreviada']
        
        
        self.descricao_abreviada = attributes[:'descricaoAbreviada']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id_transacao == o.id_transacao &&
          descricao_tipo_transacao == o.descricao_tipo_transacao &&
          id_tipo_evento == o.id_tipo_evento &&
          descricao_tipo_evento == o.descricao_tipo_evento &&
          id_evento == o.id_evento &&
          id_conta == o.id_conta &&
          complemento == o.complemento &&
          valor_brl == o.valor_brl &&
          valor_usd == o.valor_usd &&
          numero_parcela == o.numero_parcela &&
          quantidade_parcelas == o.quantidade_parcelas &&
          data_hora_transacao == o.data_hora_transacao &&
          nome_estabelecimento == o.nome_estabelecimento &&
          descricao_estabelecimento == o.descricao_estabelecimento &&
          nome_fantasia_estabelecimento == o.nome_fantasia_estabelecimento &&
          flag_credito == o.flag_credito &&
          id_mcc == o.id_mcc &&
          id_grupo_mcc == o.id_grupo_mcc &&
          descricao_grupo_mcc == o.descricao_grupo_mcc &&
          titular == o.titular &&
          nome_portador == o.nome_portador &&
          numero_cartao_mascarado == o.numero_cartao_mascarado &&
          flag_solicitou_contestacao == o.flag_solicitou_contestacao &&
          valor_taxa_embarque == o.valor_taxa_embarque &&
          descricao_abreviada == o.descricao_abreviada
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id_transacao, descricao_tipo_transacao, id_tipo_evento, descricao_tipo_evento, id_evento, id_conta, complemento, valor_brl, valor_usd, numero_parcela, quantidade_parcelas, data_hora_transacao, nome_estabelecimento, descricao_estabelecimento, nome_fantasia_estabelecimento, flag_credito, id_mcc, id_grupo_mcc, descricao_grupo_mcc, titular, nome_portador, numero_cartao_mascarado, flag_solicitou_contestacao, valor_taxa_embarque, descricao_abreviada].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end


end
