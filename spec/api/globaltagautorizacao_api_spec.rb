=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::GlobaltagautorizacaoApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GlobaltagautorizacaoApi' do
  before do
    # run before each test
    @instance = Pier::GlobaltagautorizacaoApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlobaltagautorizacaoApi' do
    it 'should create an instact of GlobaltagautorizacaoApi' do
      @instance.should be_a(Pier::GlobaltagautorizacaoApi)
    end
  end


  # unit tests for autorizar_por_conta_using_post
  # {{{transacao_on_us_resource_autorizar_por_conta}}}
  # {{{transacao_on_us_resource_autorizar_por_conta_notes}}}
  # @param id {{{transacao_on_us_resource_autorizar_por_conta_param_id_conta}}}
  # @param transacao_on_us_por_id_cartao_request transacaoOnUsPorIdCartaoRequest
  # @param [Hash] opts the optional parameters
  # @return [TransacaoOnUsResponse]
  describe 'autorizar_por_conta_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for autorizar_using_post
  # {{{transacao_on_us_resource_autorizar}}}
  # {{{transacao_on_us_resource_autorizar_notes}}}
  # @param autorizacao_on_us_request autorizacaoOnUsRequest
  # @param [Hash] opts the optional parameters
  # @return [TransacaoOnUsResponse]
  describe 'autorizar_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for autorizar_using_post1
  # {{{transacao_on_us_resource_autorizar}}}
  # {{{transacao_on_us_resource_autorizar_notes}}}
  # @param id {{{transacao_on_us_resource_autorizar_param_id_cartao}}}
  # @param transacao_on_us_por_id_cartao_request transacaoOnUsPorIdCartaoRequest
  # @param [Hash] opts the optional parameters
  # @return [TransacaoOnUsResponse]
  describe 'autorizar_using_post1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for cancelar_por_id_conta_using_post
  # {{{transacao_on_us_resource_cancelar_por_id_conta}}}
  # {{{transacao_on_us_resource_cancelar_por_id_conta_notes}}}
  # @param id {{{transacao_on_us_resource_cancelar_por_id_conta_param_id_conta}}}
  # @param cancelamento_request cancelamentoRequest
  # @param [Hash] opts the optional parameters
  # @return [TransacaoOnUsResponse]
  describe 'cancelar_por_id_conta_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for cancelar_using_post2
  # {{{transacao_on_us_resource_cancelar}}}
  # {{{transacao_on_us_resource_cancelar_notes}}}
  # @param cancelamento_request cancelamentoRequest
  # @param [Hash] opts the optional parameters
  # @return [TransacaoOnUsResponse]
  describe 'cancelar_using_post2 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for cancelar_using_post3
  # {{{transacao_on_us_resource_cancelar}}}
  # {{{transacao_on_us_resource_cancelar_notes}}}
  # @param id {{{transacao_on_us_resource_cancelar_param_id_cartao}}}
  # @param cancelamento_request cancelamentoRequest
  # @param [Hash] opts the optional parameters
  # @return [TransacaoOnUsResponse]
  describe 'cancelar_using_post3 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_codigos_processamento_autorizacao_using_get
  # {{{enum_resource_listar_codigos_processamento_autorizacao}}}
  # {{{enum_resource_listar_codigos_processamento_autorizacao_notes}}}
  # @param [Hash] opts the optional parameters
  # @return [Array<Object>]
  describe 'listar_codigos_processamento_autorizacao_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for simular_using_post
  # {{{transacao_on_us_resource_simular}}}
  # {{{transacao_on_us_resource_simular_notes}}}
  # @param transacoes_request transacoesRequest
  # @param [Hash] opts the optional parameters
  # @return [TransacaoOnUsResponse]
  describe 'simular_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


end

