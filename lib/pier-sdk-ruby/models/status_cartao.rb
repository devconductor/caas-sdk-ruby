=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'date'

module Pier
  # Representa\u00C3\u00A7\u00C3\u00A3o do recurso Status Cart\u00C3\u00A3o
  class StatusCartao
    # Quando ativa, indica que ao ser atribu\u00C3\u00ADdo um idStatusCartao com essa caracter\u00C3\u00ADstica, o cart\u00C3\u00A3o ter\u00C3\u00A1 o seu idStatusCartao alterado para o que fora escolhido. Caso contr\u00C3\u00A1rio, o idStatusCartao s\u00C3\u00B3 ser\u00C3\u00A1 alterado ap\u00C3\u00B3s o desbloqueio de um novo cart\u00C3\u00A3o do mesmo Portador e Conta.
    attr_accessor :flag_cancela_cartao

    # Quando ativa, indica que o cart\u00C3\u00A3o ativo que o portador possuir na mesma conta do cart\u00C3\u00A3o a ser desbloqueado, e que o status dele possua essa caracter\u00C3\u00ADstica, dever\u00C3\u00A1 ser cancelado quando um novo cart\u00C3\u00A3o for desbloqueado.
    attr_accessor :flag_cancela_no_desbloqueio

    # Quando ativa, indica que cart\u00C3\u00B5es que tiverem um idStatusCartao atribu\u00C3\u00ADdo com essa caracter\u00C3\u00ADstica, incluir\u00C3\u00A3o a cobran\u00C3\u00A7a de uma tarifa para a conta de acordo com os valores definidos nos par\u00C3\u00A2metros do emissor.
    attr_accessor :flag_cobra_tarifa

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id) 
    attr_accessor :id

    # Indica qual o idStatusCartao que ser\u00C3\u00A1 atribu\u00C3\u00ADdo a conta, caso ela seja cancelada devido ao bloqueio de um cart\u00C3\u00A3o quando for utilizado um idStatusCartao no processo de Bloqueio que possua essa caracter\u00C3\u00ADstica.
    attr_accessor :id_status_destino_conta

    # Indica qual o idStatusCartao que ser\u00C3\u00A1 atribu\u00C3\u00ADdo aos cart\u00C3\u00B5es que forem cancelados devido ao desbloqueio de um novo cart\u00C3\u00A3o.
    attr_accessor :id_status_destino_desbloqueio

    # Nome atribu\u00C3\u00ADdo ao Status de Entrega do Cart\u00C3\u00A3o.
    attr_accessor :nome


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'flag_cancela_cartao' => :'flagCancelaCartao',
        
        :'flag_cancela_no_desbloqueio' => :'flagCancelaNoDesbloqueio',
        
        :'flag_cobra_tarifa' => :'flagCobraTarifa',
        
        :'id' => :'id',
        
        :'id_status_destino_conta' => :'idStatusDestinoConta',
        
        :'id_status_destino_desbloqueio' => :'idStatusDestinoDesbloqueio',
        
        :'nome' => :'nome'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'flag_cancela_cartao' => :'Integer',
        
        :'flag_cancela_no_desbloqueio' => :'Integer',
        
        :'flag_cobra_tarifa' => :'Integer',
        
        :'id' => :'Integer',
        
        :'id_status_destino_conta' => :'Integer',
        
        :'id_status_destino_desbloqueio' => :'Integer',
        
        :'nome' => :'String'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'flagCancelaCartao']
        
        
        self.flag_cancela_cartao = attributes[:'flagCancelaCartao']
        
      
      end

      
      if attributes[:'flagCancelaNoDesbloqueio']
        
        
        self.flag_cancela_no_desbloqueio = attributes[:'flagCancelaNoDesbloqueio']
        
      
      end

      
      if attributes[:'flagCobraTarifa']
        
        
        self.flag_cobra_tarifa = attributes[:'flagCobraTarifa']
        
      
      end

      
      if attributes[:'id']
        
        
        self.id = attributes[:'id']
        
      
      end

      
      if attributes[:'idStatusDestinoConta']
        
        
        self.id_status_destino_conta = attributes[:'idStatusDestinoConta']
        
      
      end

      
      if attributes[:'idStatusDestinoDesbloqueio']
        
        
        self.id_status_destino_desbloqueio = attributes[:'idStatusDestinoDesbloqueio']
        
      
      end

      
      if attributes[:'nome']
        
        
        self.nome = attributes[:'nome']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      if @flag_cancela_cartao.nil?
        return false
      end

      
      
      
      
      
      
      
      
      
      if @flag_cobra_tarifa.nil?
        return false
      end

      
      
      
      
      
      if @id.nil?
        return false
      end

      
      
      
      
      
      if @id_status_destino_conta.nil?
        return false
      end

      
      
      
      
      
      if @id_status_destino_desbloqueio.nil?
        return false
      end

      
      
      
      
      
      if @nome.nil?
        return false
      end

      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          flag_cancela_cartao == o.flag_cancela_cartao &&
          flag_cancela_no_desbloqueio == o.flag_cancela_no_desbloqueio &&
          flag_cobra_tarifa == o.flag_cobra_tarifa &&
          id == o.id &&
          id_status_destino_conta == o.id_status_destino_conta &&
          id_status_destino_desbloqueio == o.id_status_destino_desbloqueio &&
          nome == o.nome
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [flag_cancela_cartao, flag_cancela_no_desbloqueio, flag_cobra_tarifa, id, id_status_destino_conta, id_status_destino_desbloqueio, nome].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end


end
