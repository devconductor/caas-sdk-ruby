=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::GlobaltagtransferenciabancariaApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GlobaltagtransferenciabancariaApi' do
  before do
    # run before each test
    @instance = Pier::GlobaltagtransferenciabancariaApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlobaltagtransferenciabancariaApi' do
    it 'should create an instact of GlobaltagtransferenciabancariaApi' do
      @instance.should be_a(Pier::GlobaltagtransferenciabancariaApi)
    end
  end


  # unit tests for atualizar_taxas_juros_contas_using_put
  # {{{transferencia_bancaria_resource_atualizar_taxas_juros_contas}}}
  # {{{transferencia_bancaria_resource_atualizar_taxas_juros_contas_notes}}}
  # @param id {{{transferencia_bancaria_resource_salvar_taxas_juros_contas_param_id}}}
  # @param update update
  # @param [Hash] opts the optional parameters
  # @return [TaxaJurosContaResponse]
  describe 'atualizar_taxas_juros_contas_using_put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for atualizar_using_put1
  # {{{conta_bancaria_resource_atualizar}}}
  # {{{conta_bancaria_resource_atualizar_notes}}}
  # @param id {{{conta_bancaria_resource_atualizar_param_id}}}
  # @param update update
  # @param [Hash] opts the optional parameters
  # @return [ContaBancariaPortadorResponse]
  describe 'atualizar_using_put1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for cancelar_transferencia_credito_conta_bancaria_using_post
  # {{{transferencia_bancaria_resource_cancelar_transferencia_credito_conta_bancaria}}}
  # {{{transferencia_bancaria_resource_cancelar_transferencia_credito_conta_bancaria_notes}}}
  # @param id_transferencia {{{transferencia_bancaria_resource_cancelar_transferencia_credito_conta_bancaria_param_id_transferencia}}}
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'cancelar_transferencia_credito_conta_bancaria_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for confirmar_transferencia_credito_conta_bancaria_using_post
  # {{{transferencia_bancaria_resource_confirmar_transferencia_credito_conta_bancaria}}}
  # {{{transferencia_bancaria_resource_confirmar_transferencia_credito_conta_bancaria_notes}}}
  # @param id_transferencia {{{transferencia_bancaria_resource_confirmar_transferencia_credito_conta_bancaria_param_id_transferencia}}}
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'confirmar_transferencia_credito_conta_bancaria_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_taxas_juros_contas_using_get
  # {{{transferencia_bancaria_resource_consultar_taxas_juros_contas}}}
  # {{{transferencia_bancaria_resource_consultar_taxas_juros_contas_notes}}}
  # @param id {{{transferencia_bancaria_resource_salvar_taxas_juros_contas_param_id}}}
  # @param numero_meses_carencia numeroMesesCarencia
  # @param [Hash] opts the optional parameters
  # @return [TaxaJurosContaResponse]
  describe 'consultar_taxas_juros_contas_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_transferencia_bancaria_using_get
  # {{{transferencia_bancaria_resource_consultar_transferencia_bancaria}}}
  # {{{transferencia_bancaria_resource_consultar_transferencia_bancaria_notes}}}
  # @param id_transferencia {{{transferencia_bancaria_resource_consultar_transferencia_bancaria_param_id_transferencia}}}
  # @param [Hash] opts the optional parameters
  # @return [TransferenciaCreditoContaBancariaResponse]
  describe 'consultar_transferencia_bancaria_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get13
  # {{{conta_bancaria_resource_consultar}}}
  # {{{conta_bancaria_resource_consultar_notes}}}
  # @param id {{{conta_bancaria_resource_consultar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [ContaBancariaPortadorResponse]
  describe 'consultar_using_get13 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get48
  # {{{transferencia_bancaria_resource_consultar}}}
  # {{{transferencia_bancaria_resource_consultar_notes}}}
  # @param id {{{transferencia_bancaria_resource_consultar_param_id}}}
  # @param id_transferencia {{{transferencia_bancaria_resource_consultar_param_id_evento}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :id_conta_bancaria_destino {{{transferencia_bancaria_resource_consultar_param_id_conta_portador}}}
  # @return [TransferenciaBancariaResponse]
  describe 'consultar_using_get48 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_transferencia_bancaria_using_get
  # {{{transferencia_bancaria_resource_listar_transferencia_bancaria}}}
  # {{{transferencia_bancaria_resource_listar_transferencia_bancaria_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [Integer] :id_conta {{{transferencia_credito_conta_bancaria_request_id_conta_value}}}
  # @option opts [String] :data_solicitacao_inicial {{{transferencia_credito_conta_bancaria_request_data_solicitacao_inicial_value}}}
  # @option opts [String] :data_solicitacao_final {{{transferencia_credito_conta_bancaria_request_data_solicitacao_final_value}}}
  # @option opts [Integer] :status {{{transferencia_credito_conta_bancaria_request_status_value}}}
  # @return [PageTransferenciaCreditoContaBancariaResponse]
  describe 'listar_transferencia_bancaria_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get16
  # {{{conta_bancaria_resource_listar}}}
  # {{{conta_bancaria_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :id_conta {{{conta_bancaria_portador_listar_request_id_conta_value}}}
  # @option opts [String] :nome_agencia {{{conta_bancaria_portador_listar_request_nome_agencia_value}}}
  # @option opts [Integer] :banco {{{conta_bancaria_portador_listar_request_codigo_banco_value}}}
  # @option opts [String] :numero_agencia {{{conta_bancaria_portador_listar_request_numero_agencia_value}}}
  # @option opts [String] :numero_conta {{{conta_bancaria_portador_listar_request_numero_conta_value}}}
  # @option opts [Integer] :flag_ativo {{{conta_bancaria_portador_listar_request_flag_ativo_value}}}
  # @option opts [Integer] :flag_conta_origem_doc {{{conta_bancaria_portador_listar_request_flag_conta_origem_doc_value}}}
  # @option opts [Integer] :id_pessoa_fisica {{{conta_bancaria_portador_listar_request_id_pessoa_fisica_value}}}
  # @option opts [String] :favorecido {{{conta_bancaria_portador_listar_request_favorecido_value}}}
  # @option opts [String] :numero_receira_federal {{{conta_bancaria_portador_listar_request_numero_receira_federal_value}}}
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageContaBancariaPortadorResponse]
  describe 'listar_using_get16 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get59
  # {{{transferencia_bancaria_resource_listar}}}
  # {{{transferencia_bancaria_resource_listar_notes}}}
  # @param id {{{transferencia_bancaria_resource_listar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :id_conta_bancaria_destino {{{transferencia_bancaria_resource_listar_param_id_conta_portador}}}
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageTransferenciaBancariaResponse]
  describe 'listar_using_get59 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for salvar_taxas_juros_contas_using_post
  # {{{transferencia_bancaria_resource_salvar_taxas_juros_contas}}}
  # {{{transferencia_bancaria_resource_salvar_taxas_juros_contas_notes}}}
  # @param id {{{transferencia_bancaria_resource_salvar_taxas_juros_contas_param_id}}}
  # @param persist persist
  # @param [Hash] opts the optional parameters
  # @return [TaxaJurosContaResponse]
  describe 'salvar_taxas_juros_contas_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for salvar_using_post7
  # {{{conta_bancaria_resource_salvar}}}
  # {{{conta_bancaria_resource_salvar_notes}}}
  # @param persist persist
  # @param [Hash] opts the optional parameters
  # @return [ContaBancariaPortadorResponse]
  describe 'salvar_using_post7 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for simular_transferencia_bancaria_using_post
  # {{{transferencia_bancaria_resource_simular_transferencia_bancaria}}}
  # {{{transferencia_bancaria_resource_simular_transferencia_bancaria_notes}}}
  # @param request request
  # @param [Hash] opts the optional parameters
  # @return [PlanoParcelamentoTransferenciaCreditoContaBancariaResponse]
  describe 'simular_transferencia_bancaria_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for transferencia_credito_conta_bancaria_using_post
  # {{{transferencia_bancaria_resource_transferencia_credito_conta_bancaria}}}
  # {{{transferencia_bancaria_resource_transferencia_credito_conta_bancaria_notes}}}
  # @param persist persist
  # @param [Hash] opts the optional parameters
  # @return [TransferenciaCreditoContaBancariaResponse]
  describe 'transferencia_credito_conta_bancaria_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for transferir_using_post
  # {{{transferencia_bancaria_resource_transferir}}}
  # {{{transferencia_bancaria_resource_transferir_notes}}}
  # @param id {{{transferencia_bancaria_resource_transferir_param_id}}}
  # @param transferencia_bancaria_persist transferenciaBancariaPersist
  # @param [Hash] opts the optional parameters
  # @return [TransferenciaBancariaResponse]
  describe 'transferir_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


end

