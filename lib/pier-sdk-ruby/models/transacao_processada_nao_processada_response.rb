=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'date'

module Pier
  # {{{transacao_processada_nao_processada_response_description}}}
  class TransacaoProcessadaNaoProcessadaResponse
    # {{{transacao_nao_processada_response_cartao_mascarado_value}}}
    attr_accessor :cartao_mascarado

    # {{{transacao_nao_processada_response_codigo_autorizacao_value}}}
    attr_accessor :codigo_autorizacao

    # {{{transacao_nao_processada_response_codigo_mcc_value}}}
    attr_accessor :codigo_mcc

    # {{{transacao_nao_processada_response_codigo_moeda_destino_value}}}
    attr_accessor :codigo_moeda_destino

    # {{{transacao_nao_processada_response_codigo_moeda_origem_value}}}
    attr_accessor :codigo_moeda_origem

    # {{{transacao_nao_processada_response_codigo_referencia_value}}}
    attr_accessor :codigo_referencia

    # {{{transacao_nao_processada_response_codigo_terminal_value}}}
    attr_accessor :codigo_terminal

    # {{{transacao_nao_processada_response_cotacao_usd_value}}}
    attr_accessor :cotacao_usd

    # {{{transacao_nao_processada_response_data_cotacao_usd_value}}}
    attr_accessor :data_cotacao_usd

    # {{{transacao_nao_processada_response_data_faturamento_value}}}
    attr_accessor :data_faturamento

    # {{{transacao_nao_processada_response_data_origem_value}}}
    attr_accessor :data_origem

    # {{{transacao_nao_processada_response_data_vencimento_value}}}
    attr_accessor :data_vencimento_real

    # {{{transacao_nao_processada_response_descricao_abreviada_value}}}
    attr_accessor :descricao_abreviada

    # {{{transacao_nao_processada_response_descricao_tipo_transacao_nao_processada_value}}}
    attr_accessor :descricao_tipo_transacao_nao_processada

    # {{{transacao_nao_processada_response_flag_credito_value}}}
    attr_accessor :flag_credito

    # {{{transacao_nao_processada_response_flag_faturado_value}}}
    attr_accessor :flag_faturado

    # {{{transacao_nao_processada_response_grupo_descricao_mcc_value}}}
    attr_accessor :grupo_descricao_mcc

    # {{{transacao_nao_processada_response_grupo_mcc_value}}}
    attr_accessor :grupo_mcc

    # {{{transacao_nao_processada_response_id_conta_value}}}
    attr_accessor :id_conta

    # {{{transacao_nao_processada_response_id_estabelecimento_value}}}
    attr_accessor :id_estabelecimento

    # {{{transacao_nao_processada_response_id_tipo_transacao_nao_processada_value}}}
    attr_accessor :id_tipo_transacao_nao_processada

    # {{{transacao_nao_processada_response_id_transacao_estorno_value}}}
    attr_accessor :id_transacao_estorno

    # {{{transacao_nao_processada_response_localidade_estabelecimento_value}}}
    attr_accessor :localidade_estabelecimento

    # {{{transacao_nao_processada_response_modo_entrada_transacao_value}}}
    attr_accessor :modo_entrada_transacao

    # {{{transacao_nao_processada_response_nome_estabelecimento_value}}}
    attr_accessor :nome_estabelecimento

    # {{{transacao_nao_processada_response_nome_fantasia_estabelecimento_value}}}
    attr_accessor :nome_fantasia_estabelecimento

    # {{{transacao_nao_processada_response_nome_portador_value}}}
    attr_accessor :nome_portador

    # {{{transacao_nao_processada_response_numero_parcela_value}}}
    attr_accessor :parcela

    # {{{transacao_nao_processada_response_plano_parcelamento_value}}}
    attr_accessor :plano

    # {{{transacao_nao_processada_response_status_value}}}
    attr_accessor :status

    # {{{transacao_nao_processada_response_valor_taxa_embarque_value}}}
    attr_accessor :taxa_embarque

    # {{{transacao_nao_processada_response_valor_brl_value}}}
    attr_accessor :valor_brl

    # {{{transacao_nao_processada_response_valor_entrada_value}}}
    attr_accessor :valor_entrada

    # {{{transacao_nao_processada_response_valor_usd_value}}}
    attr_accessor :valor_usd


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'cartao_mascarado' => :'cartaoMascarado',
        
        :'codigo_autorizacao' => :'codigoAutorizacao',
        
        :'codigo_mcc' => :'codigoMCC',
        
        :'codigo_moeda_destino' => :'codigoMoedaDestino',
        
        :'codigo_moeda_origem' => :'codigoMoedaOrigem',
        
        :'codigo_referencia' => :'codigoReferencia',
        
        :'codigo_terminal' => :'codigoTerminal',
        
        :'cotacao_usd' => :'cotacaoUSD',
        
        :'data_cotacao_usd' => :'dataCotacaoUSD',
        
        :'data_faturamento' => :'dataFaturamento',
        
        :'data_origem' => :'dataOrigem',
        
        :'data_vencimento_real' => :'dataVencimentoReal',
        
        :'descricao_abreviada' => :'descricaoAbreviada',
        
        :'descricao_tipo_transacao_nao_processada' => :'descricaoTipoTransacaoNaoProcessada',
        
        :'flag_credito' => :'flagCredito',
        
        :'flag_faturado' => :'flagFaturado',
        
        :'grupo_descricao_mcc' => :'grupoDescricaoMCC',
        
        :'grupo_mcc' => :'grupoMCC',
        
        :'id_conta' => :'idConta',
        
        :'id_estabelecimento' => :'idEstabelecimento',
        
        :'id_tipo_transacao_nao_processada' => :'idTipoTransacaoNaoProcessada',
        
        :'id_transacao_estorno' => :'idTransacaoEstorno',
        
        :'localidade_estabelecimento' => :'localidadeEstabelecimento',
        
        :'modo_entrada_transacao' => :'modoEntradaTransacao',
        
        :'nome_estabelecimento' => :'nomeEstabelecimento',
        
        :'nome_fantasia_estabelecimento' => :'nomeFantasiaEstabelecimento',
        
        :'nome_portador' => :'nomePortador',
        
        :'parcela' => :'parcela',
        
        :'plano' => :'plano',
        
        :'status' => :'status',
        
        :'taxa_embarque' => :'taxaEmbarque',
        
        :'valor_brl' => :'valorBRL',
        
        :'valor_entrada' => :'valorEntrada',
        
        :'valor_usd' => :'valorUSD'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'cartao_mascarado' => :'String',
        
        :'codigo_autorizacao' => :'String',
        
        :'codigo_mcc' => :'Integer',
        
        :'codigo_moeda_destino' => :'String',
        
        :'codigo_moeda_origem' => :'String',
        
        :'codigo_referencia' => :'String',
        
        :'codigo_terminal' => :'String',
        
        :'cotacao_usd' => :'Float',
        
        :'data_cotacao_usd' => :'String',
        
        :'data_faturamento' => :'String',
        
        :'data_origem' => :'String',
        
        :'data_vencimento_real' => :'String',
        
        :'descricao_abreviada' => :'String',
        
        :'descricao_tipo_transacao_nao_processada' => :'String',
        
        :'flag_credito' => :'Integer',
        
        :'flag_faturado' => :'Integer',
        
        :'grupo_descricao_mcc' => :'String',
        
        :'grupo_mcc' => :'Integer',
        
        :'id_conta' => :'Integer',
        
        :'id_estabelecimento' => :'Integer',
        
        :'id_tipo_transacao_nao_processada' => :'Integer',
        
        :'id_transacao_estorno' => :'Integer',
        
        :'localidade_estabelecimento' => :'String',
        
        :'modo_entrada_transacao' => :'String',
        
        :'nome_estabelecimento' => :'String',
        
        :'nome_fantasia_estabelecimento' => :'String',
        
        :'nome_portador' => :'String',
        
        :'parcela' => :'Integer',
        
        :'plano' => :'Integer',
        
        :'status' => :'Integer',
        
        :'taxa_embarque' => :'Float',
        
        :'valor_brl' => :'Float',
        
        :'valor_entrada' => :'Float',
        
        :'valor_usd' => :'Float'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'cartaoMascarado']
        
        
        self.cartao_mascarado = attributes[:'cartaoMascarado']
        
      
      end

      
      if attributes[:'codigoAutorizacao']
        
        
        self.codigo_autorizacao = attributes[:'codigoAutorizacao']
        
      
      end

      
      if attributes[:'codigoMCC']
        
        
        self.codigo_mcc = attributes[:'codigoMCC']
        
      
      end

      
      if attributes[:'codigoMoedaDestino']
        
        
        self.codigo_moeda_destino = attributes[:'codigoMoedaDestino']
        
      
      end

      
      if attributes[:'codigoMoedaOrigem']
        
        
        self.codigo_moeda_origem = attributes[:'codigoMoedaOrigem']
        
      
      end

      
      if attributes[:'codigoReferencia']
        
        
        self.codigo_referencia = attributes[:'codigoReferencia']
        
      
      end

      
      if attributes[:'codigoTerminal']
        
        
        self.codigo_terminal = attributes[:'codigoTerminal']
        
      
      end

      
      if attributes[:'cotacaoUSD']
        
        
        self.cotacao_usd = attributes[:'cotacaoUSD']
        
      
      end

      
      if attributes[:'dataCotacaoUSD']
        
        
        self.data_cotacao_usd = attributes[:'dataCotacaoUSD']
        
      
      end

      
      if attributes[:'dataFaturamento']
        
        
        self.data_faturamento = attributes[:'dataFaturamento']
        
      
      end

      
      if attributes[:'dataOrigem']
        
        
        self.data_origem = attributes[:'dataOrigem']
        
      
      end

      
      if attributes[:'dataVencimentoReal']
        
        
        self.data_vencimento_real = attributes[:'dataVencimentoReal']
        
      
      end

      
      if attributes[:'descricaoAbreviada']
        
        
        self.descricao_abreviada = attributes[:'descricaoAbreviada']
        
      
      end

      
      if attributes[:'descricaoTipoTransacaoNaoProcessada']
        
        
        self.descricao_tipo_transacao_nao_processada = attributes[:'descricaoTipoTransacaoNaoProcessada']
        
      
      end

      
      if attributes[:'flagCredito']
        
        
        self.flag_credito = attributes[:'flagCredito']
        
      
      end

      
      if attributes[:'flagFaturado']
        
        
        self.flag_faturado = attributes[:'flagFaturado']
        
      
      end

      
      if attributes[:'grupoDescricaoMCC']
        
        
        self.grupo_descricao_mcc = attributes[:'grupoDescricaoMCC']
        
      
      end

      
      if attributes[:'grupoMCC']
        
        
        self.grupo_mcc = attributes[:'grupoMCC']
        
      
      end

      
      if attributes[:'idConta']
        
        
        self.id_conta = attributes[:'idConta']
        
      
      end

      
      if attributes[:'idEstabelecimento']
        
        
        self.id_estabelecimento = attributes[:'idEstabelecimento']
        
      
      end

      
      if attributes[:'idTipoTransacaoNaoProcessada']
        
        
        self.id_tipo_transacao_nao_processada = attributes[:'idTipoTransacaoNaoProcessada']
        
      
      end

      
      if attributes[:'idTransacaoEstorno']
        
        
        self.id_transacao_estorno = attributes[:'idTransacaoEstorno']
        
      
      end

      
      if attributes[:'localidadeEstabelecimento']
        
        
        self.localidade_estabelecimento = attributes[:'localidadeEstabelecimento']
        
      
      end

      
      if attributes[:'modoEntradaTransacao']
        
        
        self.modo_entrada_transacao = attributes[:'modoEntradaTransacao']
        
      
      end

      
      if attributes[:'nomeEstabelecimento']
        
        
        self.nome_estabelecimento = attributes[:'nomeEstabelecimento']
        
      
      end

      
      if attributes[:'nomeFantasiaEstabelecimento']
        
        
        self.nome_fantasia_estabelecimento = attributes[:'nomeFantasiaEstabelecimento']
        
      
      end

      
      if attributes[:'nomePortador']
        
        
        self.nome_portador = attributes[:'nomePortador']
        
      
      end

      
      if attributes[:'parcela']
        
        
        self.parcela = attributes[:'parcela']
        
      
      end

      
      if attributes[:'plano']
        
        
        self.plano = attributes[:'plano']
        
      
      end

      
      if attributes[:'status']
        
        
        self.status = attributes[:'status']
        
      
      end

      
      if attributes[:'taxaEmbarque']
        
        
        self.taxa_embarque = attributes[:'taxaEmbarque']
        
      
      end

      
      if attributes[:'valorBRL']
        
        
        self.valor_brl = attributes[:'valorBRL']
        
      
      end

      
      if attributes[:'valorEntrada']
        
        
        self.valor_entrada = attributes[:'valorEntrada']
        
      
      end

      
      if attributes[:'valorUSD']
        
        
        self.valor_usd = attributes[:'valorUSD']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cartao_mascarado == o.cartao_mascarado &&
          codigo_autorizacao == o.codigo_autorizacao &&
          codigo_mcc == o.codigo_mcc &&
          codigo_moeda_destino == o.codigo_moeda_destino &&
          codigo_moeda_origem == o.codigo_moeda_origem &&
          codigo_referencia == o.codigo_referencia &&
          codigo_terminal == o.codigo_terminal &&
          cotacao_usd == o.cotacao_usd &&
          data_cotacao_usd == o.data_cotacao_usd &&
          data_faturamento == o.data_faturamento &&
          data_origem == o.data_origem &&
          data_vencimento_real == o.data_vencimento_real &&
          descricao_abreviada == o.descricao_abreviada &&
          descricao_tipo_transacao_nao_processada == o.descricao_tipo_transacao_nao_processada &&
          flag_credito == o.flag_credito &&
          flag_faturado == o.flag_faturado &&
          grupo_descricao_mcc == o.grupo_descricao_mcc &&
          grupo_mcc == o.grupo_mcc &&
          id_conta == o.id_conta &&
          id_estabelecimento == o.id_estabelecimento &&
          id_tipo_transacao_nao_processada == o.id_tipo_transacao_nao_processada &&
          id_transacao_estorno == o.id_transacao_estorno &&
          localidade_estabelecimento == o.localidade_estabelecimento &&
          modo_entrada_transacao == o.modo_entrada_transacao &&
          nome_estabelecimento == o.nome_estabelecimento &&
          nome_fantasia_estabelecimento == o.nome_fantasia_estabelecimento &&
          nome_portador == o.nome_portador &&
          parcela == o.parcela &&
          plano == o.plano &&
          status == o.status &&
          taxa_embarque == o.taxa_embarque &&
          valor_brl == o.valor_brl &&
          valor_entrada == o.valor_entrada &&
          valor_usd == o.valor_usd
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cartao_mascarado, codigo_autorizacao, codigo_mcc, codigo_moeda_destino, codigo_moeda_origem, codigo_referencia, codigo_terminal, cotacao_usd, data_cotacao_usd, data_faturamento, data_origem, data_vencimento_real, descricao_abreviada, descricao_tipo_transacao_nao_processada, flag_credito, flag_faturado, grupo_descricao_mcc, grupo_mcc, id_conta, id_estabelecimento, id_tipo_transacao_nao_processada, id_transacao_estorno, localidade_estabelecimento, modo_entrada_transacao, nome_estabelecimento, nome_fantasia_estabelecimento, nome_portador, parcela, plano, status, taxa_embarque, valor_brl, valor_entrada, valor_usd].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end


end
