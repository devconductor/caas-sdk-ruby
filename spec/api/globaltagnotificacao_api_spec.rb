=begin
PIER Labs

Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::GlobaltagnotificacaoApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GlobaltagnotificacaoApi' do
  before do
    # run before each test
    @instance = Pier::GlobaltagnotificacaoApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlobaltagnotificacaoApi' do
    it 'should create an instact of GlobaltagnotificacaoApi' do
      @instance.should be_a(Pier::GlobaltagnotificacaoApi)
    end
  end

  # unit tests for alterar_configuracao_using_put
  # {{{email_resource_alterar_configuracao}}}
  # {{{email_resource_alterar_configuracao_notes}}}
  # @param id {{{email_resource_alterar_configuracao_param_id}}}
  # @param persist persist
  # @param [Hash] opts the optional parameters
  # @return [ConfiguracaoEmailResponse]
  describe 'alterar_configuracao_using_put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for alterar_template_notificacao_using_put
  # {{{notificacao_resource_alterar_template_notificacao}}}
  # {{{notificacao_resource_alterar_template_notificacao_notes}}}
  # @param id {{{notificacao_resource_alterar_template_notificacao_param_id}}}
  # @param conteudo {{{notificacao_resource_alterar_template_notificacao_param_conteudo}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :id_configuracao_email {{{template_notificacao_persist_id_configuracao_email_value}}}
  # @option opts [String] :tipo_layout {{{template_notificacao_persist_tipo_layout_value}}}
  # @option opts [String] :tipo_notificacao {{{template_notificacao_persist_tipo_notificacao_value}}}
  # @option opts [String] :remetente {{{template_notificacao_persist_remetente_value}}}
  # @option opts [String] :assunto {{{template_notificacao_persist_assunto_value}}}
  # @option opts [BOOLEAN] :template_padrao {{{template_notificacao_persist_template_padrao_value}}}
  # @return [TemplateNotificacaoDetalheResponse]
  describe 'alterar_template_notificacao_using_put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for atualizar_sms_using_post
  # {{{notificacao_resource_atualizar_s_m_s}}}
  # {{{notificacao_resource_atualizar_s_m_s_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :nsu {{{notificacao_resource_atualizar_s_m_s_param_nsu}}}
  # @option opts [String] :status {{{notificacao_resource_atualizar_s_m_s_param_status}}}
  # @option opts [String] :data {{{notificacao_resource_atualizar_s_m_s_param_data}}}
  # @option opts [String] :texto_status {{{notificacao_resource_atualizar_s_m_s_param_texto_status}}}
  # @option opts [String] :operadora {{{notificacao_resource_atualizar_s_m_s_param_operadora}}}
  # @return [NotificacaoSMSResponse]
  describe 'atualizar_sms_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for consultar_configuracao_using_get
  # {{{email_resource_consultar_configuracao}}}
  # {{{email_resource_consultar_configuracao_notes}}}
  # @param id {{{email_resource_consultar_configuracao_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [ConfiguracaoEmailResponse]
  describe 'consultar_configuracao_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for consultar_por_email_using_get
  # {{{codigo_seguranca_resource_consultar_por_email}}}
  # {{{codigo_seguranca_resource_consultar_por_email_notes}}}
  # @param id {{{codigo_seguranca_resource_consultar_por_email_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [CodigoSegurancaResponse]
  describe 'consultar_por_email_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for consultar_por_sms_using_get
  # {{{codigo_seguranca_resource_consultar_por_s_m_s}}}
  # {{{codigo_seguranca_resource_consultar_por_s_m_s_notes}}}
  # @param id {{{codigo_seguranca_resource_consultar_por_s_m_s_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [CodigoSegurancaResponse]
  describe 'consultar_por_sms_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for consultar_template_notificacao_using_get
  # {{{notificacao_resource_consultar_template_notificacao}}}
  # {{{notificacao_resource_consultar_template_notificacao_notes}}}
  # @param id {{{notificacao_resource_consultar_template_notificacao_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [TemplateNotificacaoDetalheResponse]
  describe 'consultar_template_notificacao_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for enviar_otp_using_post
  # {{{notificacao_resource_3d_secure}}}
  # {{{notificacao_resource_3d_secure_notes}}}
  # @param secure3d_request secure3dRequest
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'enviar_otp_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for gerar_token_email_using_post
  # {{{codigo_seguranca_resource_gerar_token_e_m_a_i_l}}}
  # {{{codigo_seguranca_resource_gerar_token_e_m_a_i_l_notes}}}
  # @param email email
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'gerar_token_email_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for gerar_token_sms_using_post
  # {{{codigo_seguranca_resource_gerar_token_s_m_s}}}
  # {{{codigo_seguranca_resource_gerar_token_s_m_s_notes}}}
  # @param persist persist
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'gerar_token_sms_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_configuracao_using_get
  # {{{email_resource_listar_configuracao}}}
  # {{{email_resource_listar_configuracao_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageConfiguracaoEmailResponse]
  describe 'listar_configuracao_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_por_email_using_get
  # {{{codigo_seguranca_resource_listar_por_email}}}
  # {{{codigo_seguranca_resource_listar_por_email_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageCodigoSegurancaResponse]
  describe 'listar_por_email_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_por_sms_using_get
  # {{{codigo_seguranca_resource_listar_por_s_m_s}}}
  # {{{codigo_seguranca_resource_listar_por_s_m_s_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageCodigoSegurancaResponse]
  describe 'listar_por_sms_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_push_using_get
  # {{{notificacao_resource_listar_push}}}
  # {{{notificacao_resource_listar_push_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :data_envio {{{notificacao_push_request_data_envio_value}}}
  # @option opts [String] :tipo_evento {{{notificacao_push_request_tipo_evento_value}}}
  # @option opts [String] :status {{{notificacao_push_request_status_value}}}
  # @option opts [String] :plataforma {{{notificacao_push_request_plataforma_value}}}
  # @option opts [String] :protocolo {{{notificacao_push_request_protocolo_value}}}
  # @return [PagePushResponse]
  describe 'listar_push_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_sms_using_get
  # {{{notificacao_resource_listar_s_m_s}}}
  # {{{notificacao_resource_listar_s_m_s_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :data_inclusao {{{notificacao_s_m_s_request_data_inclusao_value}}}
  # @option opts [String] :tipo_evento {{{notificacao_s_m_s_request_tipo_evento_value}}}
  # @option opts [String] :status {{{notificacao_s_m_s_request_status_value}}}
  # @option opts [String] :operadora {{{notificacao_s_m_s_request_operadora_value}}}
  # @option opts [String] :protocolo {{{notificacao_s_m_s_request_protocolo_value}}}
  # @option opts [Integer] :nsu {{{notificacao_s_m_s_request_nsu_value}}}
  # @return [PageSMSResponse]
  describe 'listar_sms_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_template_notificacao_using_get
  # {{{notificacao_resource_listar_template_notificacao}}}
  # {{{notificacao_resource_listar_template_notificacao_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageTemplateNotificacaoResponse]
  describe 'listar_template_notificacao_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_tipos_layouts_using_get
  # {{{enum_resource_listar_tipos_layouts}}}
  # {{{enum_resource_listar_tipos_layouts_notes}}}
  # @param [Hash] opts the optional parameters
  # @return [Array<Object>]
  describe 'listar_tipos_layouts_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for notificacao_email_using_post
  # {{{notificacao_resource_notificacao_email}}}
  # {{{notificacao_resource_notificacao_email_notes}}}
  # @param request request
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'notificacao_email_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for reenviar_token_sms_using_post
  # {{{codigo_seguranca_resource_reenviar_token_s_m_s}}}
  # {{{codigo_seguranca_resource_reenviar_token_s_m_s_notes}}}
  # @param persist persist
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'reenviar_token_sms_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for responder_sms_get_using_get
  # {{{notificacao_resource_responder_s_m_s_get}}}
  # {{{notificacao_resource_responder_s_m_s_get_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [String] :nsu {{{notificacao_resource_responder_s_m_s_get_param_nsu}}}
  # @option opts [String] :data {{{notificacao_resource_responder_s_m_s_get_param_data}}}
  # @option opts [String] :resposta {{{notificacao_resource_responder_s_m_s_get_param_resposta}}}
  # @return [NotificacaoSMSResponse]
  describe 'responder_sms_get_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for salvar_configuracao_using_post
  # {{{email_resource_salvar_configuracao}}}
  # {{{email_resource_salvar_configuracao_notes}}}
  # @param persist persist
  # @param [Hash] opts the optional parameters
  # @return [ConfiguracaoEmailResponse]
  describe 'salvar_configuracao_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for salvar_push_fcm_using_post
  # {{{notificacao_resource_salvar_push_f_c_m}}}
  # {{{notificacao_resource_salvar_push_f_c_m_notes}}}
  # @param push_persists pushPersists
  # @param [Hash] opts the optional parameters
  # @return [NotificacaoResponse]
  describe 'salvar_push_fcm_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for salvar_push_gcm_using_post
  # {{{notificacao_resource_salvar_push_g_c_m}}}
  # {{{notificacao_resource_salvar_push_g_c_m_notes}}}
  # @param push_persists pushPersists
  # @param [Hash] opts the optional parameters
  # @return [NotificacaoResponse]
  describe 'salvar_push_gcm_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for salvar_push_using_post
  # {{{notificacao_resource_salvar_push}}}
  # {{{notificacao_resource_salvar_push_notes}}}
  # @param push_persists pushPersists
  # @param [Hash] opts the optional parameters
  # @return [NotificacaoResponse]
  describe 'salvar_push_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for salvar_sms_using_post
  # {{{notificacao_resource_salvar_s_m_s}}}
  # {{{notificacao_resource_salvar_s_m_s_notes}}}
  # @param lista_sms listaSMS
  # @param [Hash] opts the optional parameters
  # @return [NotificacaoResponse]
  describe 'salvar_sms_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for salvar_template_notificacao_using_post
  # {{{notificacao_resource_salvar_template_notificacao}}}
  # {{{notificacao_resource_salvar_template_notificacao_notes}}}
  # @param conteudo {{{notificacao_resource_salvar_template_notificacao_param_conteudo}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :id_configuracao_email {{{template_notificacao_persist_id_configuracao_email_value}}}
  # @option opts [String] :tipo_layout {{{template_notificacao_persist_tipo_layout_value}}}
  # @option opts [String] :tipo_notificacao {{{template_notificacao_persist_tipo_notificacao_value}}}
  # @option opts [String] :remetente {{{template_notificacao_persist_remetente_value}}}
  # @option opts [String] :assunto {{{template_notificacao_persist_assunto_value}}}
  # @option opts [BOOLEAN] :template_padrao {{{template_notificacao_persist_template_padrao_value}}}
  # @return [TemplateNotificacaoDetalheResponse]
  describe 'salvar_template_notificacao_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for validar_token_email_using_post
  # {{{codigo_seguranca_resource_validar_token_e_m_a_i_l}}}
  # {{{codigo_seguranca_resource_validar_token_e_m_a_i_l_notes}}}
  # @param request request
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'validar_token_email_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for validar_token_sms_using_post
  # {{{codigo_seguranca_resource_validar_token_s_m_s}}}
  # {{{codigo_seguranca_resource_validar_token_s_m_s_notes}}}
  # @param request request
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'validar_token_sms_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
