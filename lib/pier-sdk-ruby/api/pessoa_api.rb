=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class PessoaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # Opera\u00C3\u00A7\u00C3\u00A3o utilizada para consultar uma determinada Origem Comercial 
    # Este m\u00C3\u00A9todo permite que sejam listados os registros de uma determinada Origem Comercial existente na base do emissor. Para isso, \u00C3\u00A9 preciso informar o seu respectivo c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id). 
    # @param id_origem_comercial ID da Origem Comercial
    # @param [Hash] opts the optional parameters
    # @return [OrigemComercial]
    def consultar_using_get1(id_origem_comercial, opts = {})
      data, _status_code, _headers = consultar_using_get1_with_http_info(id_origem_comercial, opts)
      return data
    end

    # Opera\u00C3\u00A7\u00C3\u00A3o utilizada para consultar uma determinada Origem Comercial 
    # Este m\u00C3\u00A9todo permite que sejam listados os registros de uma determinada Origem Comercial existente na base do emissor. Para isso, \u00C3\u00A9 preciso informar o seu respectivo c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id). 
    # @param id_origem_comercial ID da Origem Comercial
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrigemComercial, Fixnum, Hash)>] OrigemComercial data, response status code and response headers
    def consultar_using_get1_with_http_info(id_origem_comercial, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PessoaApi.consultar_using_get1 ..."
      end
      
      
      # verify the required parameter 'id_origem_comercial' is set
      fail ArgumentError, "Missing the required parameter 'id_origem_comercial' when calling PessoaApi.consultar_using_get1" if id_origem_comercial.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas/{id_origem_comercial}".sub('{format}','json').sub('{' + 'id_origem_comercial' + '}', id_origem_comercial.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrigemComercial')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PessoaApi#consultar_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista as Pessoas cadastradas no Emissor
    # Este m\u00C3\u00A9todo permite que sejam listadas as Pessoas existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_pessoa C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id).
    # @option opts [String] :nome Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;.
    # @option opts [String] :tipo C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00C3\u00ADsica), (\&quot;PJ\&quot;: Pessoa Jur\u00C3\u00ADdica).
    # @option opts [String] :cpf N\u00C3\u00BAmero do CPF, quando PF.
    # @option opts [String] :cnpj N\u00C3\u00BAmero do CNPJ, quando PJ.
    # @option opts [DateTime] :data_nascimento Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ.
    # @option opts [String] :cnpj2 N\u00C3\u00BAmero do CNPJ, quando PJ.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [ListaDeOrigensComerciais]
    def listar_using_get1(opts = {})
      data, _status_code, _headers = listar_using_get1_with_http_info(opts)
      return data
    end

    # Lista as Pessoas cadastradas no Emissor
    # Este m\u00C3\u00A9todo permite que sejam listadas as Pessoas existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_pessoa C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id).
    # @option opts [String] :nome Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)&#39;.
    # @option opts [String] :tipo C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00C3\u00ADsica), (\&quot;PJ\&quot;: Pessoa Jur\u00C3\u00ADdica).
    # @option opts [String] :cpf N\u00C3\u00BAmero do CPF, quando PF.
    # @option opts [String] :cnpj N\u00C3\u00BAmero do CNPJ, quando PJ.
    # @option opts [DateTime] :data_nascimento Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ.
    # @option opts [String] :cnpj2 N\u00C3\u00BAmero do CNPJ, quando PJ.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @return [Array<(ListaDeOrigensComerciais, Fixnum, Hash)>] ListaDeOrigensComerciais data, response status code and response headers
    def listar_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PessoaApi.listar_using_get1 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id_pessoa'] = opts[:'id_pessoa'] if opts[:'id_pessoa']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']
      query_params[:'tipo'] = opts[:'tipo'] if opts[:'tipo']
      query_params[:'cpf'] = opts[:'cpf'] if opts[:'cpf']
      query_params[:'cnpj'] = opts[:'cnpj'] if opts[:'cnpj']
      query_params[:'data_nascimento'] = opts[:'data_nascimento'] if opts[:'data_nascimento']
      query_params[:'cnpj'] = opts[:'cnpj2'] if opts[:'cnpj2']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListaDeOrigensComerciais')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PessoaApi#listar_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
