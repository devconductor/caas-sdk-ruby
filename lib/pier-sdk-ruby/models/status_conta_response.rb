=begin
PIER Labs

Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require 'date'

module Pier
  # Status Conta
  class StatusContaResponse
    # C\u00F3digo de Identifica\u00E7\u00E3o do Status da Conta (id).
    attr_accessor :id

    # Nome atribu\u00EDdo ao Status da Conta.
    attr_accessor :nome

    # Par\u00E2metro que define se o Status da conta permite a solicita\u00E7\u00E3o da altera\u00E7\u00E3o do Dia para Vencimento das Faturas, sendo: 0: Inativo e 1: Ativo.
    attr_accessor :permite_alterar_vencimento

    # Par\u00E2metro que define se o Status da conta permite altera\u00E7\u00E3o de Limites, sendo: 0: Inativo e 1: Ativo.
    attr_accessor :permite_alterar_limite

    # Par\u00E2metro que define se o Status da conta permite solicitar uma nova via de Cart\u00E3o, sendo: 0: Inativo e 1: Ativo.
    attr_accessor :permite_emitir_nova_via_cartao

    # Par\u00E2metro que define se o Status da conta permite originar Transfer\u00EAncias de Cr\u00E9dito para outras Contas do mesmo Emissor ou para uma Conta Banc\u00E1ria, sendo: 0: Inativo e 1: Ativo.
    attr_accessor :permite_fazer_transferencia

    # Par\u00E2metro que define se o Status da conta permite  receber Transfer\u00EAncias de Cr\u00E9dito originadas de outras Contas do mesmo emissor, sendo: 0: Inativo e 1: Ativo.
    attr_accessor :permite_receber_transferencia

    # Par\u00E2metro que define se o Status da conta permite ter um Acordo de Cobran\u00E7a de D\u00EDvida criado para ela, sendo: 0: Inativo e 1: Ativo.
    attr_accessor :permite_criar_acordo_cobranca

    # Par\u00E2metro que define se o Status da conta permite ser atribu\u00EDdo para Bloquear temporariamente uma Conta, sendo: 0: Inativo e 1: Ativo.
    attr_accessor :permite_atribuir_como_bloqueio

    # Par\u00E2metro que define se o Status da conta permite ser desbloqueada, sendo: 0: Inativo e 1: Ativo.
    attr_accessor :permite_desbloquear

    # Par\u00E2metro que define se o Status da conta permite ser atribu\u00EDdo para realizar o cancelamento definitivo de uma conta, sendo: 0: Inativo e 1: Ativo.
    attr_accessor :permite_atribuir_como_cancelamento

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'id',
        
        :'nome' => :'nome',
        
        :'permite_alterar_vencimento' => :'permiteAlterarVencimento',
        
        :'permite_alterar_limite' => :'permiteAlterarLimite',
        
        :'permite_emitir_nova_via_cartao' => :'permiteEmitirNovaViaCartao',
        
        :'permite_fazer_transferencia' => :'permiteFazerTransferencia',
        
        :'permite_receber_transferencia' => :'permiteReceberTransferencia',
        
        :'permite_criar_acordo_cobranca' => :'permiteCriarAcordoCobranca',
        
        :'permite_atribuir_como_bloqueio' => :'permiteAtribuirComoBloqueio',
        
        :'permite_desbloquear' => :'permiteDesbloquear',
        
        :'permite_atribuir_como_cancelamento' => :'permiteAtribuirComoCancelamento'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'id' => :'Integer',
        
        :'nome' => :'String',
        
        :'permite_alterar_vencimento' => :'Integer',
        
        :'permite_alterar_limite' => :'Integer',
        
        :'permite_emitir_nova_via_cartao' => :'Integer',
        
        :'permite_fazer_transferencia' => :'Integer',
        
        :'permite_receber_transferencia' => :'Integer',
        
        :'permite_criar_acordo_cobranca' => :'Integer',
        
        :'permite_atribuir_como_bloqueio' => :'Integer',
        
        :'permite_desbloquear' => :'Integer',
        
        :'permite_atribuir_como_cancelamento' => :'Integer'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'id']
        
        
        self.id = attributes[:'id']
        
      
      end

      
      if attributes[:'nome']
        
        
        self.nome = attributes[:'nome']
        
      
      end

      
      if attributes[:'permiteAlterarVencimento']
        
        
        self.permite_alterar_vencimento = attributes[:'permiteAlterarVencimento']
        
      
      end

      
      if attributes[:'permiteAlterarLimite']
        
        
        self.permite_alterar_limite = attributes[:'permiteAlterarLimite']
        
      
      end

      
      if attributes[:'permiteEmitirNovaViaCartao']
        
        
        self.permite_emitir_nova_via_cartao = attributes[:'permiteEmitirNovaViaCartao']
        
      
      end

      
      if attributes[:'permiteFazerTransferencia']
        
        
        self.permite_fazer_transferencia = attributes[:'permiteFazerTransferencia']
        
      
      end

      
      if attributes[:'permiteReceberTransferencia']
        
        
        self.permite_receber_transferencia = attributes[:'permiteReceberTransferencia']
        
      
      end

      
      if attributes[:'permiteCriarAcordoCobranca']
        
        
        self.permite_criar_acordo_cobranca = attributes[:'permiteCriarAcordoCobranca']
        
      
      end

      
      if attributes[:'permiteAtribuirComoBloqueio']
        
        
        self.permite_atribuir_como_bloqueio = attributes[:'permiteAtribuirComoBloqueio']
        
      
      end

      
      if attributes[:'permiteDesbloquear']
        
        
        self.permite_desbloquear = attributes[:'permiteDesbloquear']
        
      
      end

      
      if attributes[:'permiteAtribuirComoCancelamento']
        
        
        self.permite_atribuir_como_cancelamento = attributes[:'permiteAtribuirComoCancelamento']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      if @id.nil?
        return false
      end

      
      
      
      
      
      if @nome.nil?
        return false
      end

      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          nome == o.nome &&
          permite_alterar_vencimento == o.permite_alterar_vencimento &&
          permite_alterar_limite == o.permite_alterar_limite &&
          permite_emitir_nova_via_cartao == o.permite_emitir_nova_via_cartao &&
          permite_fazer_transferencia == o.permite_fazer_transferencia &&
          permite_receber_transferencia == o.permite_receber_transferencia &&
          permite_criar_acordo_cobranca == o.permite_criar_acordo_cobranca &&
          permite_atribuir_como_bloqueio == o.permite_atribuir_como_bloqueio &&
          permite_desbloquear == o.permite_desbloquear &&
          permite_atribuir_como_cancelamento == o.permite_atribuir_como_cancelamento
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, nome, permite_alterar_vencimento, permite_alterar_limite, permite_emitir_nova_via_cartao, permite_fazer_transferencia, permite_receber_transferencia, permite_criar_acordo_cobranca, permite_atribuir_como_bloqueio, permite_desbloquear, permite_atribuir_como_cancelamento].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
