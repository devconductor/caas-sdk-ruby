=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for Pier::ProdutoDetalhesResponse
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ProdutoDetalhesResponse' do
  before do
    # run before each test
    @instance = Pier::ProdutoDetalhesResponse.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ProdutoDetalhesResponse' do
    it 'should create an instact of ProdutoDetalhesResponse' do
      @instance.should be_a(Pier::ProdutoDetalhesResponse) 
    end
  end

  describe 'test attribute "id"' do
    it 'should work' do
       # assertion here
       # should be_a()
       # should be_nil
       # should ==
       # should_not ==
    end
  end


  describe 'test attribute "nome"' do
    it 'should work' do
       # assertion here
       # should be_a()
       # should be_nil
       # should ==
       # should_not ==
    end
  end


  describe 'test attribute "status"' do
    it 'should work' do
       # assertion here
       # should be_a()
       # should be_nil
       # should ==
       # should_not ==
    end
  end


  describe 'test attribute "id_fantasia_basica"' do
    it 'should work' do
       # assertion here
       # should be_a()
       # should be_nil
       # should ==
       # should_not ==
    end
  end


  describe 'test attribute "fantasia_basica"' do
    it 'should work' do
       # assertion here
       # should be_a()
       # should be_nil
       # should ==
       # should_not ==
    end
  end


  describe 'test attribute "uso_exterior"' do
    it 'should work' do
       # assertion here
       # should be_a()
       # should be_nil
       # should ==
       # should_not ==
    end
  end


end

