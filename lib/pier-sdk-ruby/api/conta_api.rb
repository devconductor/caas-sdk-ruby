=begin
PIER Labs

Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require "uri"

module Pier
  class ContaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Buscar contas
    # Consulte contas filtrando pelos campos id do emissor, n\u00C3\u00BAmero do cart\u00C3\u00A3o, nome ou CPF/CNPJ 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nome Nome
    # @option opts [String] :cpf CPF (opcional caso nao informe o n\u00C3\u00BAmero do cart\u00C3\u00A3o ou id da conta)
    # @option opts [String] :numero_cartao N\u00C3\u00BAmero do cart\u00C3\u00A3o (opcional caso n\u00C3\u00A3o informa o cpf ou id da conta)
    # @option opts [Integer] :id_conta ID da Conta (opcional caso n\u00C3\u00A3o informe o n\u00C3\u00BAmero do cart\u00C3\u00A3o ou cpf)
    # @return [ConsultarContaResponse]
    def buscar_conta_using_get(opts = {})
      data, _status_code, _headers = buscar_conta_using_get_with_http_info(opts)
      return data
    end

    # Buscar contas
    # Consulte contas filtrando pelos campos id do emissor, n\u00C3\u00BAmero do cart\u00C3\u00A3o, nome ou CPF/CNPJ 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nome Nome
    # @option opts [String] :cpf CPF (opcional caso nao informe o n\u00C3\u00BAmero do cart\u00C3\u00A3o ou id da conta)
    # @option opts [String] :numero_cartao N\u00C3\u00BAmero do cart\u00C3\u00A3o (opcional caso n\u00C3\u00A3o informa o cpf ou id da conta)
    # @option opts [Integer] :id_conta ID da Conta (opcional caso n\u00C3\u00A3o informe o n\u00C3\u00BAmero do cart\u00C3\u00A3o ou cpf)
    # @return [Array<(ConsultarContaResponse, Fixnum, Hash)>] ConsultarContaResponse data, response status code and response headers
    def buscar_conta_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.buscar_conta_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/buscar".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']
      query_params[:'cpf'] = opts[:'cpf'] if opts[:'cpf']
      query_params[:'numeroCartao'] = opts[:'numero_cartao'] if opts[:'numero_cartao']
      query_params[:'idConta'] = opts[:'id_conta'] if opts[:'id_conta']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsultarContaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#buscar_conta_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retorna uma conta
    # Consulte informa\u00C3\u00A7\u00C3\u00B5es de uma determinada conta
    # @param id_conta ID da Conta
    # @param [Hash] opts the optional parameters
    # @return [ContaResponse]
    def consultar_conta_using_get(id_conta, opts = {})
      data, _status_code, _headers = consultar_conta_using_get_with_http_info(id_conta, opts)
      return data
    end

    # Retorna uma conta
    # Consulte informa\u00C3\u00A7\u00C3\u00B5es de uma determinada conta
    # @param id_conta ID da Conta
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContaResponse, Fixnum, Hash)>] ContaResponse data, response status code and response headers
    def consultar_conta_using_get_with_http_info(id_conta, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.consultar_conta_using_get ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling ContaApi.consultar_conta_using_get" if id_conta.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{idConta}".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#consultar_conta_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retorna os extratos
    # Consulte os extratos de uma determinada conta
    # @param id_conta ID da Conta
    # @param data_vencimento Data limite para o vencimento das transa\u00C3\u00A7\u00C3\u00B5es
    # @param [Hash] opts the optional parameters
    # @return [ConsultarExtratoContaResponse]
    def consultar_extrato_faturas_using_get(id_conta, data_vencimento, opts = {})
      data, _status_code, _headers = consultar_extrato_faturas_using_get_with_http_info(id_conta, data_vencimento, opts)
      return data
    end

    # Retorna os extratos
    # Consulte os extratos de uma determinada conta
    # @param id_conta ID da Conta
    # @param data_vencimento Data limite para o vencimento das transa\u00C3\u00A7\u00C3\u00B5es
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConsultarExtratoContaResponse, Fixnum, Hash)>] ConsultarExtratoContaResponse data, response status code and response headers
    def consultar_extrato_faturas_using_get_with_http_info(id_conta, data_vencimento, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.consultar_extrato_faturas_using_get ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling ContaApi.consultar_extrato_faturas_using_get" if id_conta.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_vencimento' is set
      fail ArgumentError, "Missing the required parameter 'data_vencimento' when calling ContaApi.consultar_extrato_faturas_using_get" if data_vencimento.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{idConta}/faturas".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s)

      # query parameters
      query_params = {}
      query_params[:'dataVencimento'] = data_vencimento

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsultarExtratoContaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#consultar_extrato_faturas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retorna o limite
    # Consulte os limites de uma determinada conta
    # @param id_conta ID da Conta
    # @param [Hash] opts the optional parameters
    # @return [ConsultarSaldoLimitesResponse]
    def consultar_saldos_limites_using_get(id_conta, opts = {})
      data, _status_code, _headers = consultar_saldos_limites_using_get_with_http_info(id_conta, opts)
      return data
    end

    # Retorna o limite
    # Consulte os limites de uma determinada conta
    # @param id_conta ID da Conta
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConsultarSaldoLimitesResponse, Fixnum, Hash)>] ConsultarSaldoLimitesResponse data, response status code and response headers
    def consultar_saldos_limites_using_get_with_http_info(id_conta, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContaApi.consultar_saldos_limites_using_get ..."
      end
      
      
      # verify the required parameter 'id_conta' is set
      fail ArgumentError, "Missing the required parameter 'id_conta' when calling ContaApi.consultar_saldos_limites_using_get" if id_conta.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{idConta}/limites".sub('{format}','json').sub('{' + 'idConta' + '}', id_conta.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsultarSaldoLimitesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContaApi#consultar_saldos_limites_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
