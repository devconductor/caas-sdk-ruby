=begin
PIER Labs

Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require "uri"

module Pier
  class GlobaltagusuarioApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # {{{usuario_resource_alterar_senha_login}}}
    # {{{usuario_resource_alterar_senha_login_notes}}}
    # @param login {{{usuario_resource_alterar_senha_login_param_login}}}
    # @param senha_nova {{{usuario_resource_alterar_senha_login_param_senha_nova}}}
    # @param [Hash] opts the optional parameters
    # @return [String]
    def alterar_senha_login_using_post(login, senha_nova, opts = {})
      data, _status_code, _headers = alterar_senha_login_using_post_with_http_info(login, senha_nova, opts)
      return data
    end

    # {{{usuario_resource_alterar_senha_login}}}
    # {{{usuario_resource_alterar_senha_login_notes}}}
    # @param login {{{usuario_resource_alterar_senha_login_param_login}}}
    # @param senha_nova {{{usuario_resource_alterar_senha_login_param_senha_nova}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def alterar_senha_login_using_post_with_http_info(login, senha_nova, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.alterar_senha_login_using_post ..."
      end
      
      
      # verify the required parameter 'login' is set
      fail ArgumentError, "Missing the required parameter 'login' when calling GlobaltagusuarioApi.alterar_senha_login_using_post" if login.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha_nova' is set
      fail ArgumentError, "Missing the required parameter 'senha_nova' when calling GlobaltagusuarioApi.alterar_senha_login_using_post" if senha_nova.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/usuarios/{login}/alterar-senha".sub('{format}','json').sub('{' + 'login' + '}', login.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'senhaNova'] = senha_nova

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#alterar_senha_login_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{usuario_resource_alterar_senha}}}
    # {{{usuario_resource_alterar_senha_notes}}}
    # @param id {{{usuario_resource_alterar_senha_param_id}}}
    # @param senha_atual {{{usuario_resource_alterar_senha_param_senha_atual}}}
    # @param senha_nova {{{usuario_resource_alterar_senha_param_senha_nova}}}
    # @param [Hash] opts the optional parameters
    # @return [String]
    def alterar_senha_using_put(id, senha_atual, senha_nova, opts = {})
      data, _status_code, _headers = alterar_senha_using_put_with_http_info(id, senha_atual, senha_nova, opts)
      return data
    end

    # {{{usuario_resource_alterar_senha}}}
    # {{{usuario_resource_alterar_senha_notes}}}
    # @param id {{{usuario_resource_alterar_senha_param_id}}}
    # @param senha_atual {{{usuario_resource_alterar_senha_param_senha_atual}}}
    # @param senha_nova {{{usuario_resource_alterar_senha_param_senha_nova}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def alterar_senha_using_put_with_http_info(id, senha_atual, senha_nova, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.alterar_senha_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagusuarioApi.alterar_senha_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha_atual' is set
      fail ArgumentError, "Missing the required parameter 'senha_atual' when calling GlobaltagusuarioApi.alterar_senha_using_put" if senha_atual.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha_nova' is set
      fail ArgumentError, "Missing the required parameter 'senha_nova' when calling GlobaltagusuarioApi.alterar_senha_using_put" if senha_nova.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/usuarios/{id}/alterar-senha".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'senha_atual'] = senha_atual
      header_params[:'senha_nova'] = senha_nova

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#alterar_senha_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{usuario_resource_alterar}}}
    # {{{usuario_resource_alterar_notes}}}
    # @param id {{{usuario_resource_alterar_param_id}}}
    # @param update update
    # @param [Hash] opts the optional parameters
    # @return [UsuarioResponse]
    def alterar_using_put23(id, update, opts = {})
      data, _status_code, _headers = alterar_using_put23_with_http_info(id, update, opts)
      return data
    end

    # {{{usuario_resource_alterar}}}
    # {{{usuario_resource_alterar_notes}}}
    # @param id {{{usuario_resource_alterar_param_id}}}
    # @param update update
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsuarioResponse, Fixnum, Hash)>] UsuarioResponse data, response status code and response headers
    def alterar_using_put23_with_http_info(id, update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.alterar_using_put23 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagusuarioApi.alterar_using_put23" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'update' is set
      fail ArgumentError, "Missing the required parameter 'update' when calling GlobaltagusuarioApi.alterar_using_put23" if update.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/usuarios/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UsuarioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#alterar_using_put23\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{usuario_resource_ativar_usuario}}}
    # {{{usuario_resource_ativar_usuario_notes}}}
    # @param id {{{usuario_resource_ativar_usuario_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [UsuarioResponse]
    def ativar_usuario_using_post1(id, opts = {})
      data, _status_code, _headers = ativar_usuario_using_post1_with_http_info(id, opts)
      return data
    end

    # {{{usuario_resource_ativar_usuario}}}
    # {{{usuario_resource_ativar_usuario_notes}}}
    # @param id {{{usuario_resource_ativar_usuario_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsuarioResponse, Fixnum, Hash)>] UsuarioResponse data, response status code and response headers
    def ativar_usuario_using_post1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.ativar_usuario_using_post1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagusuarioApi.ativar_usuario_using_post1" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/usuarios/{id}/ativar-usuario".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UsuarioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#ativar_usuario_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{controle_seguranca_dispositivo_atualizar}}}
    # {{{controle_seguranca_dispositivo_atualizar_notas}}}
    # @param update update
    # @param [Hash] opts the optional parameters
    # @return [ControleSegurancaDispositivoResponse]
    def atualizar_using_put3(update, opts = {})
      data, _status_code, _headers = atualizar_using_put3_with_http_info(update, opts)
      return data
    end

    # {{{controle_seguranca_dispositivo_atualizar}}}
    # {{{controle_seguranca_dispositivo_atualizar_notas}}}
    # @param update update
    # @param [Hash] opts the optional parameters
    # @return [Array<(ControleSegurancaDispositivoResponse, Fixnum, Hash)>] ControleSegurancaDispositivoResponse data, response status code and response headers
    def atualizar_using_put3_with_http_info(update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.atualizar_using_put3 ..."
      end
      
      
      # verify the required parameter 'update' is set
      fail ArgumentError, "Missing the required parameter 'update' when calling GlobaltagusuarioApi.atualizar_using_put3" if update.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/controles-seguranca-dispositivos".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ControleSegurancaDispositivoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#atualizar_using_put3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{usuario_recurso_listar_por_id_usuario}}}
    # {{{usuario_recurso_listar_por_id_usuario_notas}}}
    # @param id {{{usuario_recurso_listar_por_id_param_id_usuario}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageUsuarioContasResponse]
    def consultar_contas_vinculadas_using_get(id, opts = {})
      data, _status_code, _headers = consultar_contas_vinculadas_using_get_with_http_info(id, opts)
      return data
    end

    # {{{usuario_recurso_listar_por_id_usuario}}}
    # {{{usuario_recurso_listar_por_id_usuario_notas}}}
    # @param id {{{usuario_recurso_listar_por_id_param_id_usuario}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageUsuarioContasResponse, Fixnum, Hash)>] PageUsuarioContasResponse data, response status code and response headers
    def consultar_contas_vinculadas_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.consultar_contas_vinculadas_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagusuarioApi.consultar_contas_vinculadas_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/usuarios/{id}/vincular-contas".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageUsuarioContasResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#consultar_contas_vinculadas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{controle_seguranca_dispositivo_consultar}}}
    # {{{controle_seguranca_dispositivo_consultar_notas}}}
    # @param id_usuario {{{usuario_resource_consultar_param_idUsuario}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageControleSegurancaDispositivoResponse]
    def consultar_using_get17(id_usuario, opts = {})
      data, _status_code, _headers = consultar_using_get17_with_http_info(id_usuario, opts)
      return data
    end

    # {{{controle_seguranca_dispositivo_consultar}}}
    # {{{controle_seguranca_dispositivo_consultar_notas}}}
    # @param id_usuario {{{usuario_resource_consultar_param_idUsuario}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageControleSegurancaDispositivoResponse, Fixnum, Hash)>] PageControleSegurancaDispositivoResponse data, response status code and response headers
    def consultar_using_get17_with_http_info(id_usuario, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.consultar_using_get17 ..."
      end
      
      
      # verify the required parameter 'id_usuario' is set
      fail ArgumentError, "Missing the required parameter 'id_usuario' when calling GlobaltagusuarioApi.consultar_using_get17" if id_usuario.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/controles-seguranca-dispositivos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idUsuario'] = id_usuario
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageControleSegurancaDispositivoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#consultar_using_get17\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{usuario_resource_consultar}}}
    # {{{usuario_resource_consultar_notes}}}
    # @param id {{{usuario_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [UsuarioResponse]
    def consultar_using_get53(id, opts = {})
      data, _status_code, _headers = consultar_using_get53_with_http_info(id, opts)
      return data
    end

    # {{{usuario_resource_consultar}}}
    # {{{usuario_resource_consultar_notes}}}
    # @param id {{{usuario_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsuarioResponse, Fixnum, Hash)>] UsuarioResponse data, response status code and response headers
    def consultar_using_get53_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.consultar_using_get53 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagusuarioApi.consultar_using_get53" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/usuarios/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UsuarioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#consultar_using_get53\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{usuario_resource_desativar_usuario}}}
    # {{{usuario_resource_desativar_usuario_notes}}}
    # @param id {{{usuario_resource_desativar_usuario_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [UsuarioResponse]
    def desativar_usuario_using_post1(id, opts = {})
      data, _status_code, _headers = desativar_usuario_using_post1_with_http_info(id, opts)
      return data
    end

    # {{{usuario_resource_desativar_usuario}}}
    # {{{usuario_resource_desativar_usuario_notes}}}
    # @param id {{{usuario_resource_desativar_usuario_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsuarioResponse, Fixnum, Hash)>] UsuarioResponse data, response status code and response headers
    def desativar_usuario_using_post1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.desativar_usuario_using_post1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagusuarioApi.desativar_usuario_using_post1" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/usuarios/{id}/desativar-usuario".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UsuarioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#desativar_usuario_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{usuario_resource_listar}}}
    # {{{usuario_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :nome {{{usuario_request_nome_value}}}
    # @option opts [String] :cpf {{{usuario_request_cpf_value}}}
    # @option opts [String] :email {{{usuario_request_email_value}}}
    # @option opts [String] :status {{{usuario_request_status_value}}}
    # @return [PageUsuarioResponse]
    def listar_using_get65(opts = {})
      data, _status_code, _headers = listar_using_get65_with_http_info(opts)
      return data
    end

    # {{{usuario_resource_listar}}}
    # {{{usuario_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :nome {{{usuario_request_nome_value}}}
    # @option opts [String] :cpf {{{usuario_request_cpf_value}}}
    # @option opts [String] :email {{{usuario_request_email_value}}}
    # @option opts [String] :status {{{usuario_request_status_value}}}
    # @return [Array<(PageUsuarioResponse, Fixnum, Hash)>] PageUsuarioResponse data, response status code and response headers
    def listar_using_get65_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.listar_using_get65 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'status'] && !['INATIVO', 'ATIVO'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of INATIVO, ATIVO'
      end
      
      
      
      
      # resource path
      local_var_path = "/api/usuarios".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']
      query_params[:'cpf'] = opts[:'cpf'] if opts[:'cpf']
      query_params[:'email'] = opts[:'email'] if opts[:'email']
      query_params[:'status'] = opts[:'status'] if opts[:'status']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageUsuarioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#listar_using_get65\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{usuario_resource_recuperar_senha}}}
    # {{{usuario_resource_recuperar_senha_notes}}}
    # @param id {{{usuario_resource_recuperar_senha_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [String]
    def recuperar_senha_using_post(id, opts = {})
      data, _status_code, _headers = recuperar_senha_using_post_with_http_info(id, opts)
      return data
    end

    # {{{usuario_resource_recuperar_senha}}}
    # {{{usuario_resource_recuperar_senha_notes}}}
    # @param id {{{usuario_resource_recuperar_senha_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def recuperar_senha_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.recuperar_senha_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagusuarioApi.recuperar_senha_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/usuarios/{id}/recuperar-senha".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#recuperar_senha_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{controle_seguranca_dispositivo_salvar}}}
    # {{{controle_seguranca_dispositivo_salvar_notas}}}
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [ControleSegurancaDispositivoResponse]
    def salvar_using_post10(persist, opts = {})
      data, _status_code, _headers = salvar_using_post10_with_http_info(persist, opts)
      return data
    end

    # {{{controle_seguranca_dispositivo_salvar}}}
    # {{{controle_seguranca_dispositivo_salvar_notas}}}
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [Array<(ControleSegurancaDispositivoResponse, Fixnum, Hash)>] ControleSegurancaDispositivoResponse data, response status code and response headers
    def salvar_using_post10_with_http_info(persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.salvar_using_post10 ..."
      end
      
      
      # verify the required parameter 'persist' is set
      fail ArgumentError, "Missing the required parameter 'persist' when calling GlobaltagusuarioApi.salvar_using_post10" if persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/controles-seguranca-dispositivos".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ControleSegurancaDispositivoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#salvar_using_post10\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{usuario_resource_salvar}}}
    # {{{usuario_resource_salvar_notes}}}
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [UsuarioResponse]
    def salvar_using_post34(persist, opts = {})
      data, _status_code, _headers = salvar_using_post34_with_http_info(persist, opts)
      return data
    end

    # {{{usuario_resource_salvar}}}
    # {{{usuario_resource_salvar_notes}}}
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsuarioResponse, Fixnum, Hash)>] UsuarioResponse data, response status code and response headers
    def salvar_using_post34_with_http_info(persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.salvar_using_post34 ..."
      end
      
      
      # verify the required parameter 'persist' is set
      fail ArgumentError, "Missing the required parameter 'persist' when calling GlobaltagusuarioApi.salvar_using_post34" if persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/usuarios".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UsuarioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#salvar_using_post34\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{usuario_resource_validar_senha_forte}}}
    # {{{usuario_resource_validar_senha_forte_notes}}}
    # @param senha {{{usuario_resource_validar_senha_forte_param_senha}}}
    # @param usuario_senha_forte_persist {{{usuario_resource_validar_senha_forte_param_id_plataforma}}}
    # @param [Hash] opts the optional parameters
    # @return [String]
    def validar_senha_forte_using_post(senha, usuario_senha_forte_persist, opts = {})
      data, _status_code, _headers = validar_senha_forte_using_post_with_http_info(senha, usuario_senha_forte_persist, opts)
      return data
    end

    # {{{usuario_resource_validar_senha_forte}}}
    # {{{usuario_resource_validar_senha_forte_notes}}}
    # @param senha {{{usuario_resource_validar_senha_forte_param_senha}}}
    # @param usuario_senha_forte_persist {{{usuario_resource_validar_senha_forte_param_id_plataforma}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def validar_senha_forte_using_post_with_http_info(senha, usuario_senha_forte_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.validar_senha_forte_using_post ..."
      end
      
      
      # verify the required parameter 'senha' is set
      fail ArgumentError, "Missing the required parameter 'senha' when calling GlobaltagusuarioApi.validar_senha_forte_using_post" if senha.nil?
      
      
      
      
      
      
      # verify the required parameter 'usuario_senha_forte_persist' is set
      fail ArgumentError, "Missing the required parameter 'usuario_senha_forte_persist' when calling GlobaltagusuarioApi.validar_senha_forte_using_post" if usuario_senha_forte_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/usuarios/validar-senha-forte".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'senha'] = senha

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(usuario_senha_forte_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#validar_senha_forte_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{usuario_resource_validar_senha_login}}}
    # {{{usuario_resource_validar_senha_login_notes}}}
    # @param login {{{usuario_resource_validar_senha_login_param_login}}}
    # @param senha {{{usuario_resource_validar_senha_login_param_senha}}}
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def validar_senha_login_using_post(login, senha, opts = {})
      data, _status_code, _headers = validar_senha_login_using_post_with_http_info(login, senha, opts)
      return data
    end

    # {{{usuario_resource_validar_senha_login}}}
    # {{{usuario_resource_validar_senha_login_notes}}}
    # @param login {{{usuario_resource_validar_senha_login_param_login}}}
    # @param senha {{{usuario_resource_validar_senha_login_param_senha}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def validar_senha_login_using_post_with_http_info(login, senha, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.validar_senha_login_using_post ..."
      end
      
      
      # verify the required parameter 'login' is set
      fail ArgumentError, "Missing the required parameter 'login' when calling GlobaltagusuarioApi.validar_senha_login_using_post" if login.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha' is set
      fail ArgumentError, "Missing the required parameter 'senha' when calling GlobaltagusuarioApi.validar_senha_login_using_post" if senha.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/usuarios/{login}/validar-senha".sub('{format}','json').sub('{' + 'login' + '}', login.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'senha'] = senha

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#validar_senha_login_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{usuario_resource_validar_senha}}}
    # {{{usuario_resource_validar_senha_notes}}}
    # @param senha {{{usuario_resource_validar_senha_param_senha}}}
    # @param id {{{usuario_resource_validar_senha_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [String]
    def validar_senha_using_get1(senha, id, opts = {})
      data, _status_code, _headers = validar_senha_using_get1_with_http_info(senha, id, opts)
      return data
    end

    # {{{usuario_resource_validar_senha}}}
    # {{{usuario_resource_validar_senha_notes}}}
    # @param senha {{{usuario_resource_validar_senha_param_senha}}}
    # @param id {{{usuario_resource_validar_senha_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def validar_senha_using_get1_with_http_info(senha, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.validar_senha_using_get1 ..."
      end
      
      
      # verify the required parameter 'senha' is set
      fail ArgumentError, "Missing the required parameter 'senha' when calling GlobaltagusuarioApi.validar_senha_using_get1" if senha.nil?
      
      
      
      
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagusuarioApi.validar_senha_using_get1" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/usuarios/{id}/validar-senha".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'senha'] = senha

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#validar_senha_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # {{{usuario_recurso_vincular_usuarios}}}
    # {{{usuario_recurso_vincular_usuarios_notas}}}
    # @param id {{{usuario_recurso_vincular_usuarios_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [String]
    def vincular_contas_using_post(id, opts = {})
      data, _status_code, _headers = vincular_contas_using_post_with_http_info(id, opts)
      return data
    end

    # {{{usuario_recurso_vincular_usuarios}}}
    # {{{usuario_recurso_vincular_usuarios_notas}}}
    # @param id {{{usuario_recurso_vincular_usuarios_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def vincular_contas_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagusuarioApi.vincular_contas_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagusuarioApi.vincular_contas_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/usuarios/{id}/vincular-usuarios".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagusuarioApi#vincular_contas_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
