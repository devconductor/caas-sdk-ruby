=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class GlobaltagfaqApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # {{{faq_resource_adicionar}}}
    # {{{faq_resource_adicionar_notes}}}
    # @param pergunta {{{faq_persist_pergunta_value}}}
    # @param resposta {{{faq_persist_resposta_value}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :relevancia {{{faq_persist_relevancia_value}}}
    # @option opts [String] :plataforma {{{faq_persist_plataforma_value}}}
    # @option opts [String] :categoria {{{faq_persist_categoria_value}}}
    # @option opts [String] :status {{{faq_persist_status_value}}}
    # @return [FaqResponse]
    def adicionar_using_post(pergunta, resposta, opts = {})
      data, _status_code, _headers = adicionar_using_post_with_http_info(pergunta, resposta, opts)
      return data
    end

    # {{{faq_resource_adicionar}}}
    # {{{faq_resource_adicionar_notes}}}
    # @param pergunta {{{faq_persist_pergunta_value}}}
    # @param resposta {{{faq_persist_resposta_value}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :relevancia {{{faq_persist_relevancia_value}}}
    # @option opts [String] :plataforma {{{faq_persist_plataforma_value}}}
    # @option opts [String] :categoria {{{faq_persist_categoria_value}}}
    # @option opts [String] :status {{{faq_persist_status_value}}}
    # @return [Array<(FaqResponse, Fixnum, Hash)>] FaqResponse data, response status code and response headers
    def adicionar_using_post_with_http_info(pergunta, resposta, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagfaqApi.adicionar_using_post ..."
      end
      
      
      # verify the required parameter 'pergunta' is set
      fail ArgumentError, "Missing the required parameter 'pergunta' when calling GlobaltagfaqApi.adicionar_using_post" if pergunta.nil?
      
      
      
      
      
      
      # verify the required parameter 'resposta' is set
      fail ArgumentError, "Missing the required parameter 'resposta' when calling GlobaltagfaqApi.adicionar_using_post" if resposta.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'status'] && !['INATIVO', 'ATIVO'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of INATIVO, ATIVO'
      end
      
      
      
      
      # resource path
      local_var_path = "/api/faqs".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pergunta'] = pergunta
      query_params[:'resposta'] = resposta
      query_params[:'relevancia'] = opts[:'relevancia'] if opts[:'relevancia']
      query_params[:'plataforma'] = opts[:'plataforma'] if opts[:'plataforma']
      query_params[:'categoria'] = opts[:'categoria'] if opts[:'categoria']
      query_params[:'status'] = opts[:'status'] if opts[:'status']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FaqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagfaqApi#adicionar_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{faq_resource_alterar}}}
    # {{{faq_resource_alterar_notes}}}
    # @param id {{{faq_resource_alterar_param_id_faq}}}
    # @param pergunta {{{faq_persist_pergunta_value}}}
    # @param resposta {{{faq_persist_resposta_value}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :relevancia {{{faq_persist_relevancia_value}}}
    # @option opts [String] :plataforma {{{faq_persist_plataforma_value}}}
    # @option opts [String] :categoria {{{faq_persist_categoria_value}}}
    # @option opts [String] :status {{{faq_persist_status_value}}}
    # @return [FaqResponse]
    def alterar_using_put7(id, pergunta, resposta, opts = {})
      data, _status_code, _headers = alterar_using_put7_with_http_info(id, pergunta, resposta, opts)
      return data
    end

    # {{{faq_resource_alterar}}}
    # {{{faq_resource_alterar_notes}}}
    # @param id {{{faq_resource_alterar_param_id_faq}}}
    # @param pergunta {{{faq_persist_pergunta_value}}}
    # @param resposta {{{faq_persist_resposta_value}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :relevancia {{{faq_persist_relevancia_value}}}
    # @option opts [String] :plataforma {{{faq_persist_plataforma_value}}}
    # @option opts [String] :categoria {{{faq_persist_categoria_value}}}
    # @option opts [String] :status {{{faq_persist_status_value}}}
    # @return [Array<(FaqResponse, Fixnum, Hash)>] FaqResponse data, response status code and response headers
    def alterar_using_put7_with_http_info(id, pergunta, resposta, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagfaqApi.alterar_using_put7 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagfaqApi.alterar_using_put7" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'pergunta' is set
      fail ArgumentError, "Missing the required parameter 'pergunta' when calling GlobaltagfaqApi.alterar_using_put7" if pergunta.nil?
      
      
      
      
      
      
      # verify the required parameter 'resposta' is set
      fail ArgumentError, "Missing the required parameter 'resposta' when calling GlobaltagfaqApi.alterar_using_put7" if resposta.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'status'] && !['INATIVO', 'ATIVO'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of INATIVO, ATIVO'
      end
      
      
      
      
      # resource path
      local_var_path = "/api/faqs/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pergunta'] = pergunta
      query_params[:'resposta'] = resposta
      query_params[:'relevancia'] = opts[:'relevancia'] if opts[:'relevancia']
      query_params[:'plataforma'] = opts[:'plataforma'] if opts[:'plataforma']
      query_params[:'categoria'] = opts[:'categoria'] if opts[:'categoria']
      query_params[:'status'] = opts[:'status'] if opts[:'status']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FaqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagfaqApi#alterar_using_put7\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{faq_resource_consultar}}}
    # {{{faq_resource_consultar_notes}}}
    # @param id {{{faq_resource_consultar_param_id_faq}}}
    # @param [Hash] opts the optional parameters
    # @return [FaqResponse]
    def consultar_using_get20(id, opts = {})
      data, _status_code, _headers = consultar_using_get20_with_http_info(id, opts)
      return data
    end

    # {{{faq_resource_consultar}}}
    # {{{faq_resource_consultar_notes}}}
    # @param id {{{faq_resource_consultar_param_id_faq}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(FaqResponse, Fixnum, Hash)>] FaqResponse data, response status code and response headers
    def consultar_using_get20_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagfaqApi.consultar_using_get20 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagfaqApi.consultar_using_get20" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/faqs/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FaqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagfaqApi#consultar_using_get20\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{faq_resource_listar}}}
    # {{{faq_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_faq {{{faq_request_id_faq_value}}}
    # @option opts [String] :pergunta {{{faq_request_pergunta_value}}}
    # @option opts [String] :resposta {{{faq_request_resposta_value}}}
    # @option opts [Integer] :relevancia {{{faq_request_relevancia_value}}}
    # @option opts [String] :plataforma {{{faq_request_plataforma_value}}}
    # @option opts [String] :categoria {{{faq_request_categoria_value}}}
    # @option opts [String] :status {{{faq_request_status_value}}}
    # @return [PageFaqResponse]
    def listar_using_get26(opts = {})
      data, _status_code, _headers = listar_using_get26_with_http_info(opts)
      return data
    end

    # {{{faq_resource_listar}}}
    # {{{faq_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_faq {{{faq_request_id_faq_value}}}
    # @option opts [String] :pergunta {{{faq_request_pergunta_value}}}
    # @option opts [String] :resposta {{{faq_request_resposta_value}}}
    # @option opts [Integer] :relevancia {{{faq_request_relevancia_value}}}
    # @option opts [String] :plataforma {{{faq_request_plataforma_value}}}
    # @option opts [String] :categoria {{{faq_request_categoria_value}}}
    # @option opts [String] :status {{{faq_request_status_value}}}
    # @return [Array<(PageFaqResponse, Fixnum, Hash)>] PageFaqResponse data, response status code and response headers
    def listar_using_get26_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagfaqApi.listar_using_get26 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'status'] && !['INATIVO', 'ATIVO'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of INATIVO, ATIVO'
      end
      
      
      
      
      # resource path
      local_var_path = "/api/faqs".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idFaq'] = opts[:'id_faq'] if opts[:'id_faq']
      query_params[:'pergunta'] = opts[:'pergunta'] if opts[:'pergunta']
      query_params[:'resposta'] = opts[:'resposta'] if opts[:'resposta']
      query_params[:'relevancia'] = opts[:'relevancia'] if opts[:'relevancia']
      query_params[:'plataforma'] = opts[:'plataforma'] if opts[:'plataforma']
      query_params[:'categoria'] = opts[:'categoria'] if opts[:'categoria']
      query_params[:'status'] = opts[:'status'] if opts[:'status']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageFaqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagfaqApi#listar_using_get26\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
