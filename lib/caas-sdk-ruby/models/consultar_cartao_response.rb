=begin
CaaS - Conductor as a Service

GestÃ£o de pagamento eletrÃ´nicos como serviÃ§o

OpenAPI spec version: 0.0.1
Contact: contato@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html


=end

require 'date'

module CaaS
  class ConsultarCartaoResponse
    attr_accessor :codigo_retorno

    attr_accessor :cvv2

    attr_accessor :data_validade

    attr_accessor :descricao_retorno

    attr_accessor :id_cartao

    attr_accessor :id_conta

    attr_accessor :nome_portador

    attr_accessor :num_cartao

    attr_accessor :saldo_disponivel

    attr_accessor :status_cartao

    attr_accessor :status_conta

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'codigo_retorno' => :'codigoRetorno',
        
        :'cvv2' => :'cvv2',
        
        :'data_validade' => :'dataValidade',
        
        :'descricao_retorno' => :'descricaoRetorno',
        
        :'id_cartao' => :'idCartao',
        
        :'id_conta' => :'idConta',
        
        :'nome_portador' => :'nomePortador',
        
        :'num_cartao' => :'numCartao',
        
        :'saldo_disponivel' => :'saldoDisponivel',
        
        :'status_cartao' => :'statusCartao',
        
        :'status_conta' => :'statusConta'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'codigo_retorno' => :'Integer',
        
        :'cvv2' => :'String',
        
        :'data_validade' => :'String',
        
        :'descricao_retorno' => :'String',
        
        :'id_cartao' => :'Integer',
        
        :'id_conta' => :'Integer',
        
        :'nome_portador' => :'String',
        
        :'num_cartao' => :'String',
        
        :'saldo_disponivel' => :'Float',
        
        :'status_cartao' => :'Integer',
        
        :'status_conta' => :'Integer'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'codigoRetorno']
        
        
        self.codigo_retorno = attributes[:'codigoRetorno']
        
      
      end

      
      if attributes[:'cvv2']
        
        
        self.cvv2 = attributes[:'cvv2']
        
      
      end

      
      if attributes[:'dataValidade']
        
        
        self.data_validade = attributes[:'dataValidade']
        
      
      end

      
      if attributes[:'descricaoRetorno']
        
        
        self.descricao_retorno = attributes[:'descricaoRetorno']
        
      
      end

      
      if attributes[:'idCartao']
        
        
        self.id_cartao = attributes[:'idCartao']
        
      
      end

      
      if attributes[:'idConta']
        
        
        self.id_conta = attributes[:'idConta']
        
      
      end

      
      if attributes[:'nomePortador']
        
        
        self.nome_portador = attributes[:'nomePortador']
        
      
      end

      
      if attributes[:'numCartao']
        
        
        self.num_cartao = attributes[:'numCartao']
        
      
      end

      
      if attributes[:'saldoDisponivel']
        
        
        self.saldo_disponivel = attributes[:'saldoDisponivel']
        
      
      end

      
      if attributes[:'statusCartao']
        
        
        self.status_cartao = attributes[:'statusCartao']
        
      
      end

      
      if attributes[:'statusConta']
        
        
        self.status_conta = attributes[:'statusConta']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          codigo_retorno == o.codigo_retorno &&
          cvv2 == o.cvv2 &&
          data_validade == o.data_validade &&
          descricao_retorno == o.descricao_retorno &&
          id_cartao == o.id_cartao &&
          id_conta == o.id_conta &&
          nome_portador == o.nome_portador &&
          num_cartao == o.num_cartao &&
          saldo_disponivel == o.saldo_disponivel &&
          status_cartao == o.status_cartao &&
          status_conta == o.status_conta
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [codigo_retorno, cvv2, data_validade, descricao_retorno, id_cartao, id_conta, nome_portador, num_cartao, saldo_disponivel, status_cartao, status_conta].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        #DateTime.parse(value)
        value
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CaaS.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
