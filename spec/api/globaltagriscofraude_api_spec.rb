=begin
PIER Labs

Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::GlobaltagriscofraudeApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GlobaltagriscofraudeApi' do
  before do
    # run before each test
    @instance = Pier::GlobaltagriscofraudeApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlobaltagriscofraudeApi' do
    it 'should create an instact of GlobaltagriscofraudeApi' do
      @instance.should be_a(Pier::GlobaltagriscofraudeApi)
    end
  end

  # unit tests for consultar_using_get37
  # {{{risco_fraude_resource_consultar}}}
  # {{{risco_fraude_resource_consultar_notes}}}
  # @param id {{{risco_fraude_resource_consultar_param_id_risco_fraude}}}
  # @param [Hash] opts the optional parameters
  # @return [RiscoFraudeDetalhadoResponse]
  describe 'consultar_using_get37 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_tipos_resolucao_using_get
  # {{{risco_fraude_resource_listar_tipos_resolucao}}}
  # {{{risco_fraude_resource_listar_tipos_resolucao_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
  # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
  # @return [TipoResolucaoResponse]
  describe 'listar_tipos_resolucao_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for negar_using_post
  # {{{risco_fraude_resource_negar}}}
  # {{{risco_fraude_resource_negar_notes}}}
  # @param id {{{risco_fraude_resource_negar_param_id_risco_fraude}}}
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'negar_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for reconhecer_using_post
  # {{{risco_fraude_resource_reconhecer}}}
  # {{{risco_fraude_resource_reconhecer_notes}}}
  # @param id {{{risco_fraude_resource_reconhecer_param_id_risco_fraude}}}
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'reconhecer_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for validar_dados_portador_using_post
  # {{{risco_fraude_resource_validar_dados_portador}}}
  # {{{risco_fraude_resource_validar_dados_portador_notes}}}
  # @param request request
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'validar_dados_portador_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
