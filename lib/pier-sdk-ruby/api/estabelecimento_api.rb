=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class EstabelecimentoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # Alterar Pessoa Jur\u00C3\u00ADdica
    # Altera uma pessoa jur\u00C3\u00ADdica.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da pessoa jur\u00C3\u00ADdica
    # @param razao_social Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inscricao_estadual N\u00C3\u00BAmero da inscri\u00C3\u00A7\u00C3\u00A3o estadual
    # @option opts [String] :contato Nome da pessoa para entrar em contato
    # @option opts [Integer] :banco C\u00C3\u00B3digo do banco
    # @option opts [Integer] :agencia Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @option opts [String] :digito_verificador_agencia D\u00C3\u00ADgito Verificador da ag\u00C3\u00AAncia
    # @option opts [String] :conta_corrente C\u00C3\u00B3digo da Conta Corrente
    # @option opts [String] :digito_verificador_conta_corrente D\u00C3\u00ADgito Verificador da Conta Corrente
    # @return [PessoaJuridicaResponse]
    def alterar_using_put11(id, razao_social, opts = {})
      data, _status_code, _headers = alterar_using_put11_with_http_info(id, razao_social, opts)
      return data
    end

    # Alterar Pessoa Jur\u00C3\u00ADdica
    # Altera uma pessoa jur\u00C3\u00ADdica.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da pessoa jur\u00C3\u00ADdica
    # @param razao_social Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inscricao_estadual N\u00C3\u00BAmero da inscri\u00C3\u00A7\u00C3\u00A3o estadual
    # @option opts [String] :contato Nome da pessoa para entrar em contato
    # @option opts [Integer] :banco C\u00C3\u00B3digo do banco
    # @option opts [Integer] :agencia Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @option opts [String] :digito_verificador_agencia D\u00C3\u00ADgito Verificador da ag\u00C3\u00AAncia
    # @option opts [String] :conta_corrente C\u00C3\u00B3digo da Conta Corrente
    # @option opts [String] :digito_verificador_conta_corrente D\u00C3\u00ADgito Verificador da Conta Corrente
    # @return [Array<(PessoaJuridicaResponse, Fixnum, Hash)>] PessoaJuridicaResponse data, response status code and response headers
    def alterar_using_put11_with_http_info(id, razao_social, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.alterar_using_put11 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.alterar_using_put11" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'razao_social' is set
      fail ArgumentError, "Missing the required parameter 'razao_social' when calling EstabelecimentoApi.alterar_using_put11" if razao_social.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas-juridicas/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'razaoSocial'] = razao_social
      query_params[:'inscricaoEstadual'] = opts[:'inscricao_estadual'] if opts[:'inscricao_estadual']
      query_params[:'contato'] = opts[:'contato'] if opts[:'contato']
      query_params[:'banco'] = opts[:'banco'] if opts[:'banco']
      query_params[:'agencia'] = opts[:'agencia'] if opts[:'agencia']
      query_params[:'digitoVerificadorAgencia'] = opts[:'digito_verificador_agencia'] if opts[:'digito_verificador_agencia']
      query_params[:'contaCorrente'] = opts[:'conta_corrente'] if opts[:'conta_corrente']
      query_params[:'digitoVerificadorContaCorrente'] = opts[:'digito_verificador_conta_corrente'] if opts[:'digito_verificador_conta_corrente']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PessoaJuridicaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#alterar_using_put11\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Altera um Telefone do estabelecimento
    # Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o dos telefones dos estabelecimentos.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone Estabelecimento (id).
    # @param ddd C\u00C3\u00B3digo DDD do telefone (id).
    # @param telefone N\u00C3\u00BAmero do telefone.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ramal N\u00C3\u00BAmero do ramal.
    # @return [TelefoneEstabelecimentoResponse]
    def alterar_using_put13(id, ddd, telefone, opts = {})
      data, _status_code, _headers = alterar_using_put13_with_http_info(id, ddd, telefone, opts)
      return data
    end

    # Altera um Telefone do estabelecimento
    # Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o dos telefones dos estabelecimentos.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone Estabelecimento (id).
    # @param ddd C\u00C3\u00B3digo DDD do telefone (id).
    # @param telefone N\u00C3\u00BAmero do telefone.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ramal N\u00C3\u00BAmero do ramal.
    # @return [Array<(TelefoneEstabelecimentoResponse, Fixnum, Hash)>] TelefoneEstabelecimentoResponse data, response status code and response headers
    def alterar_using_put13_with_http_info(id, ddd, telefone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.alterar_using_put13 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.alterar_using_put13" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'ddd' is set
      fail ArgumentError, "Missing the required parameter 'ddd' when calling EstabelecimentoApi.alterar_using_put13" if ddd.nil?
      
      
      
      
      
      
      # verify the required parameter 'telefone' is set
      fail ArgumentError, "Missing the required parameter 'telefone' when calling EstabelecimentoApi.alterar_using_put13" if telefone.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/telefones-estabelecimentos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ddd'] = ddd
      query_params[:'telefone'] = telefone
      query_params[:'ramal'] = opts[:'ramal'] if opts[:'ramal']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TelefoneEstabelecimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#alterar_using_put13\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Altera um Terminal
    # Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o dos Terminais.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do terminal (id).
    # @param terminal_update terminalUpdate
    # @param [Hash] opts the optional parameters
    # @return [TerminalResponse]
    def alterar_using_put15(id, terminal_update, opts = {})
      data, _status_code, _headers = alterar_using_put15_with_http_info(id, terminal_update, opts)
      return data
    end

    # Altera um Terminal
    # Este m\u00C3\u00A9todo realiza a altera\u00C3\u00A7\u00C3\u00A3o dos Terminais.
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do terminal (id).
    # @param terminal_update terminalUpdate
    # @param [Hash] opts the optional parameters
    # @return [Array<(TerminalResponse, Fixnum, Hash)>] TerminalResponse data, response status code and response headers
    def alterar_using_put15_with_http_info(id, terminal_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.alterar_using_put15 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.alterar_using_put15" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'terminal_update' is set
      fail ArgumentError, "Missing the required parameter 'terminal_update' when calling EstabelecimentoApi.alterar_using_put15" if terminal_update.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/terminais/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(terminal_update)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TerminalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#alterar_using_put15\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Alterar Credor
    # Altera um credor.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da credor
    # @param credor_update credorUpdate
    # @param [Hash] opts the optional parameters
    # @return [CredorResponse]
    def alterar_using_put5(id, credor_update, opts = {})
      data, _status_code, _headers = alterar_using_put5_with_http_info(id, credor_update, opts)
      return data
    end

    # Alterar Credor
    # Altera um credor.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da credor
    # @param credor_update credorUpdate
    # @param [Hash] opts the optional parameters
    # @return [Array<(CredorResponse, Fixnum, Hash)>] CredorResponse data, response status code and response headers
    def alterar_using_put5_with_http_info(id, credor_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.alterar_using_put5 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.alterar_using_put5" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'credor_update' is set
      fail ArgumentError, "Missing the required parameter 'credor_update' when calling EstabelecimentoApi.alterar_using_put5" if credor_update.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/credores/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(credor_update)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CredorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#alterar_using_put5\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Cadastrar Credor
    # Cadastra um credor.
    # @param credor_persist credorPersist
    # @param [Hash] opts the optional parameters
    # @return [CredorResponse]
    def cadastrar_using_post2(credor_persist, opts = {})
      data, _status_code, _headers = cadastrar_using_post2_with_http_info(credor_persist, opts)
      return data
    end

    # Cadastrar Credor
    # Cadastra um credor.
    # @param credor_persist credorPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(CredorResponse, Fixnum, Hash)>] CredorResponse data, response status code and response headers
    def cadastrar_using_post2_with_http_info(credor_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.cadastrar_using_post2 ..."
      end
      
      
      # verify the required parameter 'credor_persist' is set
      fail ArgumentError, "Missing the required parameter 'credor_persist' when calling EstabelecimentoApi.cadastrar_using_post2" if credor_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/credores".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(credor_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CredorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#cadastrar_using_post2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Cadastrar Pessoa Jur\u00C3\u00ADdica
    # Cadastra uma pessoa jur\u00C3\u00ADdica.
    # @param razao_social Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @param cnpj C\u00C3\u00B3digo do Cadastro Nacional de Pessoas Jur\u00C3\u00ADdicas
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inscricao_estadual N\u00C3\u00BAmero da inscri\u00C3\u00A7\u00C3\u00A3o estadual
    # @option opts [String] :contato Nome da pessoa para entrar em contato
    # @option opts [Integer] :banco C\u00C3\u00B3digo do banco
    # @option opts [Integer] :agencia Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @option opts [String] :digito_verificador_agencia D\u00C3\u00ADgito Verificador da ag\u00C3\u00AAncia
    # @option opts [String] :conta_corrente C\u00C3\u00B3digo da Conta Corrente
    # @option opts [String] :digito_verificador_conta_corrente D\u00C3\u00ADgito Verificador da Conta Corrente
    # @return [PessoaJuridicaResponse]
    def cadastrar_using_post3(razao_social, cnpj, opts = {})
      data, _status_code, _headers = cadastrar_using_post3_with_http_info(razao_social, cnpj, opts)
      return data
    end

    # Cadastrar Pessoa Jur\u00C3\u00ADdica
    # Cadastra uma pessoa jur\u00C3\u00ADdica.
    # @param razao_social Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @param cnpj C\u00C3\u00B3digo do Cadastro Nacional de Pessoas Jur\u00C3\u00ADdicas
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inscricao_estadual N\u00C3\u00BAmero da inscri\u00C3\u00A7\u00C3\u00A3o estadual
    # @option opts [String] :contato Nome da pessoa para entrar em contato
    # @option opts [Integer] :banco C\u00C3\u00B3digo do banco
    # @option opts [Integer] :agencia Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @option opts [String] :digito_verificador_agencia D\u00C3\u00ADgito Verificador da ag\u00C3\u00AAncia
    # @option opts [String] :conta_corrente C\u00C3\u00B3digo da Conta Corrente
    # @option opts [String] :digito_verificador_conta_corrente D\u00C3\u00ADgito Verificador da Conta Corrente
    # @return [Array<(PessoaJuridicaResponse, Fixnum, Hash)>] PessoaJuridicaResponse data, response status code and response headers
    def cadastrar_using_post3_with_http_info(razao_social, cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.cadastrar_using_post3 ..."
      end
      
      
      # verify the required parameter 'razao_social' is set
      fail ArgumentError, "Missing the required parameter 'razao_social' when calling EstabelecimentoApi.cadastrar_using_post3" if razao_social.nil?
      
      
      
      
      
      
      # verify the required parameter 'cnpj' is set
      fail ArgumentError, "Missing the required parameter 'cnpj' when calling EstabelecimentoApi.cadastrar_using_post3" if cnpj.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas-juridicas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'razaoSocial'] = razao_social
      query_params[:'cnpj'] = cnpj
      query_params[:'inscricaoEstadual'] = opts[:'inscricao_estadual'] if opts[:'inscricao_estadual']
      query_params[:'contato'] = opts[:'contato'] if opts[:'contato']
      query_params[:'banco'] = opts[:'banco'] if opts[:'banco']
      query_params[:'agencia'] = opts[:'agencia'] if opts[:'agencia']
      query_params[:'digitoVerificadorAgencia'] = opts[:'digito_verificador_agencia'] if opts[:'digito_verificador_agencia']
      query_params[:'contaCorrente'] = opts[:'conta_corrente'] if opts[:'conta_corrente']
      query_params[:'digitoVerificadorContaCorrente'] = opts[:'digito_verificador_conta_corrente'] if opts[:'digito_verificador_conta_corrente']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PessoaJuridicaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#cadastrar_using_post3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Apresenta dados de um determinado tipo de opera\u00C3\u00A7\u00C3\u00A3o
    # Este recurso permite consultar dados de um determinado tipo opera\u00C3\u00A7\u00C3\u00A3o a partir do idoperacao
    # @param id C\u00C3\u00B3digo de processamento da opera\u00C3\u00A7\u00C3\u00A3o (idOperacao).
    # @param [Hash] opts the optional parameters
    # @return [DetalheOperacaoResponse]
    def consulta_operacao_using_get(id, opts = {})
      data, _status_code, _headers = consulta_operacao_using_get_with_http_info(id, opts)
      return data
    end

    # Apresenta dados de um determinado tipo de opera\u00C3\u00A7\u00C3\u00A3o
    # Este recurso permite consultar dados de um determinado tipo opera\u00C3\u00A7\u00C3\u00A3o a partir do idoperacao
    # @param id C\u00C3\u00B3digo de processamento da opera\u00C3\u00A7\u00C3\u00A3o (idOperacao).
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetalheOperacaoResponse, Fixnum, Hash)>] DetalheOperacaoResponse data, response status code and response headers
    def consulta_operacao_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consulta_operacao_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consulta_operacao_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-operacoes-estabelecimentos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetalheOperacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consulta_operacao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Consultar credor
    # Consulta um credor atrav\u00C3\u00A9s do seu identificador.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da credor
    # @param [Hash] opts the optional parameters
    # @return [CredorResponse]
    def consultar_using_get12(id, opts = {})
      data, _status_code, _headers = consultar_using_get12_with_http_info(id, opts)
      return data
    end

    # Consultar credor
    # Consulta um credor atrav\u00C3\u00A9s do seu identificador.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da credor
    # @param [Hash] opts the optional parameters
    # @return [Array<(CredorResponse, Fixnum, Hash)>] CredorResponse data, response status code and response headers
    def consultar_using_get12_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consultar_using_get12 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consultar_using_get12" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/credores/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CredorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consultar_using_get12\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Consultar estabelecimento por id
    # Consulta os detalhes de um determinado estabelecimento
    # @param id Id
    # @param [Hash] opts the optional parameters
    # @return [EstabelecimentoResponse]
    def consultar_using_get16(id, opts = {})
      data, _status_code, _headers = consultar_using_get16_with_http_info(id, opts)
      return data
    end

    # Consultar estabelecimento por id
    # Consulta os detalhes de um determinado estabelecimento
    # @param id Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(EstabelecimentoResponse, Fixnum, Hash)>] EstabelecimentoResponse data, response status code and response headers
    def consultar_using_get16_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consultar_using_get16 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consultar_using_get16" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/estabelecimentos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EstabelecimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consultar_using_get16\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Consultar pessoa jur\u00C3\u00ADdica
    # Consulta uma pessoa jur\u00C3\u00ADdica atrav\u00C3\u00A9s do seu identificador.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da pessoa jur\u00C3\u00ADdica
    # @param [Hash] opts the optional parameters
    # @return [PessoaJuridicaResponse]
    def consultar_using_get21(id, opts = {})
      data, _status_code, _headers = consultar_using_get21_with_http_info(id, opts)
      return data
    end

    # Consultar pessoa jur\u00C3\u00ADdica
    # Consulta uma pessoa jur\u00C3\u00ADdica atrav\u00C3\u00A9s do seu identificador.
    # @param id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da pessoa jur\u00C3\u00ADdica
    # @param [Hash] opts the optional parameters
    # @return [Array<(PessoaJuridicaResponse, Fixnum, Hash)>] PessoaJuridicaResponse data, response status code and response headers
    def consultar_using_get21_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consultar_using_get21 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consultar_using_get21" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas-juridicas/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PessoaJuridicaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consultar_using_get21\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Apresenta os dados de um determinado telefone de um estabelecimento
    # Este m\u00C3\u00A9todo permite consultar um determinado telefone de um estabelecimento a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone Estabelecimento (id).
    # @param [Hash] opts the optional parameters
    # @return [TelefoneEstabelecimentoResponse]
    def consultar_using_get27(id, opts = {})
      data, _status_code, _headers = consultar_using_get27_with_http_info(id, opts)
      return data
    end

    # Apresenta os dados de um determinado telefone de um estabelecimento
    # Este m\u00C3\u00A9todo permite consultar um determinado telefone de um estabelecimento a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone Estabelecimento (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(TelefoneEstabelecimentoResponse, Fixnum, Hash)>] TelefoneEstabelecimentoResponse data, response status code and response headers
    def consultar_using_get27_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consultar_using_get27 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consultar_using_get27" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/telefones-estabelecimentos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TelefoneEstabelecimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consultar_using_get27\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Apresenta os dados de um determinado Terminal
    # Este m\u00C3\u00A9todo permite consultar um determinado Terminal a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Terminal (id).
    # @param [Hash] opts the optional parameters
    # @return [TerminalResponse]
    def consultar_using_get29(id, opts = {})
      data, _status_code, _headers = consultar_using_get29_with_http_info(id, opts)
      return data
    end

    # Apresenta os dados de um determinado Terminal
    # Este m\u00C3\u00A9todo permite consultar um determinado Terminal a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Terminal (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(TerminalResponse, Fixnum, Hash)>] TerminalResponse data, response status code and response headers
    def consultar_using_get29_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.consultar_using_get29 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling EstabelecimentoApi.consultar_using_get29" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/terminais/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TerminalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#consultar_using_get29\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Apresenta dados de opera\u00C3\u00A7\u00C3\u00B5es em uma lista
    # Este recurso permite listar as opera\u00C3\u00A7\u00C3\u00A3o
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_operacao C\u00C3\u00B3digo que identifica a opera\u00C3\u00A7\u00C3\u00A3o
    # @option opts [String] :codigo_processamento C\u00C3\u00B3digo de processamento usado em transa\u00C3\u00A7\u00C3\u00B5es com o autorizador
    # @return [PageOperacaoResponse]
    def lista_operacao_using_get(opts = {})
      data, _status_code, _headers = lista_operacao_using_get_with_http_info(opts)
      return data
    end

    # Apresenta dados de opera\u00C3\u00A7\u00C3\u00B5es em uma lista
    # Este recurso permite listar as opera\u00C3\u00A7\u00C3\u00A3o
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_operacao C\u00C3\u00B3digo que identifica a opera\u00C3\u00A7\u00C3\u00A3o
    # @option opts [String] :codigo_processamento C\u00C3\u00B3digo de processamento usado em transa\u00C3\u00A7\u00C3\u00B5es com o autorizador
    # @return [Array<(PageOperacaoResponse, Fixnum, Hash)>] PageOperacaoResponse data, response status code and response headers
    def lista_operacao_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.lista_operacao_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/tipos-operacoes-estabelecimentos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idOperacao'] = opts[:'id_operacao'] if opts[:'id_operacao']
      query_params[:'codigoProcessamento'] = opts[:'codigo_processamento'] if opts[:'codigo_processamento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOperacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#lista_operacao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Listar credores
    # Lista credores cadastrados. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_pessoa_juridica Identificador da pessoa jur\u00C3\u00ADdica do credor
    # @option opts [String] :nome Nome do credor
    # @option opts [String] :periodicidade Periodicidade do pagamento
    # @option opts [String] :pagamento_semanal Dia para pagamento semanal
    # @option opts [Integer] :pagamento_mensal Dia da data para o pagamento mensal
    # @option opts [Integer] :pagamento_decendial_primeiro Dia da data para o primeiro pagamento decendial
    # @option opts [Integer] :pagamento_decendial_segundo Dia da data para o segundo pagamento decendial
    # @option opts [Integer] :pagamento_decendial_terceiro Dia da data para o terceiro pagamento decendial
    # @option opts [Integer] :pagamento_quinzenal_primeiro Dia da data para o primeiro pagamento quinzenal
    # @option opts [Integer] :pagamento_quinzenal_segundo Dia da data para o segundo pagamento quinzenal
    # @option opts [BOOLEAN] :credor_banco Indica se este credor pode ser um Credor RAV de outros credores
    # @option opts [Float] :percentual_rav Valor percentual do RAV do credor
    # @option opts [String] :recebe_rav Indica se o credor recebe RAV e o tipo
    # @option opts [Float] :percentual_multiplica Percentual Multiplica
    # @option opts [Float] :taxa_adm Taxa Administrativa
    # @option opts [Float] :taxa_banco Taxa do Banco
    # @option opts [Float] :limite_rav Valor limite do RAV
    # @option opts [Integer] :id_credor_rav C\u00C3\u00B3digo identificador do credor RAV
    # @option opts [Integer] :banco C\u00C3\u00B3digo do banco
    # @option opts [Integer] :agencia Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @option opts [String] :digito_verificador_agencia D\u00C3\u00ADgito Verificador da ag\u00C3\u00AAncia
    # @option opts [String] :conta_corrente C\u00C3\u00B3digo da Conta Corrente
    # @option opts [String] :digito_verificador_conta_corrente D\u00C3\u00ADgito Verificador da Conta Corrente
    # @return [PageCredorResponse]
    def listar_using_get14(opts = {})
      data, _status_code, _headers = listar_using_get14_with_http_info(opts)
      return data
    end

    # Listar credores
    # Lista credores cadastrados. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_pessoa_juridica Identificador da pessoa jur\u00C3\u00ADdica do credor
    # @option opts [String] :nome Nome do credor
    # @option opts [String] :periodicidade Periodicidade do pagamento
    # @option opts [String] :pagamento_semanal Dia para pagamento semanal
    # @option opts [Integer] :pagamento_mensal Dia da data para o pagamento mensal
    # @option opts [Integer] :pagamento_decendial_primeiro Dia da data para o primeiro pagamento decendial
    # @option opts [Integer] :pagamento_decendial_segundo Dia da data para o segundo pagamento decendial
    # @option opts [Integer] :pagamento_decendial_terceiro Dia da data para o terceiro pagamento decendial
    # @option opts [Integer] :pagamento_quinzenal_primeiro Dia da data para o primeiro pagamento quinzenal
    # @option opts [Integer] :pagamento_quinzenal_segundo Dia da data para o segundo pagamento quinzenal
    # @option opts [BOOLEAN] :credor_banco Indica se este credor pode ser um Credor RAV de outros credores
    # @option opts [Float] :percentual_rav Valor percentual do RAV do credor
    # @option opts [String] :recebe_rav Indica se o credor recebe RAV e o tipo
    # @option opts [Float] :percentual_multiplica Percentual Multiplica
    # @option opts [Float] :taxa_adm Taxa Administrativa
    # @option opts [Float] :taxa_banco Taxa do Banco
    # @option opts [Float] :limite_rav Valor limite do RAV
    # @option opts [Integer] :id_credor_rav C\u00C3\u00B3digo identificador do credor RAV
    # @option opts [Integer] :banco C\u00C3\u00B3digo do banco
    # @option opts [Integer] :agencia Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @option opts [String] :digito_verificador_agencia D\u00C3\u00ADgito Verificador da ag\u00C3\u00AAncia
    # @option opts [String] :conta_corrente C\u00C3\u00B3digo da Conta Corrente
    # @option opts [String] :digito_verificador_conta_corrente D\u00C3\u00ADgito Verificador da Conta Corrente
    # @return [Array<(PageCredorResponse, Fixnum, Hash)>] PageCredorResponse data, response status code and response headers
    def listar_using_get14_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_using_get14 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'periodicidade'] && !['DIARIO', 'SEMANAL', 'MENSAL', 'DECENDIAL', 'QUINZENAL'].include?(opts[:'periodicidade'])
        fail ArgumentError, 'invalid value for "periodicidade", must be one of DIARIO, SEMANAL, MENSAL, DECENDIAL, QUINZENAL'
      end
      
      
      
      
      
      
      
      if opts[:'pagamento_semanal'] && !['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO', 'DOMINGO'].include?(opts[:'pagamento_semanal'])
        fail ArgumentError, 'invalid value for "pagamento_semanal", must be one of SEGUNDA, TERCA, QUARTA, QUINTA, SEXTA, SABADO, DOMINGO'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'recebe_rav'] && !['NAO_TEM_PERMISSAO_RAV', 'CREDITO_RAV', 'DEBITO_RAV'].include?(opts[:'recebe_rav'])
        fail ArgumentError, 'invalid value for "recebe_rav", must be one of NAO_TEM_PERMISSAO_RAV, CREDITO_RAV, DEBITO_RAV'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/credores".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idPessoaJuridica'] = opts[:'id_pessoa_juridica'] if opts[:'id_pessoa_juridica']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']
      query_params[:'periodicidade'] = opts[:'periodicidade'] if opts[:'periodicidade']
      query_params[:'pagamentoSemanal'] = opts[:'pagamento_semanal'] if opts[:'pagamento_semanal']
      query_params[:'pagamentoMensal'] = opts[:'pagamento_mensal'] if opts[:'pagamento_mensal']
      query_params[:'pagamentoDecendialPrimeiro'] = opts[:'pagamento_decendial_primeiro'] if opts[:'pagamento_decendial_primeiro']
      query_params[:'pagamentoDecendialSegundo'] = opts[:'pagamento_decendial_segundo'] if opts[:'pagamento_decendial_segundo']
      query_params[:'pagamentoDecendialTerceiro'] = opts[:'pagamento_decendial_terceiro'] if opts[:'pagamento_decendial_terceiro']
      query_params[:'pagamentoQuinzenalPrimeiro'] = opts[:'pagamento_quinzenal_primeiro'] if opts[:'pagamento_quinzenal_primeiro']
      query_params[:'pagamentoQuinzenalSegundo'] = opts[:'pagamento_quinzenal_segundo'] if opts[:'pagamento_quinzenal_segundo']
      query_params[:'credorBanco'] = opts[:'credor_banco'] if opts[:'credor_banco']
      query_params[:'percentualRAV'] = opts[:'percentual_rav'] if opts[:'percentual_rav']
      query_params[:'recebeRAV'] = opts[:'recebe_rav'] if opts[:'recebe_rav']
      query_params[:'percentualMultiplica'] = opts[:'percentual_multiplica'] if opts[:'percentual_multiplica']
      query_params[:'taxaAdm'] = opts[:'taxa_adm'] if opts[:'taxa_adm']
      query_params[:'taxaBanco'] = opts[:'taxa_banco'] if opts[:'taxa_banco']
      query_params[:'limiteRAV'] = opts[:'limite_rav'] if opts[:'limite_rav']
      query_params[:'idCredorRAV'] = opts[:'id_credor_rav'] if opts[:'id_credor_rav']
      query_params[:'banco'] = opts[:'banco'] if opts[:'banco']
      query_params[:'agencia'] = opts[:'agencia'] if opts[:'agencia']
      query_params[:'digitoVerificadorAgencia'] = opts[:'digito_verificador_agencia'] if opts[:'digito_verificador_agencia']
      query_params[:'contaCorrente'] = opts[:'conta_corrente'] if opts[:'conta_corrente']
      query_params[:'digitoVerificadorContaCorrente'] = opts[:'digito_verificador_conta_corrente'] if opts[:'digito_verificador_conta_corrente']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCredorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_using_get14\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista Estabelecimentos
    # Lista todas os Estabelecimentos
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id).
    # @option opts [Integer] :numero_receita_federal Apresenta o n\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento na Receita Federal.
    # @option opts [String] :nome Nome do Estabelecimento.
    # @option opts [String] :descricao Raz\u00C3\u00A3o Social do Estabelecimento.
    # @option opts [String] :nome_fantasia T\u00C3\u00ADtulo Comercial do Estabelecimento.
    # @option opts [String] :cep C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP).
    # @option opts [String] :nome_logradouro Nome do Logradouro.
    # @option opts [Integer] :numero_endereco N\u00C3\u00BAmero do endere\u00C3\u00A7o.
    # @option opts [String] :complemento Descri\u00C3\u00A7\u00C3\u00B5es complementares referente ao endere\u00C3\u00A7o.
    # @option opts [String] :bairro Nome do bairro do endere\u00C3\u00A7o.
    # @option opts [String] :cidade Nome da cidade do endere\u00C3\u00A7o.
    # @option opts [String] :uf Sigla de identifica\u00C3\u00A7\u00C3\u00A3o da Unidade Federativa do endere\u00C3\u00A7o.
    # @option opts [String] :pais Nome do pa\u00C3\u00ADs.
    # @option opts [String] :data_cadastramento Data de Cadastro do Estabelecimento, no formato yyyy-MM-dd.
    # @option opts [String] :contato Nome da pessoa para contato com o Estabelecimento.
    # @option opts [String] :email E-mail da pessoa para contato com o Estabelecimento.
    # @option opts [Integer] :flag_arquivo_secr_fazenda Indica se o estabelecimento ser\u00C3\u00A1 inclu\u00C3\u00ADdo no arquivo de registro para a Secretaria da Fazenda Estadual.
    # @option opts [Integer] :flag_cartao_digitado Indica se o estabelecimento poder\u00C3\u00A1 originar transa\u00C3\u00A7\u00C3\u00B5es sem a leitura da tarja ou do chip do cart\u00C3\u00A3o.
    # @option opts [Integer] :inativo Indica se o estabelecimento est\u00C3\u00A1 inativo.
    # @return [PageEstabelecimentoResponse]
    def listar_using_get19(opts = {})
      data, _status_code, _headers = listar_using_get19_with_http_info(opts)
      return data
    end

    # Lista Estabelecimentos
    # Lista todas os Estabelecimentos
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento (id).
    # @option opts [Integer] :numero_receita_federal Apresenta o n\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento na Receita Federal.
    # @option opts [String] :nome Nome do Estabelecimento.
    # @option opts [String] :descricao Raz\u00C3\u00A3o Social do Estabelecimento.
    # @option opts [String] :nome_fantasia T\u00C3\u00ADtulo Comercial do Estabelecimento.
    # @option opts [String] :cep C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP).
    # @option opts [String] :nome_logradouro Nome do Logradouro.
    # @option opts [Integer] :numero_endereco N\u00C3\u00BAmero do endere\u00C3\u00A7o.
    # @option opts [String] :complemento Descri\u00C3\u00A7\u00C3\u00B5es complementares referente ao endere\u00C3\u00A7o.
    # @option opts [String] :bairro Nome do bairro do endere\u00C3\u00A7o.
    # @option opts [String] :cidade Nome da cidade do endere\u00C3\u00A7o.
    # @option opts [String] :uf Sigla de identifica\u00C3\u00A7\u00C3\u00A3o da Unidade Federativa do endere\u00C3\u00A7o.
    # @option opts [String] :pais Nome do pa\u00C3\u00ADs.
    # @option opts [String] :data_cadastramento Data de Cadastro do Estabelecimento, no formato yyyy-MM-dd.
    # @option opts [String] :contato Nome da pessoa para contato com o Estabelecimento.
    # @option opts [String] :email E-mail da pessoa para contato com o Estabelecimento.
    # @option opts [Integer] :flag_arquivo_secr_fazenda Indica se o estabelecimento ser\u00C3\u00A1 inclu\u00C3\u00ADdo no arquivo de registro para a Secretaria da Fazenda Estadual.
    # @option opts [Integer] :flag_cartao_digitado Indica se o estabelecimento poder\u00C3\u00A1 originar transa\u00C3\u00A7\u00C3\u00B5es sem a leitura da tarja ou do chip do cart\u00C3\u00A3o.
    # @option opts [Integer] :inativo Indica se o estabelecimento est\u00C3\u00A1 inativo.
    # @return [Array<(PageEstabelecimentoResponse, Fixnum, Hash)>] PageEstabelecimentoResponse data, response status code and response headers
    def listar_using_get19_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_using_get19 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/estabelecimentos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'numeroReceitaFederal'] = opts[:'numero_receita_federal'] if opts[:'numero_receita_federal']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']
      query_params[:'descricao'] = opts[:'descricao'] if opts[:'descricao']
      query_params[:'nomeFantasia'] = opts[:'nome_fantasia'] if opts[:'nome_fantasia']
      query_params[:'cep'] = opts[:'cep'] if opts[:'cep']
      query_params[:'nomeLogradouro'] = opts[:'nome_logradouro'] if opts[:'nome_logradouro']
      query_params[:'numeroEndereco'] = opts[:'numero_endereco'] if opts[:'numero_endereco']
      query_params[:'complemento'] = opts[:'complemento'] if opts[:'complemento']
      query_params[:'bairro'] = opts[:'bairro'] if opts[:'bairro']
      query_params[:'cidade'] = opts[:'cidade'] if opts[:'cidade']
      query_params[:'uf'] = opts[:'uf'] if opts[:'uf']
      query_params[:'pais'] = opts[:'pais'] if opts[:'pais']
      query_params[:'dataCadastramento'] = opts[:'data_cadastramento'] if opts[:'data_cadastramento']
      query_params[:'contato'] = opts[:'contato'] if opts[:'contato']
      query_params[:'email'] = opts[:'email'] if opts[:'email']
      query_params[:'flagArquivoSecrFazenda'] = opts[:'flag_arquivo_secr_fazenda'] if opts[:'flag_arquivo_secr_fazenda']
      query_params[:'flagCartaoDigitado'] = opts[:'flag_cartao_digitado'] if opts[:'flag_cartao_digitado']
      query_params[:'inativo'] = opts[:'inativo'] if opts[:'inativo']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageEstabelecimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_using_get19\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Listar pessoas jur\u00C3\u00ADdicas
    # Lista pessoas jur\u00C3\u00ADdicas cadastradas. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [String] :razao_social Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @option opts [String] :cnpj C\u00C3\u00B3digo do Cadastro Nacional de Pessoas Jur\u00C3\u00ADdicas
    # @option opts [String] :inscricao_estadual N\u00C3\u00BAmero da inscri\u00C3\u00A7\u00C3\u00A3o estadual
    # @option opts [String] :contato Nome da pessoa para entrar em contato
    # @option opts [Integer] :banco C\u00C3\u00B3digo do banco
    # @option opts [Integer] :agencia Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @option opts [String] :digito_verificador_agencia D\u00C3\u00ADgito Verificador da ag\u00C3\u00AAncia
    # @option opts [String] :conta_corrente C\u00C3\u00B3digo da Conta Corrente
    # @option opts [String] :digito_verificador_conta_corrente D\u00C3\u00ADgito Verificador da Conta Corrente
    # @return [PagePessoaJuridicaResponse]
    def listar_using_get24(opts = {})
      data, _status_code, _headers = listar_using_get24_with_http_info(opts)
      return data
    end

    # Listar pessoas jur\u00C3\u00ADdicas
    # Lista pessoas jur\u00C3\u00ADdicas cadastradas. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [String] :razao_social Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @option opts [String] :cnpj C\u00C3\u00B3digo do Cadastro Nacional de Pessoas Jur\u00C3\u00ADdicas
    # @option opts [String] :inscricao_estadual N\u00C3\u00BAmero da inscri\u00C3\u00A7\u00C3\u00A3o estadual
    # @option opts [String] :contato Nome da pessoa para entrar em contato
    # @option opts [Integer] :banco C\u00C3\u00B3digo do banco
    # @option opts [Integer] :agencia Raz\u00C3\u00A3o social da pessoa jur\u00C3\u00ADdica
    # @option opts [String] :digito_verificador_agencia D\u00C3\u00ADgito Verificador da ag\u00C3\u00AAncia
    # @option opts [String] :conta_corrente C\u00C3\u00B3digo da Conta Corrente
    # @option opts [String] :digito_verificador_conta_corrente D\u00C3\u00ADgito Verificador da Conta Corrente
    # @return [Array<(PagePessoaJuridicaResponse, Fixnum, Hash)>] PagePessoaJuridicaResponse data, response status code and response headers
    def listar_using_get24_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_using_get24 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas-juridicas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'razaoSocial'] = opts[:'razao_social'] if opts[:'razao_social']
      query_params[:'cnpj'] = opts[:'cnpj'] if opts[:'cnpj']
      query_params[:'inscricaoEstadual'] = opts[:'inscricao_estadual'] if opts[:'inscricao_estadual']
      query_params[:'contato'] = opts[:'contato'] if opts[:'contato']
      query_params[:'banco'] = opts[:'banco'] if opts[:'banco']
      query_params[:'agencia'] = opts[:'agencia'] if opts[:'agencia']
      query_params[:'digitoVerificadorAgencia'] = opts[:'digito_verificador_agencia'] if opts[:'digito_verificador_agencia']
      query_params[:'contaCorrente'] = opts[:'conta_corrente'] if opts[:'conta_corrente']
      query_params[:'digitoVerificadorContaCorrente'] = opts[:'digito_verificador_conta_corrente'] if opts[:'digito_verificador_conta_corrente']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePessoaJuridicaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_using_get24\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista os Telefones Estabelecimentos
    # Este m\u00C3\u00A9todo permite que sejam listados os telefones dos estabelecimentos existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_estabelecimento C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Estabelecimento (id).
    # @return [PageTelefoneEstabelecimentoResponse]
    def listar_using_get33(opts = {})
      data, _status_code, _headers = listar_using_get33_with_http_info(opts)
      return data
    end

    # Lista os Telefones Estabelecimentos
    # Este m\u00C3\u00A9todo permite que sejam listados os telefones dos estabelecimentos existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_estabelecimento C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Estabelecimento (id).
    # @return [Array<(PageTelefoneEstabelecimentoResponse, Fixnum, Hash)>] PageTelefoneEstabelecimentoResponse data, response status code and response headers
    def listar_using_get33_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_using_get33 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/telefones-estabelecimentos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idEstabelecimento'] = opts[:'id_estabelecimento'] if opts[:'id_estabelecimento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTelefoneEstabelecimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_using_get33\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Lista os Terminais cadastrados no Emissor
    # Este m\u00C3\u00A9todo permite que sejam listados os terminais existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Terminal (id).
    # @option opts [String] :terminal C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do terminal.
    # @option opts [Integer] :numero_estabelecimento N\u00C3\u00BAmero do estabelecimento a qual o terminal pertence.
    # @option opts [Integer] :id_estabelecimento N\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento a qual o terminal pertence.
    # @return [PageTerminalResponse]
    def listar_using_get35(opts = {})
      data, _status_code, _headers = listar_using_get35_with_http_info(opts)
      return data
    end

    # Lista os Terminais cadastrados no Emissor
    # Este m\u00C3\u00A9todo permite que sejam listados os terminais existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
    # @option opts [Integer] :id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Terminal (id).
    # @option opts [String] :terminal C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do terminal.
    # @option opts [Integer] :numero_estabelecimento N\u00C3\u00BAmero do estabelecimento a qual o terminal pertence.
    # @option opts [Integer] :id_estabelecimento N\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do estabelecimento a qual o terminal pertence.
    # @return [Array<(PageTerminalResponse, Fixnum, Hash)>] PageTerminalResponse data, response status code and response headers
    def listar_using_get35_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.listar_using_get35 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/terminais".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'terminal'] = opts[:'terminal'] if opts[:'terminal']
      query_params[:'numeroEstabelecimento'] = opts[:'numero_estabelecimento'] if opts[:'numero_estabelecimento']
      query_params[:'idEstabelecimento'] = opts[:'id_estabelecimento'] if opts[:'id_estabelecimento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTerminalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#listar_using_get35\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realiza o cadastro de um novo telefone para um estabelecimento 
    # Este m\u00C3\u00A9todo permite que seja cadastrado um novo telefone para um estabelecimento.
    # @param id_estabelecimento C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento (id).
    # @param ddd C\u00C3\u00B3digo DDD do telefone (id).
    # @param telefone N\u00C3\u00BAmero do telefone.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ramal N\u00C3\u00BAmero do ramal.
    # @return [TelefoneEstabelecimentoResponse]
    def salvar_using_post19(id_estabelecimento, ddd, telefone, opts = {})
      data, _status_code, _headers = salvar_using_post19_with_http_info(id_estabelecimento, ddd, telefone, opts)
      return data
    end

    # Realiza o cadastro de um novo telefone para um estabelecimento 
    # Este m\u00C3\u00A9todo permite que seja cadastrado um novo telefone para um estabelecimento.
    # @param id_estabelecimento C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Estabelecimento (id).
    # @param ddd C\u00C3\u00B3digo DDD do telefone (id).
    # @param telefone N\u00C3\u00BAmero do telefone.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ramal N\u00C3\u00BAmero do ramal.
    # @return [Array<(TelefoneEstabelecimentoResponse, Fixnum, Hash)>] TelefoneEstabelecimentoResponse data, response status code and response headers
    def salvar_using_post19_with_http_info(id_estabelecimento, ddd, telefone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.salvar_using_post19 ..."
      end
      
      
      # verify the required parameter 'id_estabelecimento' is set
      fail ArgumentError, "Missing the required parameter 'id_estabelecimento' when calling EstabelecimentoApi.salvar_using_post19" if id_estabelecimento.nil?
      
      
      
      
      
      
      # verify the required parameter 'ddd' is set
      fail ArgumentError, "Missing the required parameter 'ddd' when calling EstabelecimentoApi.salvar_using_post19" if ddd.nil?
      
      
      
      
      
      
      # verify the required parameter 'telefone' is set
      fail ArgumentError, "Missing the required parameter 'telefone' when calling EstabelecimentoApi.salvar_using_post19" if telefone.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/telefones-estabelecimentos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idEstabelecimento'] = id_estabelecimento
      query_params[:'ddd'] = ddd
      query_params[:'telefone'] = telefone
      query_params[:'ramal'] = opts[:'ramal'] if opts[:'ramal']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TelefoneEstabelecimentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#salvar_using_post19\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Realiza o cadastro de um novo Terminal
    # Este m\u00C3\u00A9todo permite que seja cadastrado um novo Terminal.
    # @param id_estabelecimento Apresenta o id do estabelecimento.
    # @param flag_consulta_extrato Flag indicando se o terminal \u00C3\u00A9 f\u00C3\u00ADsico ou virtual, sendo: (true: Sim), (false: N\u00C3\u00A3o)).
    # @param flag_terminal_virtual Flag indicando se o terminal permite consultar extrato, sendo: (true: Sim), (false: N\u00C3\u00A3o)).
    # @param [Hash] opts the optional parameters
    # @return [TerminalResponse]
    def salvar_using_post21(id_estabelecimento, flag_consulta_extrato, flag_terminal_virtual, opts = {})
      data, _status_code, _headers = salvar_using_post21_with_http_info(id_estabelecimento, flag_consulta_extrato, flag_terminal_virtual, opts)
      return data
    end

    # Realiza o cadastro de um novo Terminal
    # Este m\u00C3\u00A9todo permite que seja cadastrado um novo Terminal.
    # @param id_estabelecimento Apresenta o id do estabelecimento.
    # @param flag_consulta_extrato Flag indicando se o terminal \u00C3\u00A9 f\u00C3\u00ADsico ou virtual, sendo: (true: Sim), (false: N\u00C3\u00A3o)).
    # @param flag_terminal_virtual Flag indicando se o terminal permite consultar extrato, sendo: (true: Sim), (false: N\u00C3\u00A3o)).
    # @param [Hash] opts the optional parameters
    # @return [Array<(TerminalResponse, Fixnum, Hash)>] TerminalResponse data, response status code and response headers
    def salvar_using_post21_with_http_info(id_estabelecimento, flag_consulta_extrato, flag_terminal_virtual, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EstabelecimentoApi.salvar_using_post21 ..."
      end
      
      
      # verify the required parameter 'id_estabelecimento' is set
      fail ArgumentError, "Missing the required parameter 'id_estabelecimento' when calling EstabelecimentoApi.salvar_using_post21" if id_estabelecimento.nil?
      
      
      
      
      
      
      # verify the required parameter 'flag_consulta_extrato' is set
      fail ArgumentError, "Missing the required parameter 'flag_consulta_extrato' when calling EstabelecimentoApi.salvar_using_post21" if flag_consulta_extrato.nil?
      
      
      
      
      
      
      # verify the required parameter 'flag_terminal_virtual' is set
      fail ArgumentError, "Missing the required parameter 'flag_terminal_virtual' when calling EstabelecimentoApi.salvar_using_post21" if flag_terminal_virtual.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/terminais".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idEstabelecimento'] = id_estabelecimento
      query_params[:'flagConsultaExtrato'] = flag_consulta_extrato
      query_params[:'flagTerminalVirtual'] = flag_terminal_virtual

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TerminalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EstabelecimentoApi#salvar_using_post21\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
