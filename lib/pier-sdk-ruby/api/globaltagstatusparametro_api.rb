=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class GlobaltagstatusparametroApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # {{{estagio_cartao_resource_consultar_estagio_cartao}}}
    # {{{estagio_cartao_resource_consultar_estagio_cartao_notes}}}
    # @param id {{{estagio_cartao_resource_consultar_estagio_cartao_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [EstagioCartaoResponse]
    def consultar_estagio_cartao_using_get(id, opts = {})
      data, _status_code, _headers = consultar_estagio_cartao_using_get_with_http_info(id, opts)
      return data
    end

    # {{{estagio_cartao_resource_consultar_estagio_cartao}}}
    # {{{estagio_cartao_resource_consultar_estagio_cartao_notes}}}
    # @param id {{{estagio_cartao_resource_consultar_estagio_cartao_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(EstagioCartaoResponse, Fixnum, Hash)>] EstagioCartaoResponse data, response status code and response headers
    def consultar_estagio_cartao_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagstatusparametroApi.consultar_estagio_cartao_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagstatusparametroApi.consultar_estagio_cartao_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/estagios-cartoes/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EstagioCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagstatusparametroApi#consultar_estagio_cartao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{status_cartao_resource_consultar_status_cartao}}}
    # {{{status_cartao_resource_consultar_status_cartao_notes}}}
    # @param id {{{status_cartao_resource_consultar_status_cartao_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [StatusCartaoResponse]
    def consultar_status_cartao_using_get(id, opts = {})
      data, _status_code, _headers = consultar_status_cartao_using_get_with_http_info(id, opts)
      return data
    end

    # {{{status_cartao_resource_consultar_status_cartao}}}
    # {{{status_cartao_resource_consultar_status_cartao_notes}}}
    # @param id {{{status_cartao_resource_consultar_status_cartao_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(StatusCartaoResponse, Fixnum, Hash)>] StatusCartaoResponse data, response status code and response headers
    def consultar_status_cartao_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagstatusparametroApi.consultar_status_cartao_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagstatusparametroApi.consultar_status_cartao_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/status-cartoes/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StatusCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagstatusparametroApi#consultar_status_cartao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{status_conta_resource_consultar}}}
    # {{{status_conta_resource_consultar_notes}}}
    # @param id {{{status_conta_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [StatusContaResponse]
    def consultar_using_get35(id, opts = {})
      data, _status_code, _headers = consultar_using_get35_with_http_info(id, opts)
      return data
    end

    # {{{status_conta_resource_consultar}}}
    # {{{status_conta_resource_consultar_notes}}}
    # @param id {{{status_conta_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(StatusContaResponse, Fixnum, Hash)>] StatusContaResponse data, response status code and response headers
    def consultar_using_get35_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagstatusparametroApi.consultar_using_get35 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagstatusparametroApi.consultar_using_get35" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/status-contas/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StatusContaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagstatusparametroApi#consultar_using_get35\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{status_impressao_resource_consultar}}}
    # {{{status_impressao_resource_consultar_notes}}}
    # @param id {{{status_impressao_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [StatusImpressaoResponse]
    def consultar_using_get36(id, opts = {})
      data, _status_code, _headers = consultar_using_get36_with_http_info(id, opts)
      return data
    end

    # {{{status_impressao_resource_consultar}}}
    # {{{status_impressao_resource_consultar_notes}}}
    # @param id {{{status_impressao_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(StatusImpressaoResponse, Fixnum, Hash)>] StatusImpressaoResponse data, response status code and response headers
    def consultar_using_get36_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagstatusparametroApi.consultar_using_get36 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagstatusparametroApi.consultar_using_get36" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/status-impressoes/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StatusImpressaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagstatusparametroApi#consultar_using_get36\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{estagio_cartao_resource_listar_estagios_cartoes}}}
    # {{{estagio_cartao_resource_listar_estagios_cartoes_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{estagio_cartao_request_id_value}}}
    # @option opts [String] :nome {{{estagio_cartao_request_nome_value}}}
    # @return [PageEstagioCartaoResponse]
    def listar_estagios_cartoes_using_get(opts = {})
      data, _status_code, _headers = listar_estagios_cartoes_using_get_with_http_info(opts)
      return data
    end

    # {{{estagio_cartao_resource_listar_estagios_cartoes}}}
    # {{{estagio_cartao_resource_listar_estagios_cartoes_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{estagio_cartao_request_id_value}}}
    # @option opts [String] :nome {{{estagio_cartao_request_nome_value}}}
    # @return [Array<(PageEstagioCartaoResponse, Fixnum, Hash)>] PageEstagioCartaoResponse data, response status code and response headers
    def listar_estagios_cartoes_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagstatusparametroApi.listar_estagios_cartoes_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/estagios-cartoes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageEstagioCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagstatusparametroApi#listar_estagios_cartoes_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{status_cartao_resource_listar_status_cartoes}}}
    # {{{status_cartao_resource_listar_status_cartoes_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{status_cartao_request_id_value}}}
    # @option opts [String] :nome {{{status_cartao_request_nome_value}}}
    # @option opts [Integer] :permite_desbloquear {{{status_cartao_request_permite_desbloquear_value}}}
    # @option opts [Integer] :permite_atribuir_como_bloqueio {{{status_cartao_request_permite_atribuir_como_bloqueio_value}}}
    # @option opts [Integer] :permite_atribuir_como_cancelamento {{{status_cartao_request_permite_atribuir_como_cancelamento_value}}}
    # @option opts [Integer] :cobrar_tarifa_ao_emitir_nova_via {{{status_cartao_request_cobrar_tarifa_ao_emitir_nova_via_value}}}
    # @return [PageStatusCartaoResponse]
    def listar_status_cartoes_using_get(opts = {})
      data, _status_code, _headers = listar_status_cartoes_using_get_with_http_info(opts)
      return data
    end

    # {{{status_cartao_resource_listar_status_cartoes}}}
    # {{{status_cartao_resource_listar_status_cartoes_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{status_cartao_request_id_value}}}
    # @option opts [String] :nome {{{status_cartao_request_nome_value}}}
    # @option opts [Integer] :permite_desbloquear {{{status_cartao_request_permite_desbloquear_value}}}
    # @option opts [Integer] :permite_atribuir_como_bloqueio {{{status_cartao_request_permite_atribuir_como_bloqueio_value}}}
    # @option opts [Integer] :permite_atribuir_como_cancelamento {{{status_cartao_request_permite_atribuir_como_cancelamento_value}}}
    # @option opts [Integer] :cobrar_tarifa_ao_emitir_nova_via {{{status_cartao_request_cobrar_tarifa_ao_emitir_nova_via_value}}}
    # @return [Array<(PageStatusCartaoResponse, Fixnum, Hash)>] PageStatusCartaoResponse data, response status code and response headers
    def listar_status_cartoes_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagstatusparametroApi.listar_status_cartoes_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/status-cartoes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']
      query_params[:'permiteDesbloquear'] = opts[:'permite_desbloquear'] if opts[:'permite_desbloquear']
      query_params[:'permiteAtribuirComoBloqueio'] = opts[:'permite_atribuir_como_bloqueio'] if opts[:'permite_atribuir_como_bloqueio']
      query_params[:'permiteAtribuirComoCancelamento'] = opts[:'permite_atribuir_como_cancelamento'] if opts[:'permite_atribuir_como_cancelamento']
      query_params[:'cobrarTarifaAoEmitirNovaVia'] = opts[:'cobrar_tarifa_ao_emitir_nova_via'] if opts[:'cobrar_tarifa_ao_emitir_nova_via']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageStatusCartaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagstatusparametroApi#listar_status_cartoes_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{enum_resource_listar_tipos_eventos_transacoes}}}
    # {{{enum_resource_listar_tipos_eventos_transacoes_notes}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def listar_tipos_eventos_transacoes_using_get(opts = {})
      data, _status_code, _headers = listar_tipos_eventos_transacoes_using_get_with_http_info(opts)
      return data
    end

    # {{{enum_resource_listar_tipos_eventos_transacoes}}}
    # {{{enum_resource_listar_tipos_eventos_transacoes_notes}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def listar_tipos_eventos_transacoes_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagstatusparametroApi.listar_tipos_eventos_transacoes_using_get ..."
      end
      
      # resource path
      local_var_path = "/api/tipos-eventos-transacoes".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagstatusparametroApi#listar_tipos_eventos_transacoes_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{status_conta_resource_listar}}}
    # {{{status_conta_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{status_conta_request_id_value}}}
    # @option opts [String] :nome {{{status_conta_request_nome_value}}}
    # @option opts [Integer] :permite_alterar_vencimento {{{status_conta_request_permite_alterar_vencimento_value}}}
    # @option opts [Integer] :permite_alterar_limite {{{status_conta_request_permite_alterar_limite_value}}}
    # @option opts [Integer] :permite_emitir_nova_via_cartao {{{status_conta_request_permite_emitir_nova_via_cartao_value}}}
    # @option opts [Integer] :permite_fazer_transferencia {{{status_conta_request_permite_fazer_transferencia_value}}}
    # @option opts [Integer] :permite_receber_transferencia {{{status_conta_request_permite_receber_transferencia_value}}}
    # @option opts [Integer] :permite_criar_acordo_cobranca {{{status_conta_request_permite_criar_acordo_cobranca_value}}}
    # @option opts [Integer] :permite_atribuir_como_bloqueio {{{status_conta_request_permite_atribuir_como_bloqueio_value}}}
    # @option opts [Integer] :permite_desbloquear {{{status_conta_request_permite_desbloquear_value}}}
    # @option opts [Integer] :permite_atribuir_como_cancelamento {{{status_conta_request_permite_atribuir_como_cancelamento_value}}}
    # @return [PageStatusContaResponse]
    def listar_using_get47(opts = {})
      data, _status_code, _headers = listar_using_get47_with_http_info(opts)
      return data
    end

    # {{{status_conta_resource_listar}}}
    # {{{status_conta_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{status_conta_request_id_value}}}
    # @option opts [String] :nome {{{status_conta_request_nome_value}}}
    # @option opts [Integer] :permite_alterar_vencimento {{{status_conta_request_permite_alterar_vencimento_value}}}
    # @option opts [Integer] :permite_alterar_limite {{{status_conta_request_permite_alterar_limite_value}}}
    # @option opts [Integer] :permite_emitir_nova_via_cartao {{{status_conta_request_permite_emitir_nova_via_cartao_value}}}
    # @option opts [Integer] :permite_fazer_transferencia {{{status_conta_request_permite_fazer_transferencia_value}}}
    # @option opts [Integer] :permite_receber_transferencia {{{status_conta_request_permite_receber_transferencia_value}}}
    # @option opts [Integer] :permite_criar_acordo_cobranca {{{status_conta_request_permite_criar_acordo_cobranca_value}}}
    # @option opts [Integer] :permite_atribuir_como_bloqueio {{{status_conta_request_permite_atribuir_como_bloqueio_value}}}
    # @option opts [Integer] :permite_desbloquear {{{status_conta_request_permite_desbloquear_value}}}
    # @option opts [Integer] :permite_atribuir_como_cancelamento {{{status_conta_request_permite_atribuir_como_cancelamento_value}}}
    # @return [Array<(PageStatusContaResponse, Fixnum, Hash)>] PageStatusContaResponse data, response status code and response headers
    def listar_using_get47_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagstatusparametroApi.listar_using_get47 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/status-contas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']
      query_params[:'permiteAlterarVencimento'] = opts[:'permite_alterar_vencimento'] if opts[:'permite_alterar_vencimento']
      query_params[:'permiteAlterarLimite'] = opts[:'permite_alterar_limite'] if opts[:'permite_alterar_limite']
      query_params[:'permiteEmitirNovaViaCartao'] = opts[:'permite_emitir_nova_via_cartao'] if opts[:'permite_emitir_nova_via_cartao']
      query_params[:'permiteFazerTransferencia'] = opts[:'permite_fazer_transferencia'] if opts[:'permite_fazer_transferencia']
      query_params[:'permiteReceberTransferencia'] = opts[:'permite_receber_transferencia'] if opts[:'permite_receber_transferencia']
      query_params[:'permiteCriarAcordoCobranca'] = opts[:'permite_criar_acordo_cobranca'] if opts[:'permite_criar_acordo_cobranca']
      query_params[:'permiteAtribuirComoBloqueio'] = opts[:'permite_atribuir_como_bloqueio'] if opts[:'permite_atribuir_como_bloqueio']
      query_params[:'permiteDesbloquear'] = opts[:'permite_desbloquear'] if opts[:'permite_desbloquear']
      query_params[:'permiteAtribuirComoCancelamento'] = opts[:'permite_atribuir_como_cancelamento'] if opts[:'permite_atribuir_como_cancelamento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageStatusContaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagstatusparametroApi#listar_using_get47\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{status_impressao_resource_listar}}}
    # {{{status_impressao_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{status_impressao_request_id_value}}}
    # @option opts [String] :nome {{{status_impressao_request_nome_value}}}
    # @return [PageStatusImpressaoResponse]
    def listar_using_get48(opts = {})
      data, _status_code, _headers = listar_using_get48_with_http_info(opts)
      return data
    end

    # {{{status_impressao_resource_listar}}}
    # {{{status_impressao_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{status_impressao_request_id_value}}}
    # @option opts [String] :nome {{{status_impressao_request_nome_value}}}
    # @return [Array<(PageStatusImpressaoResponse, Fixnum, Hash)>] PageStatusImpressaoResponse data, response status code and response headers
    def listar_using_get48_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagstatusparametroApi.listar_using_get48 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/status-impressoes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageStatusImpressaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagstatusparametroApi#listar_using_get48\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
