=begin
PIER Labs

Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::GlobaltagusuariotokenApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GlobaltagusuariotokenApi' do
  before do
    # run before each test
    @instance = Pier::GlobaltagusuariotokenApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlobaltagusuariotokenApi' do
    it 'should create an instact of GlobaltagusuariotokenApi' do
      @instance.should be_a(Pier::GlobaltagusuariotokenApi)
    end
  end

  # unit tests for incrementar_tentativa_using_put
  # {{{usuario_token_recurso_controle_tentativa_cadastro_incrementar}}}
  # {{{usuario_token_recurso_controle_tentativa_cadastro_incrementar_notas}}}
  # @param cpf {{{usuario_token_recurso_controle_tentativa_cadastro_incrementar_param_cpf}}}
  # @param [Hash] opts the optional parameters
  # @return [ControleTentativaCadastroResponse]
  describe 'incrementar_tentativa_using_put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for verificar_tentativa_using_get
  # {{{usuario_token_recurso_controle_tentativa_cadastro_verificar}}}
  # {{{usuario_token_recurso_controle_tentativa_cadastro_verificar_notas}}}
  # @param cpf {{{usuario_token_recurso_controle_tentativa_cadastro_verificar_param_cpf}}}
  # @param [Hash] opts the optional parameters
  # @return [ControleTentativaCadastroResponse]
  describe 'verificar_tentativa_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
