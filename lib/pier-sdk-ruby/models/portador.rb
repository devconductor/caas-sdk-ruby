=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'date'

module Pier
  # Portador
  class Portador
    # Apresenta a data em que o Portador fora cadastrado, quando possuir esta informa\u00C3\u00A7\u00C3\u00A3o.
    attr_accessor :data_cadastro_portador

    # Apresenta a data em que o Portador fora cancelado, quando possuir esta informa\u00C3\u00A7\u00C3\u00A3o.
    attr_accessor :data_cancelamento_portador

    # Quanto ativa, indica que o cadastro do Portador est\u00C3\u00A1 ativo, em emissores que realizam este tipo de gest\u00C3\u00A3o.
    attr_accessor :flag_ativo

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id).
    attr_accessor :id_conta

    # Apresenta o c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da imagem do cart\u00C3\u00A3o.
    attr_accessor :id_imagem

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Parentesco (id)
    attr_accessor :id_parentesco

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id).
    attr_accessor :id_pessoa

    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id).
    attr_accessor :id_produto

    # Apresenta o c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo do cart\u00C3\u00A3o (id), que ser\u00C3\u00A1 utilizado para gerar os cart\u00C3\u00B5es deste portador, vinculados a sua respectiva conta atrav\u00C3\u00A9s do campo idConta.
    attr_accessor :id_tipo_cartao

    # Apresenta o nome a ser impresso no cart\u00C3\u00A3o.
    attr_accessor :nome_impresso

    # Apresenta o tipo do Portador do cart\u00C3\u00A3o, sendo: ('T': Titular, 'A': Adicional).
    attr_accessor :tipo_portador


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'data_cadastro_portador' => :'dataCadastroPortador',
        
        :'data_cancelamento_portador' => :'dataCancelamentoPortador',
        
        :'flag_ativo' => :'flagAtivo',
        
        :'id_conta' => :'idConta',
        
        :'id_imagem' => :'idImagem',
        
        :'id_parentesco' => :'idParentesco',
        
        :'id_pessoa' => :'idPessoa',
        
        :'id_produto' => :'idProduto',
        
        :'id_tipo_cartao' => :'idTipoCartao',
        
        :'nome_impresso' => :'nomeImpresso',
        
        :'tipo_portador' => :'tipoPortador'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'data_cadastro_portador' => :'DateTime',
        
        :'data_cancelamento_portador' => :'DateTime',
        
        :'flag_ativo' => :'Integer',
        
        :'id_conta' => :'Integer',
        
        :'id_imagem' => :'Integer',
        
        :'id_parentesco' => :'Integer',
        
        :'id_pessoa' => :'Integer',
        
        :'id_produto' => :'Integer',
        
        :'id_tipo_cartao' => :'Integer',
        
        :'nome_impresso' => :'String',
        
        :'tipo_portador' => :'String'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'dataCadastroPortador']
        
        
        self.data_cadastro_portador = attributes[:'dataCadastroPortador']
        
      
      end

      
      if attributes[:'dataCancelamentoPortador']
        
        
        self.data_cancelamento_portador = attributes[:'dataCancelamentoPortador']
        
      
      end

      
      if attributes[:'flagAtivo']
        
        
        self.flag_ativo = attributes[:'flagAtivo']
        
      
      end

      
      if attributes[:'idConta']
        
        
        self.id_conta = attributes[:'idConta']
        
      
      end

      
      if attributes[:'idImagem']
        
        
        self.id_imagem = attributes[:'idImagem']
        
      
      end

      
      if attributes[:'idParentesco']
        
        
        self.id_parentesco = attributes[:'idParentesco']
        
      
      end

      
      if attributes[:'idPessoa']
        
        
        self.id_pessoa = attributes[:'idPessoa']
        
      
      end

      
      if attributes[:'idProduto']
        
        
        self.id_produto = attributes[:'idProduto']
        
      
      end

      
      if attributes[:'idTipoCartao']
        
        
        self.id_tipo_cartao = attributes[:'idTipoCartao']
        
      
      end

      
      if attributes[:'nomeImpresso']
        
        
        self.nome_impresso = attributes[:'nomeImpresso']
        
      
      end

      
      if attributes[:'tipoPortador']
        
        
        self.tipo_portador = attributes[:'tipoPortador']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          data_cadastro_portador == o.data_cadastro_portador &&
          data_cancelamento_portador == o.data_cancelamento_portador &&
          flag_ativo == o.flag_ativo &&
          id_conta == o.id_conta &&
          id_imagem == o.id_imagem &&
          id_parentesco == o.id_parentesco &&
          id_pessoa == o.id_pessoa &&
          id_produto == o.id_produto &&
          id_tipo_cartao == o.id_tipo_cartao &&
          nome_impresso == o.nome_impresso &&
          tipo_portador == o.tipo_portador
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [data_cadastro_portador, data_cancelamento_portador, flag_ativo, id_conta, id_imagem, id_parentesco, id_pessoa, id_produto, id_tipo_cartao, nome_impresso, tipo_portador].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end


end
