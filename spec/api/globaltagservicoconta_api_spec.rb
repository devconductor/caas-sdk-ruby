=begin
PIER Labs

Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::GlobaltagservicocontaApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GlobaltagservicocontaApi' do
  before do
    # run before each test
    @instance = Pier::GlobaltagservicocontaApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlobaltagservicocontaApi' do
    it 'should create an instact of GlobaltagservicocontaApi' do
      @instance.should be_a(Pier::GlobaltagservicocontaApi)
    end
  end

  # unit tests for ativar_anuidade_using_post
  # {{{conta_resource_ativar_anuidade}}}
  # {{{conta_resource_ativar_anuidade_notes}}}
  # @param id {{{conta_resource_ativar_anuidade_param_id}}}
  # @param id_anuidade {{{anuidade_request_id_anuidade_value}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :ddd {{{anuidade_request_d_d_d_value}}}
  # @option opts [String] :celular {{{anuidade_request_celular_value}}}
  # @option opts [Integer] :id_operadora {{{anuidade_request_id_operadora_value}}}
  # @option opts [Integer] :id_origem_comercial {{{anuidade_request_id_origem_comercial_value}}}
  # @return [Object]
  describe 'ativar_anuidade_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for ativar_envio_fatura_email_using_post
  # {{{conta_resource_ativar_envio_fatura_email}}}
  # {{{conta_resource_ativar_envio_fatura_email_notes}}}
  # @param id {{{conta_resource_ativar_envio_fatura_email_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'ativar_envio_fatura_email_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for desativar_envio_fatura_email_using_post
  # {{{conta_resource_desativar_envio_fatura_email}}}
  # {{{conta_resource_desativar_envio_fatura_email_notes}}}
  # @param id {{{conta_resource_desativar_envio_fatura_email_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'desativar_envio_fatura_email_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_anuidades_using_get
  # {{{anuidade_resource_listar_anuidades}}}
  # {{{anuidade_resource_listar_anuidades_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageAnuidadeResponse]
  describe 'listar_anuidades_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_operadoras_telefonicas_using_get
  # {{{operadora_resource_listar_operadoras_telefonicas}}}
  # {{{operadora_resource_listar_operadoras_telefonicas_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageOperadoraResponse]
  describe 'listar_operadoras_telefonicas_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
