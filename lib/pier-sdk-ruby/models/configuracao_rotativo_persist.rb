=begin
PIER Labs

Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require 'date'

module Pier
  # Configura\u00E7\u00E3o Rotativo
  class ConfiguracaoRotativoPersist
    # C\u00F3digo de Identifica\u00E7\u00E3o do Produto (idProduto).
    attr_accessor :id_produto

    # Quando verdadeiro, indica que o valor do rotativo deve compor a oferta de parcelamento.
    attr_accessor :compoe_oferta_valor_rotativo

    # Quando verdadeiro, indica que o valor n\u00E3o financi\u00E1vel deve compor a oferta de parcelamento.
    attr_accessor :compoe_oferta_valor_nao_financiavel

    # Quando verdadeiro, indica que o valor de novos lan\u00E7amentos deve compor a oferta de parcelamento
    attr_accessor :compoe_oferta_valor_novos_lancamentos

    # Quando verdadeiro, indica que deve recalcular o parcelamento caso o valor pago de entrada seja maior que o valor esperado
    attr_accessor :recalcula_parcelamento_para_entrada_maior

    # Indica o m\u00EDnimo de parcelas que ser\u00E1 acatado no rec\u00E1lculo do parcelamento.
    attr_accessor :minimo_parcelas_recalculo_parcelamento

    # Quando verdadeiro, indica que o parcelamento deve ser recalculado caso o valor calculado da oferta seja inferior ao valor configurado m\u00EDnimo da parcela (valorMinimoParcela) e de percentual aberto
    attr_accessor :recalcula_parcelamento

    # N\u00FAmero m\u00EDnimo de parcelas que ser\u00E1 acatado no recalculo da oferta.
    attr_accessor :numero_minimo_ofertas

    # Quando verdadeiro, indica que valores pagos entre o valor da entrada e o m\u00EDnimo da fatura ser\u00E3o acatados para a ades\u00E3o ao parcelamento
    attr_accessor :aceita_pagamento_maior_que_entrada

    # Quando verdadeiro, indica que deve-se incluir o valor presente dos parcelamentos em aberto.
    attr_accessor :antecipa_parcelamentos_abertos

    # Valor m\u00EDnimo da parcela que deve ser aceito na oferta.
    attr_accessor :valor_minimo_parcela

    # Percentual sobre os valores de parcelamento anteriores em aberto que deve ser considerado para limitar valorMinimoParcela.
    attr_accessor :percentual_limitar_valor_minimo_parcela

    # C\u00F3digo de Identifica\u00E7\u00E3o da regra de campanha.
    attr_accessor :id_regra_campanha

    # Quando verdadeiro, indica que parcelamento ofertado ter\u00E1 como valor base o valor m\u00EDnimo das transa\u00E7\u00F5es.
    attr_accessor :parcelar_apenas_minimo

    # Nome do usu\u00E1rio
    attr_accessor :usuario

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id_produto' => :'idProduto',
        
        :'compoe_oferta_valor_rotativo' => :'compoeOfertaValorRotativo',
        
        :'compoe_oferta_valor_nao_financiavel' => :'compoeOfertaValorNaoFinanciavel',
        
        :'compoe_oferta_valor_novos_lancamentos' => :'compoeOfertaValorNovosLancamentos',
        
        :'recalcula_parcelamento_para_entrada_maior' => :'recalculaParcelamentoParaEntradaMaior',
        
        :'minimo_parcelas_recalculo_parcelamento' => :'minimoParcelasRecalculoParcelamento',
        
        :'recalcula_parcelamento' => :'recalculaParcelamento',
        
        :'numero_minimo_ofertas' => :'numeroMinimoOfertas',
        
        :'aceita_pagamento_maior_que_entrada' => :'aceitaPagamentoMaiorQueEntrada',
        
        :'antecipa_parcelamentos_abertos' => :'antecipaParcelamentosAbertos',
        
        :'valor_minimo_parcela' => :'valorMinimoParcela',
        
        :'percentual_limitar_valor_minimo_parcela' => :'percentualLimitarValorMinimoParcela',
        
        :'id_regra_campanha' => :'idRegraCampanha',
        
        :'parcelar_apenas_minimo' => :'parcelarApenasMinimo',
        
        :'usuario' => :'usuario'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'id_produto' => :'Integer',
        
        :'compoe_oferta_valor_rotativo' => :'BOOLEAN',
        
        :'compoe_oferta_valor_nao_financiavel' => :'BOOLEAN',
        
        :'compoe_oferta_valor_novos_lancamentos' => :'BOOLEAN',
        
        :'recalcula_parcelamento_para_entrada_maior' => :'BOOLEAN',
        
        :'minimo_parcelas_recalculo_parcelamento' => :'BOOLEAN',
        
        :'recalcula_parcelamento' => :'BOOLEAN',
        
        :'numero_minimo_ofertas' => :'BOOLEAN',
        
        :'aceita_pagamento_maior_que_entrada' => :'BOOLEAN',
        
        :'antecipa_parcelamentos_abertos' => :'BOOLEAN',
        
        :'valor_minimo_parcela' => :'Float',
        
        :'percentual_limitar_valor_minimo_parcela' => :'Float',
        
        :'id_regra_campanha' => :'Integer',
        
        :'parcelar_apenas_minimo' => :'BOOLEAN',
        
        :'usuario' => :'String'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'idProduto']
        
        
        self.id_produto = attributes[:'idProduto']
        
      
      end

      
      if attributes[:'compoeOfertaValorRotativo']
        
        
        self.compoe_oferta_valor_rotativo = attributes[:'compoeOfertaValorRotativo']
        
      
      end

      
      if attributes[:'compoeOfertaValorNaoFinanciavel']
        
        
        self.compoe_oferta_valor_nao_financiavel = attributes[:'compoeOfertaValorNaoFinanciavel']
        
      
      end

      
      if attributes[:'compoeOfertaValorNovosLancamentos']
        
        
        self.compoe_oferta_valor_novos_lancamentos = attributes[:'compoeOfertaValorNovosLancamentos']
        
      
      end

      
      if attributes[:'recalculaParcelamentoParaEntradaMaior']
        
        
        self.recalcula_parcelamento_para_entrada_maior = attributes[:'recalculaParcelamentoParaEntradaMaior']
        
      
      end

      
      if attributes[:'minimoParcelasRecalculoParcelamento']
        
        
        self.minimo_parcelas_recalculo_parcelamento = attributes[:'minimoParcelasRecalculoParcelamento']
        
      
      end

      
      if attributes[:'recalculaParcelamento']
        
        
        self.recalcula_parcelamento = attributes[:'recalculaParcelamento']
        
      
      end

      
      if attributes[:'numeroMinimoOfertas']
        
        
        self.numero_minimo_ofertas = attributes[:'numeroMinimoOfertas']
        
      
      end

      
      if attributes[:'aceitaPagamentoMaiorQueEntrada']
        
        
        self.aceita_pagamento_maior_que_entrada = attributes[:'aceitaPagamentoMaiorQueEntrada']
        
      
      end

      
      if attributes[:'antecipaParcelamentosAbertos']
        
        
        self.antecipa_parcelamentos_abertos = attributes[:'antecipaParcelamentosAbertos']
        
      
      end

      
      if attributes[:'valorMinimoParcela']
        
        
        self.valor_minimo_parcela = attributes[:'valorMinimoParcela']
        
      
      end

      
      if attributes[:'percentualLimitarValorMinimoParcela']
        
        
        self.percentual_limitar_valor_minimo_parcela = attributes[:'percentualLimitarValorMinimoParcela']
        
      
      end

      
      if attributes[:'idRegraCampanha']
        
        
        self.id_regra_campanha = attributes[:'idRegraCampanha']
        
      
      end

      
      if attributes[:'parcelarApenasMinimo']
        
        
        self.parcelar_apenas_minimo = attributes[:'parcelarApenasMinimo']
        
      
      end

      
      if attributes[:'usuario']
        
        
        self.usuario = attributes[:'usuario']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id_produto == o.id_produto &&
          compoe_oferta_valor_rotativo == o.compoe_oferta_valor_rotativo &&
          compoe_oferta_valor_nao_financiavel == o.compoe_oferta_valor_nao_financiavel &&
          compoe_oferta_valor_novos_lancamentos == o.compoe_oferta_valor_novos_lancamentos &&
          recalcula_parcelamento_para_entrada_maior == o.recalcula_parcelamento_para_entrada_maior &&
          minimo_parcelas_recalculo_parcelamento == o.minimo_parcelas_recalculo_parcelamento &&
          recalcula_parcelamento == o.recalcula_parcelamento &&
          numero_minimo_ofertas == o.numero_minimo_ofertas &&
          aceita_pagamento_maior_que_entrada == o.aceita_pagamento_maior_que_entrada &&
          antecipa_parcelamentos_abertos == o.antecipa_parcelamentos_abertos &&
          valor_minimo_parcela == o.valor_minimo_parcela &&
          percentual_limitar_valor_minimo_parcela == o.percentual_limitar_valor_minimo_parcela &&
          id_regra_campanha == o.id_regra_campanha &&
          parcelar_apenas_minimo == o.parcelar_apenas_minimo &&
          usuario == o.usuario
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id_produto, compoe_oferta_valor_rotativo, compoe_oferta_valor_nao_financiavel, compoe_oferta_valor_novos_lancamentos, recalcula_parcelamento_para_entrada_maior, minimo_parcelas_recalculo_parcelamento, recalcula_parcelamento, numero_minimo_ofertas, aceita_pagamento_maior_que_entrada, antecipa_parcelamentos_abertos, valor_minimo_parcela, percentual_limitar_valor_minimo_parcela, id_regra_campanha, parcelar_apenas_minimo, usuario].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
