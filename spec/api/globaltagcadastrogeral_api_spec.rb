=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::GlobaltagcadastrogeralApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GlobaltagcadastrogeralApi' do
  before do
    # run before each test
    @instance = Pier::GlobaltagcadastrogeralApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlobaltagcadastrogeralApi' do
    it 'should create an instact of GlobaltagcadastrogeralApi' do
      @instance.should be_a(Pier::GlobaltagcadastrogeralApi)
    end
  end


  # unit tests for alterar_convenio_using_put
  # Altera os dados banc\u00E1rios de um determinado conv\u00EAnio
  # Altera os dados banc\u00E1rios de um determinado conv\u00EAnio
  # @param id Id
  # @param convenio_persist convenioPersist
  # @param [Hash] opts the optional parameters
  # @return [ConvenioResponse]
  describe 'alterar_convenio_using_put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for alterar_using_put1
  # {{{campanha_resource_alterar}}}
  # {{{campanha_resource_alterar_notes}}}
  # @param id {{{campanha_resource_alterar_param_id}}}
  # @param update update
  # @param [Hash] opts the optional parameters
  # @return [CampanhaResponse]
  describe 'alterar_using_put1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for alterar_using_put2
  # {{{configuracao_registro_cobranca_resource_alterar}}}
  # {{{configuracao_registro_cobranca_resource_alterar_notes}}}
  # @param id {{{configuracao_registro_cobranca_resource_alterar_param_id}}}
  # @param configuracao_persist configuracaoPersist
  # @param [Hash] opts the optional parameters
  # @return [ConfiguracaoRegistroCobrancaResponse]
  describe 'alterar_using_put2 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for alterar_using_put3
  # {{{configuracao_rotativo_resource_alterar}}}
  # {{{configuracao_rotativo_resource_alterar_notes}}}
  # @param id {{{configuracao_rotativo_resource_alterar_param_id}}}
  # @param configuracao_rotativo_persist configuracaoRotativoPersist
  # @param [Hash] opts the optional parameters
  # @return [ConfiguracaoRotativoDetalheResponse]
  describe 'alterar_using_put3 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for cadastrar_convenio_using_post
  # Adiciona novo conv\u00EAnio para o emissor
  # Adiciona novo conv\u00EAnio para o emissor
  # @param convenio_persist convenioPersist
  # @param [Hash] opts the optional parameters
  # @return [ConvenioResponse]
  describe 'cadastrar_convenio_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for cadastrar_using_post1
  # {{{configuracao_registro_cobranca_resource_cadastrar}}}
  # {{{configuracao_registro_cobranca_resource_cadastrar_notes}}}
  # @param configuracao_persist configuracaoPersist
  # @param [Hash] opts the optional parameters
  # @return [ConfiguracaoRegistroCobrancaResponse]
  describe 'cadastrar_using_post1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for configurar_taxa_antecipacao_using_post
  # {{{produto_resource_configurar_taxa_antecipacao}}}
  # {{{produto_resource_configurar_taxa_antecipacao_notes}}}
  # @param id {{{produto_resource_configurar_taxa_antecipacao_param_id}}}
  # @param taxa_antecipacao_request taxaAntecipacaoRequest
  # @param [Hash] opts the optional parameters
  # @return [ParametroProdutoResponse]
  describe 'configurar_taxa_antecipacao_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_campanha_using_get
  # {{{campanha_resource_consultar_campanha}}}
  # {{{campanha_resource_consultar_campanha_notes}}}
  # @param id {{{campanha_resource_consultar_campanha_param_id_campanha}}}
  # @param [Hash] opts the optional parameters
  # @return [CampanhaResponse]
  describe 'consultar_campanha_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_convenio_using_get
  # Consultar dados banc\u00E1rios pelo id do conv\u00EAnio
  # Consultar dados banc\u00E1rios de um determinado conv\u00EAnio
  # @param id Id
  # @param [Hash] opts the optional parameters
  # @return [ConvenioResponse]
  describe 'consultar_convenio_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_taxa_antecipacao_using_get
  # {{{produto_resource_consultar_taxa_antecipacao}}}
  # {{{produto_resource_consultar_taxa_antecipacao_notes}}}
  # @param id {{{produto_resource_consultar_taxa_antecipacao_param_id}}}
  # @param tipo_transacao {{{produto_resource_consultar_taxa_antecipacao_param_tipo_transacao}}}
  # @param [Hash] opts the optional parameters
  # @return [ParametroProdutoResponse]
  describe 'consultar_taxa_antecipacao_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get10
  # {{{configuracao_registro_cobranca_resource_consultar}}}
  # {{{configuracao_registro_cobranca_resource_consultar_notes}}}
  # @param id {{{configuracao_registro_cobranca_resource_consultar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [ConfiguracaoRegistroCobrancaResponse]
  describe 'consultar_using_get10 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get11
  # {{{configuracao_rotativo_resource_consultar}}}
  # {{{configuracao_rotativo_resource_consultar_notes}}}
  # @param id {{{configuracao_rotativo_resource_consultar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [ConfiguracaoRotativoDetalheResponse]
  describe 'consultar_using_get11 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get31
  # {{{produto_resource_consultar}}}
  # {{{produto_resource_consultar_notes}}}
  # @param id {{{produto_resource_consultar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [ProdutoDetalhesResponse]
  describe 'consultar_using_get31 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get40
  # {{{tipo_transacoes_ajuste_resource_consultar}}}
  # {{{tipo_transacoes_ajuste_resource_consultar_notes}}}
  # @param id {{{tipo_transacoes_ajuste_resource_consultar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [TipoAjusteResponse]
  describe 'consultar_using_get40 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get41
  # {{{tipo_boleto_resource_consultar}}}
  # {{{tipo_boleto_resource_consultar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [Integer] :id {{{tipo_boleto_request_id_value}}}
  # @option opts [String] :descricao {{{tipo_boleto_request_descricao_value}}}
  # @option opts [Integer] :banco {{{tipo_boleto_request_banco_value}}}
  # @return [PageTipoBoletoResponse]
  describe 'consultar_using_get41 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get42
  # {{{tipo_endereco_resource_consultar}}}
  # {{{tipo_endereco_resource_consultar_notes}}}
  # @param id {{{tipo_endereco_resource_consultar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [TipoEnderecoResponse]
  describe 'consultar_using_get42 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get43
  # {{{tipo_operacao_resource_consultar}}}
  # {{{tipo_operacao_resource_consultar_notes}}}
  # @param id_cartao {{{tipo_operacao_resource_consultar_param_id_cartao}}}
  # @param id_estabelecimento {{{tipo_operacao_resource_consultar_param_id_estabelecimento}}}
  # @param codigo_processamento {{{tipo_operacao_resource_consultar_param_codigo_processamento}}}
  # @param [Hash] opts the optional parameters
  # @return [TipoOperacaoResponse]
  describe 'consultar_using_get43 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get45
  # {{{tipo_telefone_resource_consultar}}}
  # {{{tipo_telefone_resource_consultar_notes}}}
  # @param id {{{tipo_telefone_resource_consultar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [TipoTelefoneResponse]
  describe 'consultar_using_get45 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get5
  # {{{atendimento_cliente_resource_consultar}}}
  # {{{atendimento_cliente_resource_consultar_notes}}}
  # @param id {{{atendimento_cliente_resource_consultar_param_id_atendimento}}}
  # @param [Hash] opts the optional parameters
  # @return [AtendimentoClienteResponse]
  describe 'consultar_using_get5 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for consultar_using_get7
  # {{{banco_resource_consultar}}}
  # {{{banco_resource_consultar_notes}}}
  # @param id {{{banco_resource_consultar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [BancoResponse]
  describe 'consultar_using_get7 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_campanhas_using_get
  # {{{campanha_resource_listar_campanhas}}}
  # {{{campanha_resource_listar_campanhas_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [Integer] :id_tipo_campanha {{{campanha_request_id_tipo_campanha_value}}}
  # @return [PageCampanhaResponse]
  describe 'listar_campanhas_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_contas_por_pessoa_using_get
  # {{{pessoa_resource_listar_contas_por_pessoa}}}
  # {{{pessoa_resource_listar_contas_por_pessoa_notes}}}
  # @param numero_receita_federal {{{pessoa_resource_listar_contas_por_pessoa_param_numero_receita_federal}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageContaDetalheResponse]
  describe 'listar_contas_por_pessoa_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_convenios_using_get
  # Lista os dados banc\u00E1rios dos conv\u00EAnios existentes
  # Lista os dados banc\u00E1rios dos conv\u00EAnios existentes
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [Integer] :banco Identifica\u00E7\u00E3o do banco.
  # @option opts [Integer] :agencia N\u00FAmero da ag\u00EAncia.
  # @option opts [String] :conta_corrente Conta corrente.
  # @option opts [Float] :numero_convenio C\u00F3digo de identifica\u00E7\u00E3o do conv\u00EAnio.
  # @return [PageConvenioResponse]
  describe 'listar_convenios_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_estados_civis_using_get
  # {{{campo_codificado_resource_listar_estados_civis}}}
  # {{{campo_codificado_resource_listar_estados_civis_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageCampoCodificadoDescricaoResponse]
  describe 'listar_estados_civis_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_fantasias_basicas_using_get
  # {{{fantasia_basica_resource_listar_fantasias_basicas}}}
  # {{{fantasia_basica_resource_listar_fantasias_basicas_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageFantasiaBasicaResponse]
  describe 'listar_fantasias_basicas_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_historico_telefones_using_get
  # {{{pessoa_resource_listar_historico_telefones}}}
  # {{{pessoa_resource_listar_historico_telefones_notes}}}
  # @param id {{{pessoa_resource_listar_historico_telefones_param_id_pessoa}}}
  # @param [Hash] opts the optional parameters
  # @return [HistoricoTelefoneResponse]
  describe 'listar_historico_telefones_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_nacionalidades_using_get
  # {{{campo_codificado_resource_listar_nacionalidades}}}
  # {{{campo_codificado_resource_listar_nacionalidades_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageCampoCodificadoDescricaoResponse]
  describe 'listar_nacionalidades_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_naturezas_ocupacoes_using_get
  # {{{campo_codificado_resource_listar_naturezas_ocupacoes}}}
  # {{{campo_codificado_resource_listar_naturezas_ocupacoes_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageCampoCodificadoDescricaoResponse]
  describe 'listar_naturezas_ocupacoes_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_parentescos_using_get
  # {{{campo_codificado_resource_listar_parentescos}}}
  # {{{campo_codificado_resource_listar_parentescos_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageCampoCodificadoDescricaoResponse]
  describe 'listar_parentescos_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_profissoes_using_get
  # {{{campo_codificado_resource_listar_profissoes}}}
  # {{{campo_codificado_resource_listar_profissoes_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageCampoCodificadoDescricaoResponse]
  describe 'listar_profissoes_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_tipos_campanhas_using_get
  # {{{tipo_campanha_resource_listar_tipos_campanhas}}}
  # {{{tipo_campanha_resource_listar_tipos_campanhas_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageTipoCampanhaResponse]
  describe 'listar_tipos_campanhas_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get14
  # {{{configuracao_registro_cobranca_resource_listar}}}
  # {{{configuracao_registro_cobranca_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [ConfiguracaoRegistroCobrancaResponse]
  describe 'listar_using_get14 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get15
  # {{{configuracao_rotativo_resource_listar}}}
  # {{{configuracao_rotativo_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [Integer] :id_produto {{{configuracao_rotativo_request_id_produto_value}}}
  # @return [PageConfiguracaoRotativoResponse]
  describe 'listar_using_get15 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get41
  # {{{portador_resource_listar}}}
  # {{{portador_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [Integer] :id_conta {{{portador_request_id_conta_value}}}
  # @option opts [Integer] :id_produto {{{portador_request_id_produto_value}}}
  # @option opts [Integer] :id_pessoa {{{portador_request_id_pessoa_value}}}
  # @option opts [Integer] :id_parentesco {{{portador_request_id_parentesco_value}}}
  # @option opts [String] :tipo_portador {{{portador_request_tipo_portador_value}}}
  # @option opts [String] :nome_impresso {{{portador_request_nome_impresso_value}}}
  # @option opts [Integer] :id_tipo_cartao {{{portador_request_id_tipo_cartao_value}}}
  # @option opts [Integer] :flag_ativo {{{portador_request_flag_ativo_value}}}
  # @option opts [String] :data_cadastro_portador {{{portador_request_data_cadastro_portador_value}}}
  # @option opts [String] :data_cancelamento_portador {{{portador_request_data_cancelamento_portador_value}}}
  # @return [PagePortadorResponse]
  describe 'listar_using_get41 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get42
  # {{{produto_resource_listar}}}
  # {{{produto_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :nome {{{produto_request_nome_value}}}
  # @option opts [Integer] :status {{{produto_request_status_value}}}
  # @option opts [Integer] :id_fantasia_basica {{{produto_request_id_fantasia_basica_value}}}
  # @return [PageProdutoResponse]
  describe 'listar_using_get42 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get43
  # {{{promotor_resource_listar}}}
  # {{{promotor_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [Integer] :id {{{promotor_request_id_value}}}
  # @option opts [String] :nome {{{promotor_request_nome_value}}}
  # @option opts [String] :data_cadastro {{{promotor_request_data_cadastro_value}}}
  # @option opts [Integer] :id_estabelecimento {{{promotor_request_id_estabelecimento_value}}}
  # @option opts [Integer] :id_usuario {{{promotor_request_id_usuario_value}}}
  # @return [PagePromotorResponse]
  describe 'listar_using_get43 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get52
  # {{{tipo_ajuste_resource_consultar}}}
  # {{{tipo_ajuste_resource_consultar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [Integer] :id {{{tipo_ajuste_request_id_value}}}
  # @option opts [String] :descricao {{{tipo_ajuste_request_descricao_value}}}
  # @return [PageTipoAjusteResponse]
  describe 'listar_using_get52 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get54
  # {{{tipo_endereco_resource_listar}}}
  # {{{tipo_endereco_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [Integer] :id {{{tipo_endereco_request_id_value}}}
  # @option opts [String] :nome {{{tipo_endereco_request_nome_value}}}
  # @return [PageTipoEnderecoResponse]
  describe 'listar_using_get54 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get56
  # {{{tipo_telefone_resource_listar}}}
  # {{{tipo_telefone_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [Integer] :id {{{tipo_telefone_request_id_value}}}
  # @option opts [String] :nome {{{tipo_telefone_request_nome_value}}}
  # @return [PageTipoTelefoneResponse]
  describe 'listar_using_get56 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get63
  # {{{vencimento_resource_listar}}}
  # {{{vencimento_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :data_vencimento {{{controle_vencimento_request_data_vencimento_value}}}
  # @return [PageControleVencimentoResponse]
  describe 'listar_using_get63 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get7
  # {{{atendimento_cliente_resource_listar}}}
  # {{{atendimento_cliente_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [Integer] :id_tipo_atendimento {{{atendimento_cliente_request_id_tipo_atendimento_value}}}
  # @option opts [Integer] :id_conta {{{atendimento_cliente_request_id_conta_value}}}
  # @option opts [String] :nome_atendente {{{atendimento_cliente_request_nome_atendente_value}}}
  # @option opts [String] :data_atendimento {{{atendimento_cliente_request_data_atendimento_value}}}
  # @return [PageAtendimentoClienteResponse]
  describe 'listar_using_get7 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get9
  # {{{banco_resource_listar}}}
  # {{{banco_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @return [PageBancoResponse]
  describe 'listar_using_get9 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for salvar_using_post2
  # {{{atendimento_cliente_resource_salvar}}}
  # {{{atendimento_cliente_resource_salvar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :id_conta {{{atendimento_cliente_persist_id_conta_value}}}
  # @option opts [String] :conteudo_atendimento {{{atendimento_cliente_persist_conteudo_atendimento_value}}}
  # @option opts [String] :detalhes_atendimento {{{atendimento_cliente_persist_detalhes_atendimento_value}}}
  # @option opts [String] :nome_atendente {{{atendimento_cliente_persist_nome_atendente_value}}}
  # @option opts [String] :data_atendimento {{{atendimento_cliente_persist_data_atendimento_value}}}
  # @option opts [String] :data_agendamento {{{atendimento_cliente_persist_data_agendamento_value}}}
  # @option opts [String] :data_hora_inicio_atendimento {{{atendimento_cliente_persist_data_hora_inicio_atendimento_value}}}
  # @option opts [String] :data_hora_fim_atendimento {{{atendimento_cliente_persist_data_hora_fim_atendimento_value}}}
  # @option opts [Integer] :flag_fila_fraude {{{atendimento_cliente_persist_flag_fila_fraude_value}}}
  # @return [AtendimentoClienteResponse]
  describe 'salvar_using_post2 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for salvar_using_post4
  # {{{campanha_resource_salvar}}}
  # {{{campanha_resource_salvar_notes}}}
  # @param campanha_persist campanhaPersist
  # @param [Hash] opts the optional parameters
  # @return [CampanhaResponse]
  describe 'salvar_using_post4 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for salvar_using_post6
  # {{{configuracao_rotativo_resource_salvar}}}
  # {{{configuracao_rotativo_resource_salvar_notes}}}
  # @param configuracao_rotativo_persist configuracaoRotativoPersist
  # @param [Hash] opts the optional parameters
  # @return [ConfiguracaoRotativoDetalheResponse]
  describe 'salvar_using_post6 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


end

