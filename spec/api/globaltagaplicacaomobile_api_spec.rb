=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::GlobaltagaplicacaomobileApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GlobaltagaplicacaomobileApi' do
  before do
    # run before each test
    @instance = Pier::GlobaltagaplicacaomobileApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlobaltagaplicacaomobileApi' do
    it 'should create an instact of GlobaltagaplicacaomobileApi' do
      @instance.should be_a(Pier::GlobaltagaplicacaomobileApi)
    end
  end


  # unit tests for atualizar_using_put
  # {{{aplicacao_mobile_resource_atualizar}}}
  # {{{aplicacao_mobile_resource_atualizar_notes}}}
  # @param id {{{aplicacao_mobile_resource_atualizar_param_id}}}
  # @param update update
  # @param [Hash] opts the optional parameters
  # @return [AplicacaoMobileResponse]
  describe 'atualizar_using_put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get3
  # {{{aplicacao_mobile_resource_listar}}}
  # {{{aplicacao_mobile_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :id {{{aplicacao_mobile_request_id_value}}}
  # @option opts [Integer] :id_plataforma_mobile {{{aplicacao_mobile_request_id_plataforma_mobile_value}}}
  # @return [PageAplicacaoMobileResponse]
  describe 'listar_using_get3 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for salvar_using_post
  # {{{aplicacao_mobile_resource_salvar}}}
  # {{{aplicacao_mobile_resource_salvar_notes}}}
  # @param persist persist
  # @param [Hash] opts the optional parameters
  # @return [AplicacaoMobileResponse]
  describe 'salvar_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


end

