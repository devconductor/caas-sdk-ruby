=begin
PIER Labs

Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::StatusParametroApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'StatusParametroApi' do
  before do
    # run before each test
    @instance = Pier::StatusParametroApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of StatusParametroApi' do
    it 'should create an instact of StatusParametroApi' do
      @instance.should be_a(Pier::StatusParametroApi)
    end
  end

  # unit tests for consultar_estagio_cartao_using_get
  # Apresenta os dados de um determinado Estagio Cart\u00E3o
  # Este m\u00E9todo permite consultar os par\u00E2metros de um determinado Est\u00E1gio de Entrega do Cart\u00E3o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
  # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Est\u00E1gio de Entrega do Cart\u00E3o (id).
  # @param [Hash] opts the optional parameters
  # @return [EstagioCartaoResponse]
  describe 'consultar_estagio_cartao_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for consultar_status_cartao_using_get
  # Apresenta os dados de um determinado Status Cart\u00E3o
  # Este m\u00E9todo permite consultar os par\u00E2metros de um determinado Status de Cart\u00E3o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
  # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Est\u00E1gio de Entrega do Cart\u00E3o (id).
  # @param [Hash] opts the optional parameters
  # @return [StatusCartaoResponse]
  describe 'consultar_status_cartao_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for consultar_using_get28
  # Apresenta os dados de um determinado Status Conta
  # Este m\u00E9todo permite consultar os par\u00E2metros de um determinado Status Conta a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
  # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Status da Conta (id).
  # @param [Hash] opts the optional parameters
  # @return [StatusContaResponse]
  describe 'consultar_using_get28 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for consultar_using_get29
  # Apresenta os dados de um determinado Status Impress\u00E3o
  # Este m\u00E9todo permite consultar os par\u00E2metros de um determinado Status de Impress\u00E3o do Cart\u00E3o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
  # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Status de Impress\u00E3o do Cart\u00E3o (id).
  # @param [Hash] opts the optional parameters
  # @return [StatusImpressaoResponse]
  describe 'consultar_using_get29 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_estagios_cartoes_using_get
  # Lista as op\u00E7\u00F5es de Est\u00E1gios do Cart\u00E3o
  # Este m\u00E9todo permite que sejam listadas as op\u00E7\u00F5es de Est\u00E1gio de Entrega que podem ser atribu\u00EDdas aos Cart\u00F5es.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
  # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
  # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
  # @option opts [Integer] :id Id do est\u00E1gio cart\u00E3o
  # @option opts [String] :nome Nome do est\u00E1gio cart\u00E3o
  # @return [PageEstagioCartaoResponse]
  describe 'listar_estagios_cartoes_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_status_cartoes_using_get
  # Lista as op\u00E7\u00F5es de Status do Cart\u00E3o
  # Este m\u00E9todo permite que sejam listadas as possibilidades de Status que podem ser atribu\u00EDdas aos Cart\u00F5es.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
  # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
  # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
  # @option opts [Integer] :id C\u00F3digo de Identifica\u00E7\u00E3o do Status do Cart\u00E3o (id) 
  # @option opts [String] :nome Nome atribu\u00EDdo ao Status de Entrega do Cart\u00E3o.
  # @option opts [Integer] :permite_desbloquear Par\u00E2metro que define se o status do cart\u00E3o permite a reativa\u00E7\u00E3o do cart\u00E3o, sendo: 0: Inativo e 1: Ativo.
  # @option opts [Integer] :permite_atribuir_como_bloqueio Par\u00E2metro que define se o status do cart\u00E3o permite a reativa\u00E7\u00E3o do cart\u00E3o, sendo: 0: Inativo e 1: Ativo.
  # @option opts [Integer] :permite_atribuir_como_cancelamento Par\u00E2metro que define se o status do cart\u00E3o permite a reativa\u00E7\u00E3o do cart\u00E3o, sendo: 0: Inativo e 1: Ativo.
  # @option opts [Integer] :cobrar_tarifa_ao_emitir_nova_via Par\u00E2metro que define se o status do cart\u00E3o permite a reativa\u00E7\u00E3o do cart\u00E3o, sendo: 0: Inativo e 1: Ativo.
  # @return [PageStatusCartaoResponse]
  describe 'listar_status_cartoes_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_tipos_eventos_transacoes_using_get
  # Lista os tipos de transa\u00E7\u00F5es
  # Esse recurso permite listar os tipos de transa\u00E7\u00F5es dispon\u00EDveis.
  # @param [Hash] opts the optional parameters
  # @return [Array<Object>]
  describe 'listar_tipos_eventos_transacoes_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_using_get38
  # Lista os Status Contas cadastrados para o Emissor
  # Este m\u00E9todo permite que sejam listados os Status Contas existentes na base de dados do Emissor.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
  # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
  # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
  # @option opts [Integer] :id C\u00F3digo de Identifica\u00E7\u00E3o do Status da Conta (id).
  # @option opts [String] :nome Nome atribu\u00EDdo ao Status da Conta.
  # @option opts [Integer] :permite_alterar_vencimento Par\u00E2metro que define se o Status da conta permite a solicita\u00E7\u00E3o da altera\u00E7\u00E3o do Dia para Vencimento das Faturas, sendo: 0: Inativo e 1: Ativo.
  # @option opts [Integer] :permite_alterar_limite Par\u00E2metro que define se o Status da conta permite altera\u00E7\u00E3o de Limites, sendo: 0: Inativo e 1: Ativo.
  # @option opts [Integer] :permite_emitir_nova_via_cartao Par\u00E2metro que define se o Status da conta permite solicitar uma nova via de Cart\u00E3o, sendo: 0: Inativo e 1: Ativo.
  # @option opts [Integer] :permite_fazer_transferencia Par\u00E2metro que define se o Status da conta permite originar Transfer\u00EAncias de Cr\u00E9dito para outras Contas do mesmo Emissor ou para uma Conta Banc\u00E1ria, sendo: 0: Inativo e 1: Ativo.
  # @option opts [Integer] :permite_receber_transferencia Par\u00E2metro que define se o Status da conta permite  receber Transfer\u00EAncias de Cr\u00E9dito originadas de outras Contas do mesmo emissor, sendo: 0: Inativo e 1: Ativo.
  # @option opts [Integer] :permite_criar_acordo_cobranca Par\u00E2metro que define se o Status da conta permite ter um Acordo de Cobran\u00E7a de D\u00EDvida criado para ela, sendo: 0: Inativo e 1: Ativo.
  # @option opts [Integer] :permite_atribuir_como_bloqueio Par\u00E2metro que define se o Status da conta permite ser atribu\u00EDdo para Bloquear temporariamente uma Conta, sendo: 0: Inativo e 1: Ativo.
  # @option opts [Integer] :permite_desbloquear Par\u00E2metro que define se o Status da conta permite ser desbloqueada, sendo: 0: Inativo e 1: Ativo.
  # @option opts [Integer] :permite_atribuir_como_cancelamento Par\u00E2metro que define se o Status da conta permite ser atribu\u00EDdo para realizar o cancelamento definitivo de uma conta, sendo: 0: Inativo e 1: Ativo.
  # @return [PageStatusContaResponse]
  describe 'listar_using_get38 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for listar_using_get39
  # Lista as op\u00E7\u00F5es de Status Impress\u00E3o
  # Este m\u00E9todo permite que sejam listadas as op\u00E7\u00F5es de Status Impress\u00E3o que podem ser atribu\u00EDdas aos Cart\u00F5es.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
  # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
  # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
  # @option opts [Integer] :id Id do est\u00E1gio cart\u00E3o
  # @option opts [String] :nome Nome do status impress\u00E3o
  # @return [PageStatusImpressaoResponse]
  describe 'listar_using_get39 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
