=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'date'

module Pier
  # Limite Disponibilidade
  class LimiteDisponibilidade
    # C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o de Limite e Disponibilidade (id).
    attr_accessor :id

    # Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador possui para uso exclusivo em Compras Nacionais.
    attr_accessor :limite_compra

    # Quando utilizado pelo emissor, este campo apresenta o valor da margem de cr\u00C3\u00A9dito que ele poder\u00C3\u00A1 utilizar para ser cobrado de forma consignada (desconto em folha) em seu sal\u00C3\u00A1rio/vencimentos.
    attr_accessor :limite_consignado

    # Apresenta o valor do limite de cr\u00C3\u00A9dito que o portador do cart\u00C3\u00A3o possui.
    attr_accessor :limite_global

    # Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador possui para uso exclusivo em Compras Internacionais.
    attr_accessor :limite_internacional_compra

    # Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador possui para realizar transa\u00C3\u00A7\u00C3\u00B5es Internacionais de Compras Parceladas.
    attr_accessor :limite_internacional_parcelado

    # Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que portador pode acumular a partir da soma das parcelas das compras internacionais que forem realizadas nesta modalidade.
    attr_accessor :limite_internacional_parcelas

    # Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador pode utilizar para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Internacional.
    attr_accessor :limite_internacional_saque_global

    # Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador pode utilizar para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Internacional dentro de cada ciclo de faturamento.
    attr_accessor :limite_internacional_saque_periodo

    # Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador possui para realizar transa\u00C3\u00A7\u00C3\u00B5es de compras parceladas.
    attr_accessor :limite_parcelado

    # Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que portador pode acumular a partir da soma das parcelas das compras que forem realizadas nesta modalidade.
    attr_accessor :limite_parcelas

    # Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador pode utilizar para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Nacional.
    attr_accessor :limite_saque_global

    # Quando utilizado pelo emissor, este campo apresenta o valor do limite de cr\u00C3\u00A9dito que o portador pode utilizar para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Nacional dentro de cada ciclo de faturamento.
    attr_accessor :limite_saque_periodo

    # Quando utilizado pelo emissor a modalidade limiteCompra, este campo apresentar\u00C3\u00A1 o valor de cr\u00C3\u00A9dito que o portador possui dispon\u00C3\u00ADvel para realizar transa\u00C3\u00A7\u00C3\u00B5es de compra Nacional.
    attr_accessor :saldo_disponivel_compra

    # Quando utilizado pelo emissor a modalidade limiteCompraInternacional, este campo apresentar\u00C3\u00A1 o valor de cr\u00C3\u00A9dito que o portador possui dispon\u00C3\u00ADvel para realizar transa\u00C3\u00A7\u00C3\u00B5es de Compra Internacional.
    attr_accessor :saldo_disponivel_compra_internacional

    # Apresenta o valor de cr\u00C3\u00A9dito que o portador possui dispon\u00C3\u00ADvel para realizar transa\u00C3\u00A7\u00C3\u00B5es.
    attr_accessor :saldo_disponivel_global

    # Quando utilizado pelo emissor a modalidade limiteParcelado, este campo apresentar\u00C3\u00A1 o valor de cr\u00C3\u00A9dito que o portador possui dispon\u00C3\u00ADvel para realizar transa\u00C3\u00A7\u00C3\u00B5es de compra Nacional.
    attr_accessor :saldo_disponivel_parcelado

    # Quando utilizado pelo emissor a modalidade limiteParcelas, este campo apresentar\u00C3\u00A1 o valor de cr\u00C3\u00A9dito que o portador possui dispon\u00C3\u00ADvel para utilizar como valor de parcelas Nacionais em um determinado ciclo de faturamento.
    attr_accessor :saldo_disponivel_parcelas

    # Quando utilizado pelo emissor a modalidade limiteSaque, este campo apresentar\u00C3\u00A1 o valor de cr\u00C3\u00A9dito que o portador possui dispon\u00C3\u00ADvel para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Nacional.
    attr_accessor :saldo_disponivel_saque

    # Quando utilizado pelo emissor a modalidade limiteSaqueInternacional, este campo apresentar\u00C3\u00A1 o valor de cr\u00C3\u00A9dito que o portador possui dispon\u00C3\u00ADvel para realizar transa\u00C3\u00A7\u00C3\u00B5es de Saque Internacional.
    attr_accessor :saldo_disponivel_saque_internacional

    # Quando utilizado um programa de fidelidade pelo emissor, este campo apresentar\u00C3\u00A1 o saldo atual de pontos que o portador possui.
    attr_accessor :saldo_pontos_fidelidade


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'id',
        
        :'limite_compra' => :'limiteCompra',
        
        :'limite_consignado' => :'limiteConsignado',
        
        :'limite_global' => :'limiteGlobal',
        
        :'limite_internacional_compra' => :'limiteInternacionalCompra',
        
        :'limite_internacional_parcelado' => :'limiteInternacionalParcelado',
        
        :'limite_internacional_parcelas' => :'limiteInternacionalParcelas',
        
        :'limite_internacional_saque_global' => :'limiteInternacionalSaqueGlobal',
        
        :'limite_internacional_saque_periodo' => :'limiteInternacionalSaquePeriodo',
        
        :'limite_parcelado' => :'limiteParcelado',
        
        :'limite_parcelas' => :'limiteParcelas',
        
        :'limite_saque_global' => :'limiteSaqueGlobal',
        
        :'limite_saque_periodo' => :'limiteSaquePeriodo',
        
        :'saldo_disponivel_compra' => :'saldoDisponivelCompra',
        
        :'saldo_disponivel_compra_internacional' => :'saldoDisponivelCompraInternacional',
        
        :'saldo_disponivel_global' => :'saldoDisponivelGlobal',
        
        :'saldo_disponivel_parcelado' => :'saldoDisponivelParcelado',
        
        :'saldo_disponivel_parcelas' => :'saldoDisponivelParcelas',
        
        :'saldo_disponivel_saque' => :'saldoDisponivelSaque',
        
        :'saldo_disponivel_saque_internacional' => :'saldoDisponivelSaqueInternacional',
        
        :'saldo_pontos_fidelidade' => :'saldoPontosFidelidade'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'id' => :'Integer',
        
        :'limite_compra' => :'Float',
        
        :'limite_consignado' => :'Float',
        
        :'limite_global' => :'Float',
        
        :'limite_internacional_compra' => :'Float',
        
        :'limite_internacional_parcelado' => :'Float',
        
        :'limite_internacional_parcelas' => :'Float',
        
        :'limite_internacional_saque_global' => :'Float',
        
        :'limite_internacional_saque_periodo' => :'Float',
        
        :'limite_parcelado' => :'Float',
        
        :'limite_parcelas' => :'Float',
        
        :'limite_saque_global' => :'Float',
        
        :'limite_saque_periodo' => :'Float',
        
        :'saldo_disponivel_compra' => :'Float',
        
        :'saldo_disponivel_compra_internacional' => :'Float',
        
        :'saldo_disponivel_global' => :'Float',
        
        :'saldo_disponivel_parcelado' => :'Float',
        
        :'saldo_disponivel_parcelas' => :'Float',
        
        :'saldo_disponivel_saque' => :'Float',
        
        :'saldo_disponivel_saque_internacional' => :'Float',
        
        :'saldo_pontos_fidelidade' => :'Float'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'id']
        
        
        self.id = attributes[:'id']
        
      
      end

      
      if attributes[:'limiteCompra']
        
        
        self.limite_compra = attributes[:'limiteCompra']
        
      
      end

      
      if attributes[:'limiteConsignado']
        
        
        self.limite_consignado = attributes[:'limiteConsignado']
        
      
      end

      
      if attributes[:'limiteGlobal']
        
        
        self.limite_global = attributes[:'limiteGlobal']
        
      
      end

      
      if attributes[:'limiteInternacionalCompra']
        
        
        self.limite_internacional_compra = attributes[:'limiteInternacionalCompra']
        
      
      end

      
      if attributes[:'limiteInternacionalParcelado']
        
        
        self.limite_internacional_parcelado = attributes[:'limiteInternacionalParcelado']
        
      
      end

      
      if attributes[:'limiteInternacionalParcelas']
        
        
        self.limite_internacional_parcelas = attributes[:'limiteInternacionalParcelas']
        
      
      end

      
      if attributes[:'limiteInternacionalSaqueGlobal']
        
        
        self.limite_internacional_saque_global = attributes[:'limiteInternacionalSaqueGlobal']
        
      
      end

      
      if attributes[:'limiteInternacionalSaquePeriodo']
        
        
        self.limite_internacional_saque_periodo = attributes[:'limiteInternacionalSaquePeriodo']
        
      
      end

      
      if attributes[:'limiteParcelado']
        
        
        self.limite_parcelado = attributes[:'limiteParcelado']
        
      
      end

      
      if attributes[:'limiteParcelas']
        
        
        self.limite_parcelas = attributes[:'limiteParcelas']
        
      
      end

      
      if attributes[:'limiteSaqueGlobal']
        
        
        self.limite_saque_global = attributes[:'limiteSaqueGlobal']
        
      
      end

      
      if attributes[:'limiteSaquePeriodo']
        
        
        self.limite_saque_periodo = attributes[:'limiteSaquePeriodo']
        
      
      end

      
      if attributes[:'saldoDisponivelCompra']
        
        
        self.saldo_disponivel_compra = attributes[:'saldoDisponivelCompra']
        
      
      end

      
      if attributes[:'saldoDisponivelCompraInternacional']
        
        
        self.saldo_disponivel_compra_internacional = attributes[:'saldoDisponivelCompraInternacional']
        
      
      end

      
      if attributes[:'saldoDisponivelGlobal']
        
        
        self.saldo_disponivel_global = attributes[:'saldoDisponivelGlobal']
        
      
      end

      
      if attributes[:'saldoDisponivelParcelado']
        
        
        self.saldo_disponivel_parcelado = attributes[:'saldoDisponivelParcelado']
        
      
      end

      
      if attributes[:'saldoDisponivelParcelas']
        
        
        self.saldo_disponivel_parcelas = attributes[:'saldoDisponivelParcelas']
        
      
      end

      
      if attributes[:'saldoDisponivelSaque']
        
        
        self.saldo_disponivel_saque = attributes[:'saldoDisponivelSaque']
        
      
      end

      
      if attributes[:'saldoDisponivelSaqueInternacional']
        
        
        self.saldo_disponivel_saque_internacional = attributes[:'saldoDisponivelSaqueInternacional']
        
      
      end

      
      if attributes[:'saldoPontosFidelidade']
        
        
        self.saldo_pontos_fidelidade = attributes[:'saldoPontosFidelidade']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      if @id.nil?
        return false
      end

      
      
      
      
      
      if @limite_compra.nil?
        return false
      end

      
      
      
      
      
      if @limite_consignado.nil?
        return false
      end

      
      
      
      
      
      if @limite_global.nil?
        return false
      end

      
      
      
      
      
      if @limite_internacional_compra.nil?
        return false
      end

      
      
      
      
      
      if @limite_internacional_parcelado.nil?
        return false
      end

      
      
      
      
      
      if @limite_internacional_parcelas.nil?
        return false
      end

      
      
      
      
      
      if @limite_internacional_saque_global.nil?
        return false
      end

      
      
      
      
      
      if @limite_internacional_saque_periodo.nil?
        return false
      end

      
      
      
      
      
      if @limite_parcelado.nil?
        return false
      end

      
      
      
      
      
      if @limite_parcelas.nil?
        return false
      end

      
      
      
      
      
      if @limite_saque_global.nil?
        return false
      end

      
      
      
      
      
      if @limite_saque_periodo.nil?
        return false
      end

      
      
      
      
      
      if @saldo_disponivel_compra.nil?
        return false
      end

      
      
      
      
      
      if @saldo_disponivel_compra_internacional.nil?
        return false
      end

      
      
      
      
      
      if @saldo_disponivel_global.nil?
        return false
      end

      
      
      
      
      
      if @saldo_disponivel_parcelado.nil?
        return false
      end

      
      
      
      
      
      if @saldo_disponivel_parcelas.nil?
        return false
      end

      
      
      
      
      
      if @saldo_disponivel_saque.nil?
        return false
      end

      
      
      
      
      
      if @saldo_disponivel_saque_internacional.nil?
        return false
      end

      
      
      
      
      
      if @saldo_pontos_fidelidade.nil?
        return false
      end

      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          limite_compra == o.limite_compra &&
          limite_consignado == o.limite_consignado &&
          limite_global == o.limite_global &&
          limite_internacional_compra == o.limite_internacional_compra &&
          limite_internacional_parcelado == o.limite_internacional_parcelado &&
          limite_internacional_parcelas == o.limite_internacional_parcelas &&
          limite_internacional_saque_global == o.limite_internacional_saque_global &&
          limite_internacional_saque_periodo == o.limite_internacional_saque_periodo &&
          limite_parcelado == o.limite_parcelado &&
          limite_parcelas == o.limite_parcelas &&
          limite_saque_global == o.limite_saque_global &&
          limite_saque_periodo == o.limite_saque_periodo &&
          saldo_disponivel_compra == o.saldo_disponivel_compra &&
          saldo_disponivel_compra_internacional == o.saldo_disponivel_compra_internacional &&
          saldo_disponivel_global == o.saldo_disponivel_global &&
          saldo_disponivel_parcelado == o.saldo_disponivel_parcelado &&
          saldo_disponivel_parcelas == o.saldo_disponivel_parcelas &&
          saldo_disponivel_saque == o.saldo_disponivel_saque &&
          saldo_disponivel_saque_internacional == o.saldo_disponivel_saque_internacional &&
          saldo_pontos_fidelidade == o.saldo_pontos_fidelidade
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, limite_compra, limite_consignado, limite_global, limite_internacional_compra, limite_internacional_parcelado, limite_internacional_parcelas, limite_internacional_saque_global, limite_internacional_saque_periodo, limite_parcelado, limite_parcelas, limite_saque_global, limite_saque_periodo, saldo_disponivel_compra, saldo_disponivel_compra_internacional, saldo_disponivel_global, saldo_disponivel_parcelado, saldo_disponivel_parcelas, saldo_disponivel_saque, saldo_disponivel_saque_internacional, saldo_pontos_fidelidade].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end


end
