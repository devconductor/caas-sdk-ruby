=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class BaseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # Alterar base
    # Este recurso permite que seja modificado uma base j\u00C3\u00A1 cadastrada
    # @param id C\u00C3\u00B3digo identificador da base
    # @param servidor IP do servidor
    # @param usuario Nome do usu\u00C3\u00A1rio
    # @param senha Senha
    # @param nome_base Nome da base
    # @param senha_criptografada senha Criptografada
    # @param domain Dom\u00C3\u00ADnio da base
    # @param nome_base_controle_acesso Nome da base de controle acesso
    # @param servidor_controle_acesso Servidor do controle de acesso
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_emissor C\u00C3\u00B3digo do identificador do emissor
    # @return [Base]
    def alterar_using_put(id, servidor, usuario, senha, nome_base, senha_criptografada, domain, nome_base_controle_acesso, servidor_controle_acesso, opts = {})
      data, _status_code, _headers = alterar_using_put_with_http_info(id, servidor, usuario, senha, nome_base, senha_criptografada, domain, nome_base_controle_acesso, servidor_controle_acesso, opts)
      return data
    end

    # Alterar base
    # Este recurso permite que seja modificado uma base j\u00C3\u00A1 cadastrada
    # @param id C\u00C3\u00B3digo identificador da base
    # @param servidor IP do servidor
    # @param usuario Nome do usu\u00C3\u00A1rio
    # @param senha Senha
    # @param nome_base Nome da base
    # @param senha_criptografada senha Criptografada
    # @param domain Dom\u00C3\u00ADnio da base
    # @param nome_base_controle_acesso Nome da base de controle acesso
    # @param servidor_controle_acesso Servidor do controle de acesso
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_emissor C\u00C3\u00B3digo do identificador do emissor
    # @return [Array<(Base, Fixnum, Hash)>] Base data, response status code and response headers
    def alterar_using_put_with_http_info(id, servidor, usuario, senha, nome_base, senha_criptografada, domain, nome_base_controle_acesso, servidor_controle_acesso, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BaseApi.alterar_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling BaseApi.alterar_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'servidor' is set
      fail ArgumentError, "Missing the required parameter 'servidor' when calling BaseApi.alterar_using_put" if servidor.nil?
      
      
      
      
      
      
      # verify the required parameter 'usuario' is set
      fail ArgumentError, "Missing the required parameter 'usuario' when calling BaseApi.alterar_using_put" if usuario.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha' is set
      fail ArgumentError, "Missing the required parameter 'senha' when calling BaseApi.alterar_using_put" if senha.nil?
      
      
      
      
      
      
      # verify the required parameter 'nome_base' is set
      fail ArgumentError, "Missing the required parameter 'nome_base' when calling BaseApi.alterar_using_put" if nome_base.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha_criptografada' is set
      fail ArgumentError, "Missing the required parameter 'senha_criptografada' when calling BaseApi.alterar_using_put" if senha_criptografada.nil?
      
      
      
      
      
      
      # verify the required parameter 'domain' is set
      fail ArgumentError, "Missing the required parameter 'domain' when calling BaseApi.alterar_using_put" if domain.nil?
      
      
      
      
      
      
      # verify the required parameter 'nome_base_controle_acesso' is set
      fail ArgumentError, "Missing the required parameter 'nome_base_controle_acesso' when calling BaseApi.alterar_using_put" if nome_base_controle_acesso.nil?
      
      
      
      
      
      
      # verify the required parameter 'servidor_controle_acesso' is set
      fail ArgumentError, "Missing the required parameter 'servidor_controle_acesso' when calling BaseApi.alterar_using_put" if servidor_controle_acesso.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/bases".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'servidor'] = servidor
      query_params[:'usuario'] = usuario
      query_params[:'senha'] = senha
      query_params[:'nomeBase'] = nome_base
      query_params[:'senhaCriptografada'] = senha_criptografada
      query_params[:'domain'] = domain
      query_params[:'nomeBaseControleAcesso'] = nome_base_controle_acesso
      query_params[:'servidorControleAcesso'] = servidor_controle_acesso
      query_params[:'idEmissor'] = opts[:'id_emissor'] if opts[:'id_emissor']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaseApi#alterar_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Limpar mapa de bases
    # 
    # @param [Hash] opts the optional parameters
    # @return [BodyAccessToken]
    def clear_using_get(opts = {})
      data, _status_code, _headers = clear_using_get_with_http_info(opts)
      return data
    end

    # Limpar mapa de bases
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BodyAccessToken, Fixnum, Hash)>] BodyAccessToken data, response status code and response headers
    def clear_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BaseApi.clear_using_get ..."
      end
      
      # resource path
      local_var_path = "/api/bases/clear".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BodyAccessToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaseApi#clear_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Consultar base
    # Este recurso permite que seja consultada uma base do emissor atrav\u00C3\u00A9s de um id especifico
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da base (id).
    # @param [Hash] opts the optional parameters
    # @return [Base]
    def consultar_using_get1(id, opts = {})
      data, _status_code, _headers = consultar_using_get1_with_http_info(id, opts)
      return data
    end

    # Consultar base
    # Este recurso permite que seja consultada uma base do emissor atrav\u00C3\u00A9s de um id especifico
    # @param id C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da base (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(Base, Fixnum, Hash)>] Base data, response status code and response headers
    def consultar_using_get1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BaseApi.consultar_using_get1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling BaseApi.consultar_using_get1" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/bases/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaseApi#consultar_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Listar bases
    # Este recurso permite que sejam listadas as bases existentes
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Integer] :id C\u00C3\u00B3digo identificador da base
    # @option opts [String] :servidor IP do servidor
    # @option opts [String] :usuario Nome do usu\u00C3\u00A1rio
    # @option opts [String] :senha Senha
    # @option opts [String] :nome_base Nome da base
    # @option opts [BOOLEAN] :senha_criptografada senha Criptografada
    # @option opts [String] :domain Dom\u00C3\u00ADnio da base
    # @option opts [String] :nome_base_controle_acesso Nome da base de controle acesso
    # @option opts [Integer] :id_emissor C\u00C3\u00B3digo do identificador do emissor
    # @option opts [String] :servidor_controle_acesso Servidor do controle de acesso
    # @return [PageBases]
    def listar_using_get1(opts = {})
      data, _status_code, _headers = listar_using_get1_with_http_info(opts)
      return data
    end

    # Listar bases
    # Este recurso permite que sejam listadas as bases existentes
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page P\u00C3\u00A1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
    # @option opts [Integer] :id C\u00C3\u00B3digo identificador da base
    # @option opts [String] :servidor IP do servidor
    # @option opts [String] :usuario Nome do usu\u00C3\u00A1rio
    # @option opts [String] :senha Senha
    # @option opts [String] :nome_base Nome da base
    # @option opts [BOOLEAN] :senha_criptografada senha Criptografada
    # @option opts [String] :domain Dom\u00C3\u00ADnio da base
    # @option opts [String] :nome_base_controle_acesso Nome da base de controle acesso
    # @option opts [Integer] :id_emissor C\u00C3\u00B3digo do identificador do emissor
    # @option opts [String] :servidor_controle_acesso Servidor do controle de acesso
    # @return [Array<(PageBases, Fixnum, Hash)>] PageBases data, response status code and response headers
    def listar_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BaseApi.listar_using_get1 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/bases".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'servidor'] = opts[:'servidor'] if opts[:'servidor']
      query_params[:'usuario'] = opts[:'usuario'] if opts[:'usuario']
      query_params[:'senha'] = opts[:'senha'] if opts[:'senha']
      query_params[:'nomeBase'] = opts[:'nome_base'] if opts[:'nome_base']
      query_params[:'senhaCriptografada'] = opts[:'senha_criptografada'] if opts[:'senha_criptografada']
      query_params[:'domain'] = opts[:'domain'] if opts[:'domain']
      query_params[:'nomeBaseControleAcesso'] = opts[:'nome_base_controle_acesso'] if opts[:'nome_base_controle_acesso']
      query_params[:'idEmissor'] = opts[:'id_emissor'] if opts[:'id_emissor']
      query_params[:'servidorControleAcesso'] = opts[:'servidor_controle_acesso'] if opts[:'servidor_controle_acesso']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageBases')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaseApi#listar_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Salvar base
    # Este recurso permite que seja adicionado uma nova base
    # @param servidor IP do servidor
    # @param usuario Nome do usu\u00C3\u00A1rio
    # @param senha Senha
    # @param nome_base Nome da base
    # @param senha_criptografada senha Criptografada
    # @param domain Dom\u00C3\u00ADnio da base
    # @param nome_base_controle_acesso Nome da base de controle acesso
    # @param servidor_controle_acesso Servidor do controle de acesso
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_emissor C\u00C3\u00B3digo do identificador do emissor
    # @return [Base]
    def salvar_using_post1(servidor, usuario, senha, nome_base, senha_criptografada, domain, nome_base_controle_acesso, servidor_controle_acesso, opts = {})
      data, _status_code, _headers = salvar_using_post1_with_http_info(servidor, usuario, senha, nome_base, senha_criptografada, domain, nome_base_controle_acesso, servidor_controle_acesso, opts)
      return data
    end

    # Salvar base
    # Este recurso permite que seja adicionado uma nova base
    # @param servidor IP do servidor
    # @param usuario Nome do usu\u00C3\u00A1rio
    # @param senha Senha
    # @param nome_base Nome da base
    # @param senha_criptografada senha Criptografada
    # @param domain Dom\u00C3\u00ADnio da base
    # @param nome_base_controle_acesso Nome da base de controle acesso
    # @param servidor_controle_acesso Servidor do controle de acesso
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_emissor C\u00C3\u00B3digo do identificador do emissor
    # @return [Array<(Base, Fixnum, Hash)>] Base data, response status code and response headers
    def salvar_using_post1_with_http_info(servidor, usuario, senha, nome_base, senha_criptografada, domain, nome_base_controle_acesso, servidor_controle_acesso, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BaseApi.salvar_using_post1 ..."
      end
      
      
      # verify the required parameter 'servidor' is set
      fail ArgumentError, "Missing the required parameter 'servidor' when calling BaseApi.salvar_using_post1" if servidor.nil?
      
      
      
      
      
      
      # verify the required parameter 'usuario' is set
      fail ArgumentError, "Missing the required parameter 'usuario' when calling BaseApi.salvar_using_post1" if usuario.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha' is set
      fail ArgumentError, "Missing the required parameter 'senha' when calling BaseApi.salvar_using_post1" if senha.nil?
      
      
      
      
      
      
      # verify the required parameter 'nome_base' is set
      fail ArgumentError, "Missing the required parameter 'nome_base' when calling BaseApi.salvar_using_post1" if nome_base.nil?
      
      
      
      
      
      
      # verify the required parameter 'senha_criptografada' is set
      fail ArgumentError, "Missing the required parameter 'senha_criptografada' when calling BaseApi.salvar_using_post1" if senha_criptografada.nil?
      
      
      
      
      
      
      # verify the required parameter 'domain' is set
      fail ArgumentError, "Missing the required parameter 'domain' when calling BaseApi.salvar_using_post1" if domain.nil?
      
      
      
      
      
      
      # verify the required parameter 'nome_base_controle_acesso' is set
      fail ArgumentError, "Missing the required parameter 'nome_base_controle_acesso' when calling BaseApi.salvar_using_post1" if nome_base_controle_acesso.nil?
      
      
      
      
      
      
      # verify the required parameter 'servidor_controle_acesso' is set
      fail ArgumentError, "Missing the required parameter 'servidor_controle_acesso' when calling BaseApi.salvar_using_post1" if servidor_controle_acesso.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/bases".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'servidor'] = servidor
      query_params[:'usuario'] = usuario
      query_params[:'senha'] = senha
      query_params[:'nomeBase'] = nome_base
      query_params[:'senhaCriptografada'] = senha_criptografada
      query_params[:'domain'] = domain
      query_params[:'nomeBaseControleAcesso'] = nome_base_controle_acesso
      query_params[:'servidorControleAcesso'] = servidor_controle_acesso
      query_params[:'idEmissor'] = opts[:'id_emissor'] if opts[:'id_emissor']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BaseApi#salvar_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
