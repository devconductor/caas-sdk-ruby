=begin
PIER Labs

Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require 'date'

module Pier
  # Par\u00E2metros de requisi\u00E7\u00E3o para alterar origem comercial
  class OrigemComercialUpdate
    # Nome da origem comercial
    attr_accessor :nome

    # Descri\u00E7\u00E3o da origem comercial
    attr_accessor :descricao

    # Identificador do estabelecimento
    attr_accessor :id_estabelecimento

    # Identificador do tipo de origem comercial
    attr_accessor :id_tipo_origem_comercial

    # Identificador do grupo de origem comercial
    attr_accessor :id_grupo_origem_comercial

    # Indica o status da origem comercial
    attr_accessor :status

    # Indica se permite pr\u00E9 aprova\u00E7\u00E3o
    attr_accessor :flag_pre_aprovado

    # Indica se permite aprova\u00E7\u00E3o imediata
    attr_accessor :flag_aprovacao_imediata

    # Nome fantasia impresso no pl\u00E1stico
    attr_accessor :nome_fantasia_plastico

    # Indica se permite cart\u00E3o provis\u00F3rio
    attr_accessor :flag_cartao_provisorio

    # Indica se permite cart\u00E3o definitivo
    attr_accessor :flag_cartao_definitivo

    # Usu\u00E1rio para autentica\u00E7\u00E3o
    attr_accessor :usuario

    # Senha para autentica\u00E7\u00E3o
    attr_accessor :senha

    # Indica se \u00E9 origem externa
    attr_accessor :flag_origem_externa

    # Indica se h\u00E1 modifica\u00E7\u00E3o
    attr_accessor :flag_modificado

    # Indica se envia fatura
    attr_accessor :flag_envia_fatura_usuario

    # Indica se permite cr\u00E9dito de faturamento
    attr_accessor :flag_credito_faturamento

    # Indica se concede limite provis\u00F3rio
    attr_accessor :flag_concede_limite_provisorio

    # Indica se digitaliza documento
    attr_accessor :flag_digitalizar_doc

    # Indica se realiza embossing em loja
    attr_accessor :flag_embossing_loja

    # Indica se realiza consulta pr\u00E9via
    attr_accessor :flag_consulta_previa

    # Tipo de pessoa
    attr_accessor :tipo_pessoa

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'nome' => :'nome',
        
        :'descricao' => :'descricao',
        
        :'id_estabelecimento' => :'idEstabelecimento',
        
        :'id_tipo_origem_comercial' => :'idTipoOrigemComercial',
        
        :'id_grupo_origem_comercial' => :'idGrupoOrigemComercial',
        
        :'status' => :'status',
        
        :'flag_pre_aprovado' => :'flagPreAprovado',
        
        :'flag_aprovacao_imediata' => :'flagAprovacaoImediata',
        
        :'nome_fantasia_plastico' => :'nomeFantasiaPlastico',
        
        :'flag_cartao_provisorio' => :'flagCartaoProvisorio',
        
        :'flag_cartao_definitivo' => :'flagCartaoDefinitivo',
        
        :'usuario' => :'usuario',
        
        :'senha' => :'senha',
        
        :'flag_origem_externa' => :'flagOrigemExterna',
        
        :'flag_modificado' => :'flagModificado',
        
        :'flag_envia_fatura_usuario' => :'flagEnviaFaturaUsuario',
        
        :'flag_credito_faturamento' => :'flagCreditoFaturamento',
        
        :'flag_concede_limite_provisorio' => :'flagConcedeLimiteProvisorio',
        
        :'flag_digitalizar_doc' => :'flagDigitalizarDoc',
        
        :'flag_embossing_loja' => :'flagEmbossingLoja',
        
        :'flag_consulta_previa' => :'flagConsultaPrevia',
        
        :'tipo_pessoa' => :'tipoPessoa'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'nome' => :'String',
        
        :'descricao' => :'String',
        
        :'id_estabelecimento' => :'Integer',
        
        :'id_tipo_origem_comercial' => :'Integer',
        
        :'id_grupo_origem_comercial' => :'Integer',
        
        :'status' => :'Integer',
        
        :'flag_pre_aprovado' => :'BOOLEAN',
        
        :'flag_aprovacao_imediata' => :'BOOLEAN',
        
        :'nome_fantasia_plastico' => :'String',
        
        :'flag_cartao_provisorio' => :'BOOLEAN',
        
        :'flag_cartao_definitivo' => :'BOOLEAN',
        
        :'usuario' => :'String',
        
        :'senha' => :'String',
        
        :'flag_origem_externa' => :'BOOLEAN',
        
        :'flag_modificado' => :'BOOLEAN',
        
        :'flag_envia_fatura_usuario' => :'BOOLEAN',
        
        :'flag_credito_faturamento' => :'BOOLEAN',
        
        :'flag_concede_limite_provisorio' => :'BOOLEAN',
        
        :'flag_digitalizar_doc' => :'BOOLEAN',
        
        :'flag_embossing_loja' => :'BOOLEAN',
        
        :'flag_consulta_previa' => :'BOOLEAN',
        
        :'tipo_pessoa' => :'String'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'nome']
        
        
        self.nome = attributes[:'nome']
        
      
      end

      
      if attributes[:'descricao']
        
        
        self.descricao = attributes[:'descricao']
        
      
      end

      
      if attributes[:'idEstabelecimento']
        
        
        self.id_estabelecimento = attributes[:'idEstabelecimento']
        
      
      end

      
      if attributes[:'idTipoOrigemComercial']
        
        
        self.id_tipo_origem_comercial = attributes[:'idTipoOrigemComercial']
        
      
      end

      
      if attributes[:'idGrupoOrigemComercial']
        
        
        self.id_grupo_origem_comercial = attributes[:'idGrupoOrigemComercial']
        
      
      end

      
      if attributes[:'status']
        
        
        self.status = attributes[:'status']
        
      
      end

      
      if attributes[:'flagPreAprovado']
        
        
        self.flag_pre_aprovado = attributes[:'flagPreAprovado']
        
      
      end

      
      if attributes[:'flagAprovacaoImediata']
        
        
        self.flag_aprovacao_imediata = attributes[:'flagAprovacaoImediata']
        
      
      end

      
      if attributes[:'nomeFantasiaPlastico']
        
        
        self.nome_fantasia_plastico = attributes[:'nomeFantasiaPlastico']
        
      
      end

      
      if attributes[:'flagCartaoProvisorio']
        
        
        self.flag_cartao_provisorio = attributes[:'flagCartaoProvisorio']
        
      
      end

      
      if attributes[:'flagCartaoDefinitivo']
        
        
        self.flag_cartao_definitivo = attributes[:'flagCartaoDefinitivo']
        
      
      end

      
      if attributes[:'usuario']
        
        
        self.usuario = attributes[:'usuario']
        
      
      end

      
      if attributes[:'senha']
        
        
        self.senha = attributes[:'senha']
        
      
      end

      
      if attributes[:'flagOrigemExterna']
        
        
        self.flag_origem_externa = attributes[:'flagOrigemExterna']
        
      
      end

      
      if attributes[:'flagModificado']
        
        
        self.flag_modificado = attributes[:'flagModificado']
        
      
      end

      
      if attributes[:'flagEnviaFaturaUsuario']
        
        
        self.flag_envia_fatura_usuario = attributes[:'flagEnviaFaturaUsuario']
        
      
      end

      
      if attributes[:'flagCreditoFaturamento']
        
        
        self.flag_credito_faturamento = attributes[:'flagCreditoFaturamento']
        
      
      end

      
      if attributes[:'flagConcedeLimiteProvisorio']
        
        
        self.flag_concede_limite_provisorio = attributes[:'flagConcedeLimiteProvisorio']
        
      
      end

      
      if attributes[:'flagDigitalizarDoc']
        
        
        self.flag_digitalizar_doc = attributes[:'flagDigitalizarDoc']
        
      
      end

      
      if attributes[:'flagEmbossingLoja']
        
        
        self.flag_embossing_loja = attributes[:'flagEmbossingLoja']
        
      
      end

      
      if attributes[:'flagConsultaPrevia']
        
        
        self.flag_consulta_previa = attributes[:'flagConsultaPrevia']
        
      
      end

      
      if attributes[:'tipoPessoa']
        
        
        self.tipo_pessoa = attributes[:'tipoPessoa']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      allowed_values = ["PESSOA_FISICA", "PESSOA_JURIDICA"]
      if @tipo_pessoa && !allowed_values.include?(@tipo_pessoa)
        return false
      end
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tipo_pessoa Object to be assigned
    def tipo_pessoa=(tipo_pessoa)
      allowed_values = ["PESSOA_FISICA", "PESSOA_JURIDICA"]
      if tipo_pessoa && !allowed_values.include?(tipo_pessoa)
        fail ArgumentError, "invalid value for 'tipo_pessoa', must be one of #{allowed_values}."
      end
      @tipo_pessoa = tipo_pessoa
    end

    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          nome == o.nome &&
          descricao == o.descricao &&
          id_estabelecimento == o.id_estabelecimento &&
          id_tipo_origem_comercial == o.id_tipo_origem_comercial &&
          id_grupo_origem_comercial == o.id_grupo_origem_comercial &&
          status == o.status &&
          flag_pre_aprovado == o.flag_pre_aprovado &&
          flag_aprovacao_imediata == o.flag_aprovacao_imediata &&
          nome_fantasia_plastico == o.nome_fantasia_plastico &&
          flag_cartao_provisorio == o.flag_cartao_provisorio &&
          flag_cartao_definitivo == o.flag_cartao_definitivo &&
          usuario == o.usuario &&
          senha == o.senha &&
          flag_origem_externa == o.flag_origem_externa &&
          flag_modificado == o.flag_modificado &&
          flag_envia_fatura_usuario == o.flag_envia_fatura_usuario &&
          flag_credito_faturamento == o.flag_credito_faturamento &&
          flag_concede_limite_provisorio == o.flag_concede_limite_provisorio &&
          flag_digitalizar_doc == o.flag_digitalizar_doc &&
          flag_embossing_loja == o.flag_embossing_loja &&
          flag_consulta_previa == o.flag_consulta_previa &&
          tipo_pessoa == o.tipo_pessoa
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [nome, descricao, id_estabelecimento, id_tipo_origem_comercial, id_grupo_origem_comercial, status, flag_pre_aprovado, flag_aprovacao_imediata, nome_fantasia_plastico, flag_cartao_provisorio, flag_cartao_definitivo, usuario, senha, flag_origem_externa, flag_modificado, flag_envia_fatura_usuario, flag_credito_faturamento, flag_concede_limite_provisorio, flag_digitalizar_doc, flag_embossing_loja, flag_consulta_previa, tipo_pessoa].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
