=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class GlobaltagcontaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # {{{conta_resource_ajustar_conta}}}
    # {{{conta_resource_ajustar_conta_notes}}}
    # @param id {{{conta_resource_ajustar_conta_param_id}}}
    # @param id_tipo_ajuste {{{ajuste_persist_id_tipo_ajuste_value}}}
    # @param data_ajuste {{{ajuste_persist_data_ajuste_value}}}
    # @param valor_ajuste {{{ajuste_persist_valor_ajuste_value}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [String] :identificador_externo {{{ajuste_persist_identificador_externo_value}}}
    # @option opts [Integer] :id_transacao_original {{{ajuste_persist_id_transacao_original}}}
    # @return [AjusteFinanceiroResponse]
    def ajustar_conta_using_post1(id, id_tipo_ajuste, data_ajuste, valor_ajuste, opts = {})
      data, _status_code, _headers = ajustar_conta_using_post1_with_http_info(id, id_tipo_ajuste, data_ajuste, valor_ajuste, opts)
      return data
    end

    # {{{conta_resource_ajustar_conta}}}
    # {{{conta_resource_ajustar_conta_notes}}}
    # @param id {{{conta_resource_ajustar_conta_param_id}}}
    # @param id_tipo_ajuste {{{ajuste_persist_id_tipo_ajuste_value}}}
    # @param data_ajuste {{{ajuste_persist_data_ajuste_value}}}
    # @param valor_ajuste {{{ajuste_persist_valor_ajuste_value}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [String] :identificador_externo {{{ajuste_persist_identificador_externo_value}}}
    # @option opts [Integer] :id_transacao_original {{{ajuste_persist_id_transacao_original}}}
    # @return [Array<(AjusteFinanceiroResponse, Fixnum, Hash)>] AjusteFinanceiroResponse data, response status code and response headers
    def ajustar_conta_using_post1_with_http_info(id, id_tipo_ajuste, data_ajuste, valor_ajuste, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.ajustar_conta_using_post1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.ajustar_conta_using_post1" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_tipo_ajuste' is set
      fail ArgumentError, "Missing the required parameter 'id_tipo_ajuste' when calling GlobaltagcontaApi.ajustar_conta_using_post1" if id_tipo_ajuste.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_ajuste' is set
      fail ArgumentError, "Missing the required parameter 'data_ajuste' when calling GlobaltagcontaApi.ajustar_conta_using_post1" if data_ajuste.nil?
      
      
      
      
      
      
      # verify the required parameter 'valor_ajuste' is set
      fail ArgumentError, "Missing the required parameter 'valor_ajuste' when calling GlobaltagcontaApi.ajustar_conta_using_post1" if valor_ajuste.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/ajustes-financeiros".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'idTipoAjuste'] = id_tipo_ajuste
      query_params[:'dataAjuste'] = data_ajuste
      query_params[:'valorAjuste'] = valor_ajuste
      query_params[:'identificadorExterno'] = opts[:'identificador_externo'] if opts[:'identificador_externo']
      query_params[:'idTransacaoOriginal'] = opts[:'id_transacao_original'] if opts[:'id_transacao_original']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AjusteFinanceiroResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#ajustar_conta_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_alterar_produto}}}
    # {{{conta_resource_alterar_produto_notes}}}
    # @param id {{{conta_resource_alterar_produto_param_id}}}
    # @param request request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [String]
    def alterar_produto_using_post(id, request, opts = {})
      data, _status_code, _headers = alterar_produto_using_post_with_http_info(id, request, opts)
      return data
    end

    # {{{conta_resource_alterar_produto}}}
    # {{{conta_resource_alterar_produto_notes}}}
    # @param id {{{conta_resource_alterar_produto_param_id}}}
    # @param request request
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def alterar_produto_using_post_with_http_info(id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.alterar_produto_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.alterar_produto_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling GlobaltagcontaApi.alterar_produto_using_post" if request.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/alterar-produto".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#alterar_produto_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_alterar_titular}}}
    # {{{conta_resource_alterar_titular_notes}}}
    # @param id {{{conta_resource_alterar_titular_param_id_conta}}}
    # @param id_pessoa {{{conta_resource_alterar_titular_param_id_pessoa}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [ContaResponse]
    def alterar_titular_using_post(id, id_pessoa, opts = {})
      data, _status_code, _headers = alterar_titular_using_post_with_http_info(id, id_pessoa, opts)
      return data
    end

    # {{{conta_resource_alterar_titular}}}
    # {{{conta_resource_alterar_titular_notes}}}
    # @param id {{{conta_resource_alterar_titular_param_id_conta}}}
    # @param id_pessoa {{{conta_resource_alterar_titular_param_id_pessoa}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(ContaResponse, Fixnum, Hash)>] ContaResponse data, response status code and response headers
    def alterar_titular_using_post_with_http_info(id, id_pessoa, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.alterar_titular_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.alterar_titular_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_pessoa' is set
      fail ArgumentError, "Missing the required parameter 'id_pessoa' when calling GlobaltagcontaApi.alterar_titular_using_post" if id_pessoa.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/alterar-titular".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_pessoa'] = id_pessoa

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#alterar_titular_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_alterar_vencimento}}}
    # {{{conta_resource_alterar_vencimento_notes}}}
    # @param id {{{conta_resource_alterar_vencimento_param_id}}}
    # @param novo_dia_vencimento {{{conta_resource_alterar_vencimento_param_novo_dia_vencimento}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [ContaResponse]
    def alterar_vencimento_using_put(id, novo_dia_vencimento, opts = {})
      data, _status_code, _headers = alterar_vencimento_using_put_with_http_info(id, novo_dia_vencimento, opts)
      return data
    end

    # {{{conta_resource_alterar_vencimento}}}
    # {{{conta_resource_alterar_vencimento_notes}}}
    # @param id {{{conta_resource_alterar_vencimento_param_id}}}
    # @param novo_dia_vencimento {{{conta_resource_alterar_vencimento_param_novo_dia_vencimento}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(ContaResponse, Fixnum, Hash)>] ContaResponse data, response status code and response headers
    def alterar_vencimento_using_put_with_http_info(id, novo_dia_vencimento, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.alterar_vencimento_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.alterar_vencimento_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'novo_dia_vencimento' is set
      fail ArgumentError, "Missing the required parameter 'novo_dia_vencimento' when calling GlobaltagcontaApi.alterar_vencimento_using_put" if novo_dia_vencimento.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/alterar-vencimento".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'novo_dia_vencimento'] = novo_dia_vencimento

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#alterar_vencimento_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_ativar_anuidade}}}
    # {{{conta_resource_ativar_anuidade_notes}}}
    # @param id {{{conta_resource_ativar_anuidade_param_id}}}
    # @param id_anuidade {{{anuidade_request_id_anuidade_value}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :ddd {{{anuidade_request_d_d_d_value}}}
    # @option opts [String] :celular {{{anuidade_request_celular_value}}}
    # @option opts [Integer] :id_operadora {{{anuidade_request_id_operadora_value}}}
    # @option opts [Integer] :id_origem_comercial {{{anuidade_request_id_origem_comercial_value}}}
    # @return [Object]
    def ativar_anuidade_using_post(id, id_anuidade, opts = {})
      data, _status_code, _headers = ativar_anuidade_using_post_with_http_info(id, id_anuidade, opts)
      return data
    end

    # {{{conta_resource_ativar_anuidade}}}
    # {{{conta_resource_ativar_anuidade_notes}}}
    # @param id {{{conta_resource_ativar_anuidade_param_id}}}
    # @param id_anuidade {{{anuidade_request_id_anuidade_value}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :ddd {{{anuidade_request_d_d_d_value}}}
    # @option opts [String] :celular {{{anuidade_request_celular_value}}}
    # @option opts [Integer] :id_operadora {{{anuidade_request_id_operadora_value}}}
    # @option opts [Integer] :id_origem_comercial {{{anuidade_request_id_origem_comercial_value}}}
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def ativar_anuidade_using_post_with_http_info(id, id_anuidade, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.ativar_anuidade_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.ativar_anuidade_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_anuidade' is set
      fail ArgumentError, "Missing the required parameter 'id_anuidade' when calling GlobaltagcontaApi.ativar_anuidade_using_post" if id_anuidade.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/atribuir-anuidade".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'idAnuidade'] = id_anuidade
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'DDD'] = opts[:'ddd'] if opts[:'ddd']
      query_params[:'celular'] = opts[:'celular'] if opts[:'celular']
      query_params[:'idOperadora'] = opts[:'id_operadora'] if opts[:'id_operadora']
      query_params[:'idOrigemComercial'] = opts[:'id_origem_comercial'] if opts[:'id_origem_comercial']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#ativar_anuidade_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_ativar_envio_fatura_email}}}
    # {{{conta_resource_ativar_envio_fatura_email_notes}}}
    # @param id {{{conta_resource_ativar_envio_fatura_email_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Object]
    def ativar_envio_fatura_email_using_post(id, opts = {})
      data, _status_code, _headers = ativar_envio_fatura_email_using_post_with_http_info(id, opts)
      return data
    end

    # {{{conta_resource_ativar_envio_fatura_email}}}
    # {{{conta_resource_ativar_envio_fatura_email_notes}}}
    # @param id {{{conta_resource_ativar_envio_fatura_email_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def ativar_envio_fatura_email_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.ativar_envio_fatura_email_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.ativar_envio_fatura_email_using_post" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/ativar-fatura-email".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#ativar_envio_fatura_email_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_bloquear}}}
    # {{{conta_resource_bloquear_notes}}}
    # @param id {{{conta_resource_bloquear_param_id}}}
    # @param id_status {{{conta_resource_bloquear_param_id_status}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [ContaResponse]
    def bloquear_using_post1(id, id_status, opts = {})
      data, _status_code, _headers = bloquear_using_post1_with_http_info(id, id_status, opts)
      return data
    end

    # {{{conta_resource_bloquear}}}
    # {{{conta_resource_bloquear_notes}}}
    # @param id {{{conta_resource_bloquear_param_id}}}
    # @param id_status {{{conta_resource_bloquear_param_id_status}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(ContaResponse, Fixnum, Hash)>] ContaResponse data, response status code and response headers
    def bloquear_using_post1_with_http_info(id, id_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.bloquear_using_post1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.bloquear_using_post1" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_status' is set
      fail ArgumentError, "Missing the required parameter 'id_status' when calling GlobaltagcontaApi.bloquear_using_post1" if id_status.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/bloquear".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_status'] = id_status

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#bloquear_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{aderir_pagamento_sabado_recurso_cadastrar}}}
    # {{{aderir_pagamento_sabado_recurso_cadastrar_notas}}}
    # @param id {{{aderir_pagamento_sabado_recurso_cadastrar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [AdesaoPagamentoSabadoResponse]
    def cadastrar_using_post(id, opts = {})
      data, _status_code, _headers = cadastrar_using_post_with_http_info(id, opts)
      return data
    end

    # {{{aderir_pagamento_sabado_recurso_cadastrar}}}
    # {{{aderir_pagamento_sabado_recurso_cadastrar_notas}}}
    # @param id {{{aderir_pagamento_sabado_recurso_cadastrar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdesaoPagamentoSabadoResponse, Fixnum, Hash)>] AdesaoPagamentoSabadoResponse data, response status code and response headers
    def cadastrar_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.cadastrar_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.cadastrar_using_post" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/adesoes-pagamentos-sabados".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdesaoPagamentoSabadoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#cadastrar_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_cancelar}}}
    # {{{conta_resource_cancelar_notes}}}
    # @param id {{{conta_resource_cancelar_param_id}}}
    # @param id_status {{{conta_resource_cancelar_param_id_status}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [ContaResponse]
    def cancelar_using_post1(id, id_status, opts = {})
      data, _status_code, _headers = cancelar_using_post1_with_http_info(id, id_status, opts)
      return data
    end

    # {{{conta_resource_cancelar}}}
    # {{{conta_resource_cancelar_notes}}}
    # @param id {{{conta_resource_cancelar_param_id}}}
    # @param id_status {{{conta_resource_cancelar_param_id_status}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(ContaResponse, Fixnum, Hash)>] ContaResponse data, response status code and response headers
    def cancelar_using_post1_with_http_info(id, id_status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.cancelar_using_post1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.cancelar_using_post1" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_status' is set
      fail ArgumentError, "Missing the required parameter 'id_status' when calling GlobaltagcontaApi.cancelar_using_post1" if id_status.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/cancelar".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_status'] = id_status

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#cancelar_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_consultar_beneficio_pagamento_atraso}}}
    # {{{conta_resource_consultar_beneficio_pagamento_atraso_notes}}}
    # @param id {{{conta_resource_consultar_beneficio_pagamento_atraso_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [BeneficioPagamentoAtrasoResponse]
    def consultar_beneficio_pagamento_atraso_using_get(id, opts = {})
      data, _status_code, _headers = consultar_beneficio_pagamento_atraso_using_get_with_http_info(id, opts)
      return data
    end

    # {{{conta_resource_consultar_beneficio_pagamento_atraso}}}
    # {{{conta_resource_consultar_beneficio_pagamento_atraso_notes}}}
    # @param id {{{conta_resource_consultar_beneficio_pagamento_atraso_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(BeneficioPagamentoAtrasoResponse, Fixnum, Hash)>] BeneficioPagamentoAtrasoResponse data, response status code and response headers
    def consultar_beneficio_pagamento_atraso_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.consultar_beneficio_pagamento_atraso_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.consultar_beneficio_pagamento_atraso_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/consultar-beneficio-pagamento-atraso".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BeneficioPagamentoAtrasoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#consultar_beneficio_pagamento_atraso_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_consultar_boleto_emitido}}}
    # {{{conta_resource_consultar_boleto_emitido_notes}}}
    # @param id {{{conta_resource_consultar_boleto_emitido_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [BoletoResponse]
    def consultar_boleto_emitido_using_get(id, opts = {})
      data, _status_code, _headers = consultar_boleto_emitido_using_get_with_http_info(id, opts)
      return data
    end

    # {{{conta_resource_consultar_boleto_emitido}}}
    # {{{conta_resource_consultar_boleto_emitido_notes}}}
    # @param id {{{conta_resource_consultar_boleto_emitido_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(BoletoResponse, Fixnum, Hash)>] BoletoResponse data, response status code and response headers
    def consultar_boleto_emitido_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.consultar_boleto_emitido_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.consultar_boleto_emitido_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/consultar-dados-pagamento-fatura".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BoletoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#consultar_boleto_emitido_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_consultar_divida_atualizada_cliente}}}
    # {{{conta_resource_consultar_divida_atualizada_cliente_notes}}}
    # @param id {{{conta_resource_consultar_divida_atualizada_cliente_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :data_vencimento {{{divida_cliente_request_data_vencimento_value}}}
    # @option opts [Integer] :id_escritorio_cobranca {{{divida_cliente_request_id_escritorio_cobranca_value}}}
    # @return [DividaClienteResponse]
    def consultar_divida_atualizada_cliente_using_get(id, opts = {})
      data, _status_code, _headers = consultar_divida_atualizada_cliente_using_get_with_http_info(id, opts)
      return data
    end

    # {{{conta_resource_consultar_divida_atualizada_cliente}}}
    # {{{conta_resource_consultar_divida_atualizada_cliente_notes}}}
    # @param id {{{conta_resource_consultar_divida_atualizada_cliente_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :data_vencimento {{{divida_cliente_request_data_vencimento_value}}}
    # @option opts [Integer] :id_escritorio_cobranca {{{divida_cliente_request_id_escritorio_cobranca_value}}}
    # @return [Array<(DividaClienteResponse, Fixnum, Hash)>] DividaClienteResponse data, response status code and response headers
    def consultar_divida_atualizada_cliente_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.consultar_divida_atualizada_cliente_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.consultar_divida_atualizada_cliente_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/recuperar-divida-atualizada".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'dataVencimento'] = opts[:'data_vencimento'] if opts[:'data_vencimento']
      query_params[:'idEscritorioCobranca'] = opts[:'id_escritorio_cobranca'] if opts[:'id_escritorio_cobranca']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DividaClienteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#consultar_divida_atualizada_cliente_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_consultar_taxas_tarifas}}}
    # {{{conta_resource_consultar_taxas_tarifas_notes}}}
    # @param id {{{conta_resource_consultar_taxas_tarifas_param_id_conta}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageTaxasRefinanciamentoResponse]
    def consultar_taxas_tarifas_using_get(id, opts = {})
      data, _status_code, _headers = consultar_taxas_tarifas_using_get_with_http_info(id, opts)
      return data
    end

    # {{{conta_resource_consultar_taxas_tarifas}}}
    # {{{conta_resource_consultar_taxas_tarifas_notes}}}
    # @param id {{{conta_resource_consultar_taxas_tarifas_param_id_conta}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageTaxasRefinanciamentoResponse, Fixnum, Hash)>] PageTaxasRefinanciamentoResponse data, response status code and response headers
    def consultar_taxas_tarifas_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.consultar_taxas_tarifas_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.consultar_taxas_tarifas_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/consultar-taxas-tarifas".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTaxasRefinanciamentoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#consultar_taxas_tarifas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{aderir_pagamento_sabado_recurso_consultar}}}
    # {{{aderir_pagamento_sabado_recurso_consultar_notas}}}
    # @param id {{{aderir_pagamento_sabado_recurso_consultar_param_id}}}
    # @param data_vencimento {{{aderir_pagamento_sabado_recurso_consultar_param_data_vencimento}}}
    # @param [Hash] opts the optional parameters
    # @return [AdesaoPagamentoSabadoResponse]
    def consultar_using_get1(id, data_vencimento, opts = {})
      data, _status_code, _headers = consultar_using_get1_with_http_info(id, data_vencimento, opts)
      return data
    end

    # {{{aderir_pagamento_sabado_recurso_consultar}}}
    # {{{aderir_pagamento_sabado_recurso_consultar_notas}}}
    # @param id {{{aderir_pagamento_sabado_recurso_consultar_param_id}}}
    # @param data_vencimento {{{aderir_pagamento_sabado_recurso_consultar_param_data_vencimento}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdesaoPagamentoSabadoResponse, Fixnum, Hash)>] AdesaoPagamentoSabadoResponse data, response status code and response headers
    def consultar_using_get1_with_http_info(id, data_vencimento, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.consultar_using_get1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.consultar_using_get1" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_vencimento' is set
      fail ArgumentError, "Missing the required parameter 'data_vencimento' when calling GlobaltagcontaApi.consultar_using_get1" if data_vencimento.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/adesoes-pagamentos-sabados".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'dataVencimento'] = data_vencimento

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdesaoPagamentoSabadoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#consultar_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_consultar}}}
    # {{{conta_resource_consultar_notes}}}
    # @param id {{{conta_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [ContaDetalheResponse]
    def consultar_using_get14(id, opts = {})
      data, _status_code, _headers = consultar_using_get14_with_http_info(id, opts)
      return data
    end

    # {{{conta_resource_consultar}}}
    # {{{conta_resource_consultar_notes}}}
    # @param id {{{conta_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(ContaDetalheResponse, Fixnum, Hash)>] ContaDetalheResponse data, response status code and response headers
    def consultar_using_get14_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.consultar_using_get14 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.consultar_using_get14" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContaDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#consultar_using_get14\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{transferencia_resource_consultar}}}
    # {{{transferencia_resource_consultar_notes}}}
    # @param id {{{transferencia_resource_consultar_param_id_conta}}}
    # @param id_transferencia {{{transferencia_resource_consultar_param_id_transferencia}}}
    # @param [Hash] opts the optional parameters
    # @return [TransferenciaDetalheResponse]
    def consultar_using_get49(id, id_transferencia, opts = {})
      data, _status_code, _headers = consultar_using_get49_with_http_info(id, id_transferencia, opts)
      return data
    end

    # {{{transferencia_resource_consultar}}}
    # {{{transferencia_resource_consultar_notes}}}
    # @param id {{{transferencia_resource_consultar_param_id_conta}}}
    # @param id_transferencia {{{transferencia_resource_consultar_param_id_transferencia}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransferenciaDetalheResponse, Fixnum, Hash)>] TransferenciaDetalheResponse data, response status code and response headers
    def consultar_using_get49_with_http_info(id, id_transferencia, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.consultar_using_get49 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.consultar_using_get49" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_transferencia' is set
      fail ArgumentError, "Missing the required parameter 'id_transferencia' when calling GlobaltagcontaApi.consultar_using_get49" if id_transferencia.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/transferencias-creditos-cartoes/{id_transferencia}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'id_transferencia' + '}', id_transferencia.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransferenciaDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#consultar_using_get49\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_desativar_envio_fatura_email}}}
    # {{{conta_resource_desativar_envio_fatura_email_notes}}}
    # @param id {{{conta_resource_desativar_envio_fatura_email_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Object]
    def desativar_envio_fatura_email_using_post(id, opts = {})
      data, _status_code, _headers = desativar_envio_fatura_email_using_post_with_http_info(id, opts)
      return data
    end

    # {{{conta_resource_desativar_envio_fatura_email}}}
    # {{{conta_resource_desativar_envio_fatura_email_notes}}}
    # @param id {{{conta_resource_desativar_envio_fatura_email_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def desativar_envio_fatura_email_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.desativar_envio_fatura_email_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.desativar_envio_fatura_email_using_post" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/desativar-fatura-email".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#desativar_envio_fatura_email_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_gerar_boleto_recarga}}}
    # {{{conta_resource_gerar_boleto_recarga_notes}}}
    # @param id {{{conta_resource_gerar_boleto_recarga_param_id}}}
    # @param valor {{{boleto_recarga_request_valor_value}}}
    # @param data_vencimento {{{boleto_recarga_request_data_vencimento_value}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [BoletoResponse]
    def gerar_boleto_recarga_using_post(id, valor, data_vencimento, opts = {})
      data, _status_code, _headers = gerar_boleto_recarga_using_post_with_http_info(id, valor, data_vencimento, opts)
      return data
    end

    # {{{conta_resource_gerar_boleto_recarga}}}
    # {{{conta_resource_gerar_boleto_recarga_notes}}}
    # @param id {{{conta_resource_gerar_boleto_recarga_param_id}}}
    # @param valor {{{boleto_recarga_request_valor_value}}}
    # @param data_vencimento {{{boleto_recarga_request_data_vencimento_value}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(BoletoResponse, Fixnum, Hash)>] BoletoResponse data, response status code and response headers
    def gerar_boleto_recarga_using_post_with_http_info(id, valor, data_vencimento, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.gerar_boleto_recarga_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.gerar_boleto_recarga_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'valor' is set
      fail ArgumentError, "Missing the required parameter 'valor' when calling GlobaltagcontaApi.gerar_boleto_recarga_using_post" if valor.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_vencimento' is set
      fail ArgumentError, "Missing the required parameter 'data_vencimento' when calling GlobaltagcontaApi.gerar_boleto_recarga_using_post" if data_vencimento.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/gerar-boleto-recarga".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'valor'] = valor
      query_params[:'dataVencimento'] = data_vencimento

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BoletoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#gerar_boleto_recarga_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_gerar_cartao_embossing}}}
    # {{{conta_resource_gerar_cartao_embossing_notes}}}
    # @param id {{{conta_resource_gerar_cartao_embossing_param_id}}}
    # @param cartao_embossing_request cartaoEmbossingRequest
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [CartaoEmbossingResponse]
    def gerar_cartao_embossing_using_post(id, cartao_embossing_request, opts = {})
      data, _status_code, _headers = gerar_cartao_embossing_using_post_with_http_info(id, cartao_embossing_request, opts)
      return data
    end

    # {{{conta_resource_gerar_cartao_embossing}}}
    # {{{conta_resource_gerar_cartao_embossing_notes}}}
    # @param id {{{conta_resource_gerar_cartao_embossing_param_id}}}
    # @param cartao_embossing_request cartaoEmbossingRequest
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(CartaoEmbossingResponse, Fixnum, Hash)>] CartaoEmbossingResponse data, response status code and response headers
    def gerar_cartao_embossing_using_post_with_http_info(id, cartao_embossing_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.gerar_cartao_embossing_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.gerar_cartao_embossing_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'cartao_embossing_request' is set
      fail ArgumentError, "Missing the required parameter 'cartao_embossing_request' when calling GlobaltagcontaApi.gerar_cartao_embossing_using_post" if cartao_embossing_request.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/gerar-cartao-grafica".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cartao_embossing_request)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoEmbossingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#gerar_cartao_embossing_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_gerar_cartao_provisorio}}}
    # {{{conta_resource_gerar_cartao_provisorio_notes}}}
    # @param id {{{conta_resource_gerar_cartao_provisorio_param_id_conta}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [CartaoImpressaoProvisorioResponse]
    def gerar_cartao_provisorio_using_post(id, opts = {})
      data, _status_code, _headers = gerar_cartao_provisorio_using_post_with_http_info(id, opts)
      return data
    end

    # {{{conta_resource_gerar_cartao_provisorio}}}
    # {{{conta_resource_gerar_cartao_provisorio_notes}}}
    # @param id {{{conta_resource_gerar_cartao_provisorio_param_id_conta}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(CartaoImpressaoProvisorioResponse, Fixnum, Hash)>] CartaoImpressaoProvisorioResponse data, response status code and response headers
    def gerar_cartao_provisorio_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.gerar_cartao_provisorio_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.gerar_cartao_provisorio_using_post" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/gerar-cartao-provisorio".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoImpressaoProvisorioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#gerar_cartao_provisorio_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_gerar_cartao}}}
    # {{{conta_resource_gerar_cartao_notes}}}
    # @param id {{{conta_resource_gerar_cartao_param_id}}}
    # @param id_pessoa {{{conta_resource_gerar_cartao_param_id_pessoa}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Integer] :id_tipo_plastico {{{conta_resource_gerar_cartao_param_id_tipo_plastico}}}
    # @return [CartaoImpressaoResponse]
    def gerar_cartao_using_post(id, id_pessoa, opts = {})
      data, _status_code, _headers = gerar_cartao_using_post_with_http_info(id, id_pessoa, opts)
      return data
    end

    # {{{conta_resource_gerar_cartao}}}
    # {{{conta_resource_gerar_cartao_notes}}}
    # @param id {{{conta_resource_gerar_cartao_param_id}}}
    # @param id_pessoa {{{conta_resource_gerar_cartao_param_id_pessoa}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Integer] :id_tipo_plastico {{{conta_resource_gerar_cartao_param_id_tipo_plastico}}}
    # @return [Array<(CartaoImpressaoResponse, Fixnum, Hash)>] CartaoImpressaoResponse data, response status code and response headers
    def gerar_cartao_using_post_with_http_info(id, id_pessoa, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.gerar_cartao_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.gerar_cartao_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_pessoa' is set
      fail ArgumentError, "Missing the required parameter 'id_pessoa' when calling GlobaltagcontaApi.gerar_cartao_using_post" if id_pessoa.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/pessoas/{id_pessoa}/gerar-cartao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'id_pessoa' + '}', id_pessoa.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_tipo_plastico'] = opts[:'id_tipo_plastico'] if opts[:'id_tipo_plastico']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoImpressaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#gerar_cartao_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_gerar_cartao_virtual}}}
    # {{{conta_resource_gerar_cartao_virtual_notes}}}
    # @param id {{{conta_resource_gerar_cartao_virtual_param_id}}}
    # @param data_validade {{{conta_resource_gerar_cartao_virtual_param_data_validade}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [CartaoImpressaoResponse]
    def gerar_cartao_virtual_using_post(id, data_validade, opts = {})
      data, _status_code, _headers = gerar_cartao_virtual_using_post_with_http_info(id, data_validade, opts)
      return data
    end

    # {{{conta_resource_gerar_cartao_virtual}}}
    # {{{conta_resource_gerar_cartao_virtual_notes}}}
    # @param id {{{conta_resource_gerar_cartao_virtual_param_id}}}
    # @param data_validade {{{conta_resource_gerar_cartao_virtual_param_data_validade}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(CartaoImpressaoResponse, Fixnum, Hash)>] CartaoImpressaoResponse data, response status code and response headers
    def gerar_cartao_virtual_using_post_with_http_info(id, data_validade, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.gerar_cartao_virtual_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.gerar_cartao_virtual_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_validade' is set
      fail ArgumentError, "Missing the required parameter 'data_validade' when calling GlobaltagcontaApi.gerar_cartao_virtual_using_post" if data_validade.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/gerar-cartao-virtual".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'dataValidade'] = data_validade

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CartaoImpressaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#gerar_cartao_virtual_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_listar_historico_alteracoes_limites}}}
    # {{{conta_resource_listar_historico_alteracoes_limites_notes}}}
    # @param id {{{conta_resource_listar_historico_alteracoes_limites_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageHistoricoEventosResponse]
    def listar_historico_alteracoes_limites_using_get(id, opts = {})
      data, _status_code, _headers = listar_historico_alteracoes_limites_using_get_with_http_info(id, opts)
      return data
    end

    # {{{conta_resource_listar_historico_alteracoes_limites}}}
    # {{{conta_resource_listar_historico_alteracoes_limites_notes}}}
    # @param id {{{conta_resource_listar_historico_alteracoes_limites_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageHistoricoEventosResponse, Fixnum, Hash)>] PageHistoricoEventosResponse data, response status code and response headers
    def listar_historico_alteracoes_limites_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.listar_historico_alteracoes_limites_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.listar_historico_alteracoes_limites_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/historicos-alteracoes-limites".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageHistoricoEventosResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#listar_historico_alteracoes_limites_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_listar_historico_assessoria}}}
    # {{{conta_resource_listar_historico_assessoria_notes}}}
    # @param id {{{conta_resource_listar_historico_assessoria_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageHistoricoAssessoriaResponse]
    def listar_historico_assessoria_using_get(id, opts = {})
      data, _status_code, _headers = listar_historico_assessoria_using_get_with_http_info(id, opts)
      return data
    end

    # {{{conta_resource_listar_historico_assessoria}}}
    # {{{conta_resource_listar_historico_assessoria_notes}}}
    # @param id {{{conta_resource_listar_historico_assessoria_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageHistoricoAssessoriaResponse, Fixnum, Hash)>] PageHistoricoAssessoriaResponse data, response status code and response headers
    def listar_historico_assessoria_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.listar_historico_assessoria_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.listar_historico_assessoria_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/historicos-assessorias-cobranca".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageHistoricoAssessoriaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#listar_historico_assessoria_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_listar_historico_atrasos_faturas}}}
    # {{{conta_resource_listar_historico_atrasos_faturas_notes}}}
    # @param id {{{conta_resource_listar_historico_atrasos_faturas_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageHistoricoAtrasoFaturaResponse]
    def listar_historico_atrasos_faturas_using_get(id, opts = {})
      data, _status_code, _headers = listar_historico_atrasos_faturas_using_get_with_http_info(id, opts)
      return data
    end

    # {{{conta_resource_listar_historico_atrasos_faturas}}}
    # {{{conta_resource_listar_historico_atrasos_faturas_notes}}}
    # @param id {{{conta_resource_listar_historico_atrasos_faturas_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageHistoricoAtrasoFaturaResponse, Fixnum, Hash)>] PageHistoricoAtrasoFaturaResponse data, response status code and response headers
    def listar_historico_atrasos_faturas_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.listar_historico_atrasos_faturas_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.listar_historico_atrasos_faturas_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/historicos-faturas-atrasos".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageHistoricoAtrasoFaturaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#listar_historico_atrasos_faturas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{transacoes_correntes_resource_listar_nao_processadas}}}
    # {{{transacoes_correntes_resource_listar_nao_processadas_notes}}}
    # @param id {{{transacoes_correntes_resource_listar_nao_processadas_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :data_inicio {{{transacoes_nao_processadas_request_data_inicio_value}}}
    # @option opts [String] :data_fim {{{transacoes_nao_processadas_request_data_fim_value}}}
    # @return [PageTransacaoNaoProcessadaResponse]
    def listar_nao_processadas_using_get(id, opts = {})
      data, _status_code, _headers = listar_nao_processadas_using_get_with_http_info(id, opts)
      return data
    end

    # {{{transacoes_correntes_resource_listar_nao_processadas}}}
    # {{{transacoes_correntes_resource_listar_nao_processadas_notes}}}
    # @param id {{{transacoes_correntes_resource_listar_nao_processadas_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :data_inicio {{{transacoes_nao_processadas_request_data_inicio_value}}}
    # @option opts [String] :data_fim {{{transacoes_nao_processadas_request_data_fim_value}}}
    # @return [Array<(PageTransacaoNaoProcessadaResponse, Fixnum, Hash)>] PageTransacaoNaoProcessadaResponse data, response status code and response headers
    def listar_nao_processadas_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.listar_nao_processadas_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.listar_nao_processadas_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/transacoes/listar-nao-processadas".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'dataInicio'] = opts[:'data_inicio'] if opts[:'data_inicio']
      query_params[:'dataFim'] = opts[:'data_fim'] if opts[:'data_fim']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTransacaoNaoProcessadaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#listar_nao_processadas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{transacoes_correntes_resource_listar_processadas}}}
    # {{{transacoes_correntes_resource_listar_processadas_notes}}}
    # @param id {{{transacoes_correntes_resource_listar_processadas_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :data_vencimento {{{transacoes_processadas_request_data_vencimento_value}}}
    # @option opts [String] :data_inicio {{{transacoes_processadas_request_data_inicio_value}}}
    # @option opts [String] :data_fim {{{transacoes_processadas_request_data_fim_value}}}
    # @option opts [Integer] :id_tipo_transacao {{{transacoes_processadas_request_tipo_transacao}}}
    # @option opts [Integer] :recupera_encargos {{{transacoes_processadas_request_recupera_encargos}}}
    # @return [PageTransacoesCorrentesResponse]
    def listar_processadas_using_get(id, opts = {})
      data, _status_code, _headers = listar_processadas_using_get_with_http_info(id, opts)
      return data
    end

    # {{{transacoes_correntes_resource_listar_processadas}}}
    # {{{transacoes_correntes_resource_listar_processadas_notes}}}
    # @param id {{{transacoes_correntes_resource_listar_processadas_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :data_vencimento {{{transacoes_processadas_request_data_vencimento_value}}}
    # @option opts [String] :data_inicio {{{transacoes_processadas_request_data_inicio_value}}}
    # @option opts [String] :data_fim {{{transacoes_processadas_request_data_fim_value}}}
    # @option opts [Integer] :id_tipo_transacao {{{transacoes_processadas_request_tipo_transacao}}}
    # @option opts [Integer] :recupera_encargos {{{transacoes_processadas_request_recupera_encargos}}}
    # @return [Array<(PageTransacoesCorrentesResponse, Fixnum, Hash)>] PageTransacoesCorrentesResponse data, response status code and response headers
    def listar_processadas_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.listar_processadas_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.listar_processadas_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/transacoes/listar-processadas".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'dataVencimento'] = opts[:'data_vencimento'] if opts[:'data_vencimento']
      query_params[:'dataInicio'] = opts[:'data_inicio'] if opts[:'data_inicio']
      query_params[:'dataFim'] = opts[:'data_fim'] if opts[:'data_fim']
      query_params[:'idTipoTransacao'] = opts[:'id_tipo_transacao'] if opts[:'id_tipo_transacao']
      query_params[:'recuperaEncargos'] = opts[:'recupera_encargos'] if opts[:'recupera_encargos']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTransacoesCorrentesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#listar_processadas_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_listar}}}
    # {{{conta_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_produto {{{conta_request_id_produto_value}}}
    # @option opts [Integer] :id_origem_comercial {{{conta_request_id_origem_comercial_value}}}
    # @option opts [Integer] :id_pessoa {{{conta_request_id_pessoa_value}}}
    # @option opts [Integer] :id_status_conta {{{conta_request_id_status_conta_value}}}
    # @option opts [Integer] :dia_vencimento {{{conta_request_dia_vencimento_value}}}
    # @option opts [Integer] :melhor_dia_compra {{{conta_request_melhor_dia_compra_value}}}
    # @option opts [String] :data_status_conta {{{conta_request_data_status_conta_value}}}
    # @option opts [String] :data_cadastro {{{conta_request_data_cadastro_value}}}
    # @option opts [String] :data_ultima_alteracao_vencimento {{{conta_request_data_ultima_alteracao_vencimento_value}}}
    # @return [PageContaResponse]
    def listar_using_get18(opts = {})
      data, _status_code, _headers = listar_using_get18_with_http_info(opts)
      return data
    end

    # {{{conta_resource_listar}}}
    # {{{conta_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_produto {{{conta_request_id_produto_value}}}
    # @option opts [Integer] :id_origem_comercial {{{conta_request_id_origem_comercial_value}}}
    # @option opts [Integer] :id_pessoa {{{conta_request_id_pessoa_value}}}
    # @option opts [Integer] :id_status_conta {{{conta_request_id_status_conta_value}}}
    # @option opts [Integer] :dia_vencimento {{{conta_request_dia_vencimento_value}}}
    # @option opts [Integer] :melhor_dia_compra {{{conta_request_melhor_dia_compra_value}}}
    # @option opts [String] :data_status_conta {{{conta_request_data_status_conta_value}}}
    # @option opts [String] :data_cadastro {{{conta_request_data_cadastro_value}}}
    # @option opts [String] :data_ultima_alteracao_vencimento {{{conta_request_data_ultima_alteracao_vencimento_value}}}
    # @return [Array<(PageContaResponse, Fixnum, Hash)>] PageContaResponse data, response status code and response headers
    def listar_using_get18_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.listar_using_get18 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idProduto'] = opts[:'id_produto'] if opts[:'id_produto']
      query_params[:'idOrigemComercial'] = opts[:'id_origem_comercial'] if opts[:'id_origem_comercial']
      query_params[:'idPessoa'] = opts[:'id_pessoa'] if opts[:'id_pessoa']
      query_params[:'idStatusConta'] = opts[:'id_status_conta'] if opts[:'id_status_conta']
      query_params[:'diaVencimento'] = opts[:'dia_vencimento'] if opts[:'dia_vencimento']
      query_params[:'melhorDiaCompra'] = opts[:'melhor_dia_compra'] if opts[:'melhor_dia_compra']
      query_params[:'dataStatusConta'] = opts[:'data_status_conta'] if opts[:'data_status_conta']
      query_params[:'dataCadastro'] = opts[:'data_cadastro'] if opts[:'data_cadastro']
      query_params[:'dataUltimaAlteracaoVencimento'] = opts[:'data_ultima_alteracao_vencimento'] if opts[:'data_ultima_alteracao_vencimento']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageContaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#listar_using_get18\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{transacoes_correntes_resource_listar_nao_processadas_e_processadas}}}
    # {{{transacoes_correntes_resource_listar_nao_processadas_e_processadas_notes}}}
    # @param id {{{transacoes_correntes_resource_listar_nao_processadas_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :data_vencimento {{{transacoes_processadas_request_data_vencimento_value}}}
    # @option opts [String] :data_inicio {{{transacoes_processadas_request_data_inicio_value}}}
    # @option opts [String] :data_fim {{{transacoes_processadas_request_data_fim_value}}}
    # @option opts [Integer] :id_tipo_transacao {{{transacoes_processadas_request_tipo_transacao}}}
    # @return [PageTransacaoProcessadaNaoProcessadaResponse]
    def listar_using_get58(id, opts = {})
      data, _status_code, _headers = listar_using_get58_with_http_info(id, opts)
      return data
    end

    # {{{transacoes_correntes_resource_listar_nao_processadas_e_processadas}}}
    # {{{transacoes_correntes_resource_listar_nao_processadas_e_processadas_notes}}}
    # @param id {{{transacoes_correntes_resource_listar_nao_processadas_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :data_vencimento {{{transacoes_processadas_request_data_vencimento_value}}}
    # @option opts [String] :data_inicio {{{transacoes_processadas_request_data_inicio_value}}}
    # @option opts [String] :data_fim {{{transacoes_processadas_request_data_fim_value}}}
    # @option opts [Integer] :id_tipo_transacao {{{transacoes_processadas_request_tipo_transacao}}}
    # @return [Array<(PageTransacaoProcessadaNaoProcessadaResponse, Fixnum, Hash)>] PageTransacaoProcessadaNaoProcessadaResponse data, response status code and response headers
    def listar_using_get58_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.listar_using_get58 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.listar_using_get58" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/transacoes".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'dataVencimento'] = opts[:'data_vencimento'] if opts[:'data_vencimento']
      query_params[:'dataInicio'] = opts[:'data_inicio'] if opts[:'data_inicio']
      query_params[:'dataFim'] = opts[:'data_fim'] if opts[:'data_fim']
      query_params[:'idTipoTransacao'] = opts[:'id_tipo_transacao'] if opts[:'id_tipo_transacao']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTransacaoProcessadaNaoProcessadaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#listar_using_get58\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{transferencia_resource_listar}}}
    # {{{transferencia_resource_listar_notes}}}
    # @param id {{{transferencia_resource_listar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_transferencia {{{transferencia_request_id_transferencia_value}}}
    # @option opts [Integer] :id_conta_origem {{{transferencia_request_id_conta_origem_value}}}
    # @option opts [Integer] :id_conta_destino {{{transferencia_request_id_conta_destino_value}}}
    # @option opts [Float] :valor_transferencia {{{transferencia_request_valor_transferencia_value}}}
    # @option opts [String] :data_transferencia {{{transferencia_request_data_transferencia_value}}}
    # @return [PageTransferenciaResponse]
    def listar_using_get60(id, opts = {})
      data, _status_code, _headers = listar_using_get60_with_http_info(id, opts)
      return data
    end

    # {{{transferencia_resource_listar}}}
    # {{{transferencia_resource_listar_notes}}}
    # @param id {{{transferencia_resource_listar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id_transferencia {{{transferencia_request_id_transferencia_value}}}
    # @option opts [Integer] :id_conta_origem {{{transferencia_request_id_conta_origem_value}}}
    # @option opts [Integer] :id_conta_destino {{{transferencia_request_id_conta_destino_value}}}
    # @option opts [Float] :valor_transferencia {{{transferencia_request_valor_transferencia_value}}}
    # @option opts [String] :data_transferencia {{{transferencia_request_data_transferencia_value}}}
    # @return [Array<(PageTransferenciaResponse, Fixnum, Hash)>] PageTransferenciaResponse data, response status code and response headers
    def listar_using_get60_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.listar_using_get60 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.listar_using_get60" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/transferencias-creditos-cartoes".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idTransferencia'] = opts[:'id_transferencia'] if opts[:'id_transferencia']
      query_params[:'idContaOrigem'] = opts[:'id_conta_origem'] if opts[:'id_conta_origem']
      query_params[:'idContaDestino'] = opts[:'id_conta_destino'] if opts[:'id_conta_destino']
      query_params[:'valorTransferencia'] = opts[:'valor_transferencia'] if opts[:'valor_transferencia']
      query_params[:'dataTransferencia'] = opts[:'data_transferencia'] if opts[:'data_transferencia']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTransferenciaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#listar_using_get60\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_reativar}}}
    # {{{conta_resource_reativar_notes}}}
    # @param id {{{conta_resource_reativar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Object]
    def reativar_using_post1(id, opts = {})
      data, _status_code, _headers = reativar_using_post1_with_http_info(id, opts)
      return data
    end

    # {{{conta_resource_reativar}}}
    # {{{conta_resource_reativar_notes}}}
    # @param id {{{conta_resource_reativar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def reativar_using_post1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.reativar_using_post1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.reativar_using_post1" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/reativar".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#reativar_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_salvar}}}
    # {{{conta_resource_salvar_notes}}}
    # @param conta_persist contaPersist
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [ContaResponse]
    def salvar_using_post8(conta_persist, opts = {})
      data, _status_code, _headers = salvar_using_post8_with_http_info(conta_persist, opts)
      return data
    end

    # {{{conta_resource_salvar}}}
    # {{{conta_resource_salvar_notes}}}
    # @param conta_persist contaPersist
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @return [Array<(ContaResponse, Fixnum, Hash)>] ContaResponse data, response status code and response headers
    def salvar_using_post8_with_http_info(conta_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.salvar_using_post8 ..."
      end
      
      
      # verify the required parameter 'conta_persist' is set
      fail ArgumentError, "Missing the required parameter 'conta_persist' when calling GlobaltagcontaApi.salvar_using_post8" if conta_persist.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(conta_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#salvar_using_post8\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{financiamento_resource_simular_emprestimo_financiamento}}}
    # {{{financiamento_resource_simular_emprestimo_financiamento_notes}}}
    # @param id {{{financiamento_resource_simular_emprestimo_financiamento_param_id_conta}}}
    # @param request request
    # @param [Hash] opts the optional parameters
    # @return [EmprestimoPessoalResponse]
    def simular_emprestimo_financiamento_using_post(id, request, opts = {})
      data, _status_code, _headers = simular_emprestimo_financiamento_using_post_with_http_info(id, request, opts)
      return data
    end

    # {{{financiamento_resource_simular_emprestimo_financiamento}}}
    # {{{financiamento_resource_simular_emprestimo_financiamento_notes}}}
    # @param id {{{financiamento_resource_simular_emprestimo_financiamento_param_id_conta}}}
    # @param request request
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmprestimoPessoalResponse, Fixnum, Hash)>] EmprestimoPessoalResponse data, response status code and response headers
    def simular_emprestimo_financiamento_using_post_with_http_info(id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.simular_emprestimo_financiamento_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.simular_emprestimo_financiamento_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling GlobaltagcontaApi.simular_emprestimo_financiamento_using_post" if request.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/simular-emprestimos-financiamentos".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmprestimoPessoalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#simular_emprestimo_financiamento_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{conta_resource_transacoes}}}
    # {{{conta_resource_transacoes_notes}}}
    # @param id {{{conta_resource_transacoes_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageTransacaoResponse]
    def transacoes_using_get(id, opts = {})
      data, _status_code, _headers = transacoes_using_get_with_http_info(id, opts)
      return data
    end

    # {{{conta_resource_transacoes}}}
    # {{{conta_resource_transacoes_notes}}}
    # @param id {{{conta_resource_transacoes_param_id}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authorization Authorization
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageTransacaoResponse, Fixnum, Hash)>] PageTransacaoResponse data, response status code and response headers
    def transacoes_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.transacoes_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.transacoes_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/timeline".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Authorization'] = opts[:'authorization'] if opts[:'authorization']

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTransacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#transacoes_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{transferencia_resource_transferir}}}
    # {{{transferencia_resource_transferir_notes}}}
    # @param id {{{transferencia_resource_transferir_param_id_conta_origem}}}
    # @param id_conta_destino {{{transferencia_resource_transferir_param_id_conta_destino}}}
    # @param valor_transferencia {{{transferencia_resource_transferir_param_valor_transferencia}}}
    # @param [Hash] opts the optional parameters
    # @return [TransferenciaDetalheResponse]
    def transferir_using_post1(id, id_conta_destino, valor_transferencia, opts = {})
      data, _status_code, _headers = transferir_using_post1_with_http_info(id, id_conta_destino, valor_transferencia, opts)
      return data
    end

    # {{{transferencia_resource_transferir}}}
    # {{{transferencia_resource_transferir_notes}}}
    # @param id {{{transferencia_resource_transferir_param_id_conta_origem}}}
    # @param id_conta_destino {{{transferencia_resource_transferir_param_id_conta_destino}}}
    # @param valor_transferencia {{{transferencia_resource_transferir_param_valor_transferencia}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransferenciaDetalheResponse, Fixnum, Hash)>] TransferenciaDetalheResponse data, response status code and response headers
    def transferir_using_post1_with_http_info(id, id_conta_destino, valor_transferencia, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagcontaApi.transferir_using_post1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagcontaApi.transferir_using_post1" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_conta_destino' is set
      fail ArgumentError, "Missing the required parameter 'id_conta_destino' when calling GlobaltagcontaApi.transferir_using_post1" if id_conta_destino.nil?
      
      
      
      
      
      
      # verify the required parameter 'valor_transferencia' is set
      fail ArgumentError, "Missing the required parameter 'valor_transferencia' when calling GlobaltagcontaApi.transferir_using_post1" if valor_transferencia.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/transferencias-creditos-cartoes".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'id_conta_destino'] = id_conta_destino
      query_params[:'valor_transferencia'] = valor_transferencia

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransferenciaDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagcontaApi#transferir_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
