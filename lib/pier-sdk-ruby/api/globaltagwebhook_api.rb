=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class GlobaltagwebhookApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # {{{web_hook_resource_alterar}}}
    # {{{web_hook_resource_alterar_notes}}}
    # @param id {{{web_hook_resource_alterar_param_id}}}
    # @param webhook webhook
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status {{{web_hook_resource_alterar_param_status}}}
    # @return [WebHookResponse]
    def alterar_using_put24(id, webhook, opts = {})
      data, _status_code, _headers = alterar_using_put24_with_http_info(id, webhook, opts)
      return data
    end

    # {{{web_hook_resource_alterar}}}
    # {{{web_hook_resource_alterar_notes}}}
    # @param id {{{web_hook_resource_alterar_param_id}}}
    # @param webhook webhook
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status {{{web_hook_resource_alterar_param_status}}}
    # @return [Array<(WebHookResponse, Fixnum, Hash)>] WebHookResponse data, response status code and response headers
    def alterar_using_put24_with_http_info(id, webhook, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagwebhookApi.alterar_using_put24 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagwebhookApi.alterar_using_put24" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'webhook' is set
      fail ArgumentError, "Missing the required parameter 'webhook' when calling GlobaltagwebhookApi.alterar_using_put24" if webhook.nil?
      
      
      
      
      
      
      
      
      if opts[:'status'] && !['INATIVO', 'ATIVO'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of INATIVO, ATIVO'
      end
      
      
      
      
      # resource path
      local_var_path = "/api/webhooks/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = opts[:'status'] if opts[:'status']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(webhook)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebHookResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagwebhookApi#alterar_using_put24\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{web_hook_resource_consultar}}}
    # {{{web_hook_resource_consultar_notes}}}
    # @param id {{{web_hook_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [WebHookResponse]
    def consultar_using_get52(id, opts = {})
      data, _status_code, _headers = consultar_using_get52_with_http_info(id, opts)
      return data
    end

    # {{{web_hook_resource_consultar}}}
    # {{{web_hook_resource_consultar_notes}}}
    # @param id {{{web_hook_resource_consultar_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebHookResponse, Fixnum, Hash)>] WebHookResponse data, response status code and response headers
    def consultar_using_get52_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagwebhookApi.consultar_using_get52 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagwebhookApi.consultar_using_get52" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/webhooks/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebHookResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagwebhookApi#consultar_using_get52\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{web_hook_resource_listar}}}
    # {{{web_hook_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{web_hook_request_id_value}}}
    # @option opts [String] :tipo_evento {{{web_hook_request_tipo_evento_value}}}
    # @option opts [String] :metodo {{{web_hook_request_metodo_value}}}
    # @option opts [String] :url {{{web_hook_request_url_value}}}
    # @return [PageWebHookResponse]
    def listar_using_get66(opts = {})
      data, _status_code, _headers = listar_using_get66_with_http_info(opts)
      return data
    end

    # {{{web_hook_resource_listar}}}
    # {{{web_hook_resource_listar_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [Integer] :id {{{web_hook_request_id_value}}}
    # @option opts [String] :tipo_evento {{{web_hook_request_tipo_evento_value}}}
    # @option opts [String] :metodo {{{web_hook_request_metodo_value}}}
    # @option opts [String] :url {{{web_hook_request_url_value}}}
    # @return [Array<(PageWebHookResponse, Fixnum, Hash)>] PageWebHookResponse data, response status code and response headers
    def listar_using_get66_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagwebhookApi.listar_using_get66 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'tipo_evento'] && !['RISCO_FRAUDE', 'CODIGO_SEGURANCA', 'OUTROS'].include?(opts[:'tipo_evento'])
        fail ArgumentError, 'invalid value for "tipo_evento", must be one of RISCO_FRAUDE, CODIGO_SEGURANCA, OUTROS'
      end
      
      
      
      
      
      
      
      if opts[:'metodo'] && !['GET', 'POST', 'PUT', 'DELETE'].include?(opts[:'metodo'])
        fail ArgumentError, 'invalid value for "metodo", must be one of GET, POST, PUT, DELETE'
      end
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/webhooks".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'tipoEvento'] = opts[:'tipo_evento'] if opts[:'tipo_evento']
      query_params[:'metodo'] = opts[:'metodo'] if opts[:'metodo']
      query_params[:'url'] = opts[:'url'] if opts[:'url']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageWebHookResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagwebhookApi#listar_using_get66\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{web_hook_resource_salvar}}}
    # {{{web_hook_resource_salvar_notes}}}
    # @param webhook webhook
    # @param [Hash] opts the optional parameters
    # @return [WebHookResponse]
    def salvar_using_post35(webhook, opts = {})
      data, _status_code, _headers = salvar_using_post35_with_http_info(webhook, opts)
      return data
    end

    # {{{web_hook_resource_salvar}}}
    # {{{web_hook_resource_salvar_notes}}}
    # @param webhook webhook
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebHookResponse, Fixnum, Hash)>] WebHookResponse data, response status code and response headers
    def salvar_using_post35_with_http_info(webhook, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagwebhookApi.salvar_using_post35 ..."
      end
      
      
      # verify the required parameter 'webhook' is set
      fail ArgumentError, "Missing the required parameter 'webhook' when calling GlobaltagwebhookApi.salvar_using_post35" if webhook.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/webhooks".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(webhook)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebHookResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagwebhookApi#salvar_using_post35\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
