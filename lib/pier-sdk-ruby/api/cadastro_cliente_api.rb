=begin
PIER Labs

Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o

OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html

Terms of Service: http://pierlabs.io/terms/

=end

require "uri"

module Pier
  class CadastroClienteApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Altera Adicional de uma Conta
    # Este m\u00E9todo permite que seja alterado um portador Adicional de uma determinada Conta.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o da conta (id).
    # @param id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da pessoa (id).
    # @param adicional_update adicionalUpdate
    # @param [Hash] opts the optional parameters
    # @return [AdicionalDetalheResponse]
    def alterar_using_put(id, id_pessoa, adicional_update, opts = {})
      data, _status_code, _headers = alterar_using_put_with_http_info(id, id_pessoa, adicional_update, opts)
      return data
    end

    # Altera Adicional de uma Conta
    # Este m\u00E9todo permite que seja alterado um portador Adicional de uma determinada Conta.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o da conta (id).
    # @param id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da pessoa (id).
    # @param adicional_update adicionalUpdate
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdicionalDetalheResponse, Fixnum, Hash)>] AdicionalDetalheResponse data, response status code and response headers
    def alterar_using_put_with_http_info(id, id_pessoa, adicional_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.alterar_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.alterar_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_pessoa' is set
      fail ArgumentError, "Missing the required parameter 'id_pessoa' when calling CadastroClienteApi.alterar_using_put" if id_pessoa.nil?
      
      
      
      
      
      
      # verify the required parameter 'adicional_update' is set
      fail ArgumentError, "Missing the required parameter 'adicional_update' when calling CadastroClienteApi.alterar_using_put" if adicional_update.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/adicionais/{idPessoa}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'idPessoa' + '}', id_pessoa.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(adicional_update)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdicionalDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#alterar_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Atualiza os detalhes de uma determinada Pessoa
    # Este m\u00E9todo permite que seja alterado na base do emissor os detalhes de uma determinada Pessoa.
    # @param id ID da Pessoa
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nome_mae Apresenta o nome da m\u00E3e da pessoa fisica
    # @option opts [Integer] :id_estado_civil Id Estado civil da pessoa fisica
    # @option opts [String] :id_profissao Profiss\u00E3o da pessoa fisica
    # @option opts [Integer] :id_natureza_ocupacao Id Natureza Ocupa\u00E7\u00E3o da pessoa fisica
    # @option opts [Integer] :id_nacionalidade Id Nacionalidade da pessoa fisica
    # @option opts [Integer] :numero_banco N\u00FAmero do banco.
    # @option opts [Integer] :numero_agencia N\u00FAmero da ag\u00EAncia.
    # @option opts [String] :numero_conta_corrente N\u00FAmero da conta corrente.
    # @option opts [String] :email Email da pessoa fisica
    # @option opts [String] :nome_empresa Nome que deve ser impresso no cart\u00E3o
    # @return [PessoaDetalheResponse]
    def alterar_using_put13(id, opts = {})
      data, _status_code, _headers = alterar_using_put13_with_http_info(id, opts)
      return data
    end

    # Atualiza os detalhes de uma determinada Pessoa
    # Este m\u00E9todo permite que seja alterado na base do emissor os detalhes de uma determinada Pessoa.
    # @param id ID da Pessoa
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nome_mae Apresenta o nome da m\u00E3e da pessoa fisica
    # @option opts [Integer] :id_estado_civil Id Estado civil da pessoa fisica
    # @option opts [String] :id_profissao Profiss\u00E3o da pessoa fisica
    # @option opts [Integer] :id_natureza_ocupacao Id Natureza Ocupa\u00E7\u00E3o da pessoa fisica
    # @option opts [Integer] :id_nacionalidade Id Nacionalidade da pessoa fisica
    # @option opts [Integer] :numero_banco N\u00FAmero do banco.
    # @option opts [Integer] :numero_agencia N\u00FAmero da ag\u00EAncia.
    # @option opts [String] :numero_conta_corrente N\u00FAmero da conta corrente.
    # @option opts [String] :email Email da pessoa fisica
    # @option opts [String] :nome_empresa Nome que deve ser impresso no cart\u00E3o
    # @return [Array<(PessoaDetalheResponse, Fixnum, Hash)>] PessoaDetalheResponse data, response status code and response headers
    def alterar_using_put13_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.alterar_using_put13 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.alterar_using_put13" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas-detalhes/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'nomeMae'] = opts[:'nome_mae'] if opts[:'nome_mae']
      query_params[:'idEstadoCivil'] = opts[:'id_estado_civil'] if opts[:'id_estado_civil']
      query_params[:'idProfissao'] = opts[:'id_profissao'] if opts[:'id_profissao']
      query_params[:'idNaturezaOcupacao'] = opts[:'id_natureza_ocupacao'] if opts[:'id_natureza_ocupacao']
      query_params[:'idNacionalidade'] = opts[:'id_nacionalidade'] if opts[:'id_nacionalidade']
      query_params[:'numeroBanco'] = opts[:'numero_banco'] if opts[:'numero_banco']
      query_params[:'numeroAgencia'] = opts[:'numero_agencia'] if opts[:'numero_agencia']
      query_params[:'numeroContaCorrente'] = opts[:'numero_conta_corrente'] if opts[:'numero_conta_corrente']
      query_params[:'email'] = opts[:'email'] if opts[:'email']
      query_params[:'nomeEmpresa'] = opts[:'nome_empresa'] if opts[:'nome_empresa']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PessoaDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#alterar_using_put13\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Atualiza os dados de uma determinada Pessoa
    # Este m\u00E9todo permite que seja alterado na base do emissor um registro de determinada Pessoa.
    # @param id ID da Pessoa
    # @param nome Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00E3o Social (Nome Empresarial)&#39;.
    # @param tipo C\u00F3digo de identifica\u00E7\u00E3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00EDsica), (\&quot;PJ\&quot;: Pessoa Jur\u00EDdica).
    # @param data_nascimento Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cpf N\u00FAmero do CPF, quando PF.
    # @option opts [String] :cnpj N\u00FAmero do CNPJ, quando PJ.
    # @option opts [String] :sexo C\u00F3digo de identifica\u00E7\u00E3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00E3o Especificado).
    # @option opts [String] :numero_identidade N\u00FAmero da Identidade.
    # @option opts [String] :orgao_expedidor_identidade Org\u00E3o expedidor do Identidade.
    # @option opts [String] :unidade_federativa_identidade Sigla da Unidade Federativa de onde foi expedido a Identidade
    # @option opts [String] :data_emissao_identidade Data emiss\u00E3o da Identidade.
    # @return [PessoaResponse]
    def alterar_using_put14(id, nome, tipo, data_nascimento, opts = {})
      data, _status_code, _headers = alterar_using_put14_with_http_info(id, nome, tipo, data_nascimento, opts)
      return data
    end

    # Atualiza os dados de uma determinada Pessoa
    # Este m\u00E9todo permite que seja alterado na base do emissor um registro de determinada Pessoa.
    # @param id ID da Pessoa
    # @param nome Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00E3o Social (Nome Empresarial)&#39;.
    # @param tipo C\u00F3digo de identifica\u00E7\u00E3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00EDsica), (\&quot;PJ\&quot;: Pessoa Jur\u00EDdica).
    # @param data_nascimento Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cpf N\u00FAmero do CPF, quando PF.
    # @option opts [String] :cnpj N\u00FAmero do CNPJ, quando PJ.
    # @option opts [String] :sexo C\u00F3digo de identifica\u00E7\u00E3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00E3o Especificado).
    # @option opts [String] :numero_identidade N\u00FAmero da Identidade.
    # @option opts [String] :orgao_expedidor_identidade Org\u00E3o expedidor do Identidade.
    # @option opts [String] :unidade_federativa_identidade Sigla da Unidade Federativa de onde foi expedido a Identidade
    # @option opts [String] :data_emissao_identidade Data emiss\u00E3o da Identidade.
    # @return [Array<(PessoaResponse, Fixnum, Hash)>] PessoaResponse data, response status code and response headers
    def alterar_using_put14_with_http_info(id, nome, tipo, data_nascimento, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.alterar_using_put14 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.alterar_using_put14" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'nome' is set
      fail ArgumentError, "Missing the required parameter 'nome' when calling CadastroClienteApi.alterar_using_put14" if nome.nil?
      
      
      
      
      
      
      # verify the required parameter 'tipo' is set
      fail ArgumentError, "Missing the required parameter 'tipo' when calling CadastroClienteApi.alterar_using_put14" if tipo.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_nascimento' is set
      fail ArgumentError, "Missing the required parameter 'data_nascimento' when calling CadastroClienteApi.alterar_using_put14" if data_nascimento.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'nome'] = nome
      query_params[:'tipo'] = tipo
      query_params[:'dataNascimento'] = data_nascimento
      query_params[:'cpf'] = opts[:'cpf'] if opts[:'cpf']
      query_params[:'cnpj'] = opts[:'cnpj'] if opts[:'cnpj']
      query_params[:'sexo'] = opts[:'sexo'] if opts[:'sexo']
      query_params[:'numeroIdentidade'] = opts[:'numero_identidade'] if opts[:'numero_identidade']
      query_params[:'orgaoExpedidorIdentidade'] = opts[:'orgao_expedidor_identidade'] if opts[:'orgao_expedidor_identidade']
      query_params[:'unidadeFederativaIdentidade'] = opts[:'unidade_federativa_identidade'] if opts[:'unidade_federativa_identidade']
      query_params[:'dataEmissaoIdentidade'] = opts[:'data_emissao_identidade'] if opts[:'data_emissao_identidade']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PessoaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#alterar_using_put14\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza a altera\u00E7\u00E3o de um determinado Telefone
    # Este m\u00E9todo permite que seja alterado um determinado Telefone na base de dados do Emissor.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Telefone (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_tipo_telefone C\u00F3digo de Identifica\u00E7\u00E3o do Tipo do Telefone (id).
    # @option opts [String] :ddd C\u00F3digo DDD do telefone (id).
    # @option opts [String] :telefone N\u00FAmero do telefone.
    # @option opts [String] :ramal N\u00FAmero do ramal.
    # @return [TelefoneResponse]
    def alterar_using_put16(id, opts = {})
      data, _status_code, _headers = alterar_using_put16_with_http_info(id, opts)
      return data
    end

    # Realiza a altera\u00E7\u00E3o de um determinado Telefone
    # Este m\u00E9todo permite que seja alterado um determinado Telefone na base de dados do Emissor.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Telefone (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_tipo_telefone C\u00F3digo de Identifica\u00E7\u00E3o do Tipo do Telefone (id).
    # @option opts [String] :ddd C\u00F3digo DDD do telefone (id).
    # @option opts [String] :telefone N\u00FAmero do telefone.
    # @option opts [String] :ramal N\u00FAmero do ramal.
    # @return [Array<(TelefoneResponse, Fixnum, Hash)>] TelefoneResponse data, response status code and response headers
    def alterar_using_put16_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.alterar_using_put16 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.alterar_using_put16" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/telefones".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'idTipoTelefone'] = opts[:'id_tipo_telefone'] if opts[:'id_tipo_telefone']
      query_params[:'ddd'] = opts[:'ddd'] if opts[:'ddd']
      query_params[:'telefone'] = opts[:'telefone'] if opts[:'telefone']
      query_params[:'ramal'] = opts[:'ramal'] if opts[:'ramal']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TelefoneResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#alterar_using_put16\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Atualiza os dados de um determinado Endere\u00E7o
    # Este m\u00E9todo permite que seja alterado na base do emissor um ou mais registros ligados a um determinado Endere\u00E7o.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa a qual o endere\u00E7o pertence (id)
    # @option opts [Integer] :id_tipo_endereco C\u00F3digo de Identifica\u00E7\u00E3o da Tipo Endere\u00E7o (id)
    # @option opts [String] :cep Apresenta o C\u00F3digo de Endere\u00E7amento Postal (CEP) no formaro &#39;58800000&#39;
    # @option opts [String] :logradouro Apresenta o nome do Logradouro
    # @option opts [Integer] :numero Apresenta o n\u00FAmero do endere\u00E7o
    # @option opts [String] :complemento Apresenta descri\u00E7oes complementares referente ao endere\u00E7o
    # @option opts [String] :ponto_referencia Apresenta a descri\u00E7\u00E3o de ponto de refer\u00EAncia do endere\u00E7o
    # @option opts [String] :bairro Apresenta nome do bairro
    # @option opts [String] :cidade Apresenta nome da cidade
    # @option opts [String] :uf Apresenta sigla da Unidade Federativa
    # @option opts [String] :pais Apresenta nome do Pais
    # @return [EnderecoResponse]
    def alterar_using_put5(id, opts = {})
      data, _status_code, _headers = alterar_using_put5_with_http_info(id, opts)
      return data
    end

    # Atualiza os dados de um determinado Endere\u00E7o
    # Este m\u00E9todo permite que seja alterado na base do emissor um ou mais registros ligados a um determinado Endere\u00E7o.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa a qual o endere\u00E7o pertence (id)
    # @option opts [Integer] :id_tipo_endereco C\u00F3digo de Identifica\u00E7\u00E3o da Tipo Endere\u00E7o (id)
    # @option opts [String] :cep Apresenta o C\u00F3digo de Endere\u00E7amento Postal (CEP) no formaro &#39;58800000&#39;
    # @option opts [String] :logradouro Apresenta o nome do Logradouro
    # @option opts [Integer] :numero Apresenta o n\u00FAmero do endere\u00E7o
    # @option opts [String] :complemento Apresenta descri\u00E7oes complementares referente ao endere\u00E7o
    # @option opts [String] :ponto_referencia Apresenta a descri\u00E7\u00E3o de ponto de refer\u00EAncia do endere\u00E7o
    # @option opts [String] :bairro Apresenta nome do bairro
    # @option opts [String] :cidade Apresenta nome da cidade
    # @option opts [String] :uf Apresenta sigla da Unidade Federativa
    # @option opts [String] :pais Apresenta nome do Pais
    # @return [Array<(EnderecoResponse, Fixnum, Hash)>] EnderecoResponse data, response status code and response headers
    def alterar_using_put5_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.alterar_using_put5 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.alterar_using_put5" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/enderecos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'idPessoa'] = opts[:'id_pessoa'] if opts[:'id_pessoa']
      query_params[:'idTipoEndereco'] = opts[:'id_tipo_endereco'] if opts[:'id_tipo_endereco']
      query_params[:'cep'] = opts[:'cep'] if opts[:'cep']
      query_params[:'logradouro'] = opts[:'logradouro'] if opts[:'logradouro']
      query_params[:'numero'] = opts[:'numero'] if opts[:'numero']
      query_params[:'complemento'] = opts[:'complemento'] if opts[:'complemento']
      query_params[:'pontoReferencia'] = opts[:'ponto_referencia'] if opts[:'ponto_referencia']
      query_params[:'bairro'] = opts[:'bairro'] if opts[:'bairro']
      query_params[:'cidade'] = opts[:'cidade'] if opts[:'cidade']
      query_params[:'uf'] = opts[:'uf'] if opts[:'uf']
      query_params[:'pais'] = opts[:'pais'] if opts[:'pais']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnderecoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#alterar_using_put5\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Permite atribuir um documento para uma Conta
    # Este m\u00E9todo permite que seja atribu\u00EDdo a uma determinada Conta um documento que esteja armazenado no PIER Cloud, informando qual o tipo do documento e o seu respectivo id.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o da Conta
    # @param body C\u00F3digo de Identifica\u00E7\u00E3o do Arquivo
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def atribuir_assinatura_cliente_using_post(id, body, opts = {})
      data, _status_code, _headers = atribuir_assinatura_cliente_using_post_with_http_info(id, body, opts)
      return data
    end

    # Permite atribuir um documento para uma Conta
    # Este m\u00E9todo permite que seja atribu\u00EDdo a uma determinada Conta um documento que esteja armazenado no PIER Cloud, informando qual o tipo do documento e o seu respectivo id.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o da Conta
    # @param body C\u00F3digo de Identifica\u00E7\u00E3o do Arquivo
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def atribuir_assinatura_cliente_using_post_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.atribuir_assinatura_cliente_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.atribuir_assinatura_cliente_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling CadastroClienteApi.atribuir_assinatura_cliente_using_post" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/atribuir-assinatura-cliente".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#atribuir_assinatura_cliente_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Atualiza conta integrada com o emissor
    # Este recurso permite a atualiza\u00E7\u00E3o de uma conta integrada com o emissor.
    # @param id C\u00F3digo de identifica\u00E7\u00E3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [IntegracaoEmissorPersist] :body Descri\u00E7\u00E3o do canal de entrada
    # @return [IntegracaoEmissorResponse]
    def atualizar_using_post(id, opts = {})
      data, _status_code, _headers = atualizar_using_post_with_http_info(id, opts)
      return data
    end

    # Atualiza conta integrada com o emissor
    # Este recurso permite a atualiza\u00E7\u00E3o de uma conta integrada com o emissor.
    # @param id C\u00F3digo de identifica\u00E7\u00E3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [IntegracaoEmissorPersist] :body Descri\u00E7\u00E3o do canal de entrada
    # @return [Array<(IntegracaoEmissorResponse, Fixnum, Hash)>] IntegracaoEmissorResponse data, response status code and response headers
    def atualizar_using_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.atualizar_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.atualizar_using_post" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/atualizar-registro-integracao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IntegracaoEmissorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#atualizar_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza o cadastro de Adicionais para uma Conta
    # Este m\u00E9todo permite que sejam cadastrados um portador Adicional para uma determinada Conta.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o da conta (id).
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [AdicionalDetalheResponse]
    def cadastrar_using_post(id, persist, opts = {})
      data, _status_code, _headers = cadastrar_using_post_with_http_info(id, persist, opts)
      return data
    end

    # Realiza o cadastro de Adicionais para uma Conta
    # Este m\u00E9todo permite que sejam cadastrados um portador Adicional para uma determinada Conta.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o da conta (id).
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdicionalDetalheResponse, Fixnum, Hash)>] AdicionalDetalheResponse data, response status code and response headers
    def cadastrar_using_post_with_http_info(id, persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.cadastrar_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.cadastrar_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'persist' is set
      fail ArgumentError, "Missing the required parameter 'persist' when calling CadastroClienteApi.cadastrar_using_post" if persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/cadastrar-adicional".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdicionalDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#cadastrar_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consulta Adicional de uma Conta
    # Este m\u00E9todo permite que seja consultado um portador Adicional de uma determinada Conta.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o da conta (id).
    # @param id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da pessoa (id).
    # @param [Hash] opts the optional parameters
    # @return [AdicionalDetalheResponse]
    def consultar_using_get1(id, id_pessoa, opts = {})
      data, _status_code, _headers = consultar_using_get1_with_http_info(id, id_pessoa, opts)
      return data
    end

    # Consulta Adicional de uma Conta
    # Este m\u00E9todo permite que seja consultado um portador Adicional de uma determinada Conta.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o da conta (id).
    # @param id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da pessoa (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdicionalDetalheResponse, Fixnum, Hash)>] AdicionalDetalheResponse data, response status code and response headers
    def consultar_using_get1_with_http_info(id, id_pessoa, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.consultar_using_get1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.consultar_using_get1" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_pessoa' is set
      fail ArgumentError, "Missing the required parameter 'id_pessoa' when calling CadastroClienteApi.consultar_using_get1" if id_pessoa.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/adicionais/{idPessoa}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'idPessoa' + '}', id_pessoa.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdicionalDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#consultar_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apresenta os dados de um determinado Endere\u00E7o
    # Este m\u00E9todo permite consultar um determinado Endere\u00E7o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Endere\u00E7o (id).
    # @param [Hash] opts the optional parameters
    # @return [EnderecoResponse]
    def consultar_using_get16(id, opts = {})
      data, _status_code, _headers = consultar_using_get16_with_http_info(id, opts)
      return data
    end

    # Apresenta os dados de um determinado Endere\u00E7o
    # Este m\u00E9todo permite consultar um determinado Endere\u00E7o a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Endere\u00E7o (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnderecoResponse, Fixnum, Hash)>] EnderecoResponse data, response status code and response headers
    def consultar_using_get16_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.consultar_using_get16 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.consultar_using_get16" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/enderecos/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnderecoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#consultar_using_get16\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apresenta os detalhes de uma determinada Pessoa
    # Este m\u00E9todo permite a consulta dos detalhes de uma Pessoa existentes na base de dados do Emissor.
    # @param id ID da Pessoa
    # @param [Hash] opts the optional parameters
    # @return [PessoaDetalheResponse]
    def consultar_using_get24(id, opts = {})
      data, _status_code, _headers = consultar_using_get24_with_http_info(id, opts)
      return data
    end

    # Apresenta os detalhes de uma determinada Pessoa
    # Este m\u00E9todo permite a consulta dos detalhes de uma Pessoa existentes na base de dados do Emissor.
    # @param id ID da Pessoa
    # @param [Hash] opts the optional parameters
    # @return [Array<(PessoaDetalheResponse, Fixnum, Hash)>] PessoaDetalheResponse data, response status code and response headers
    def consultar_using_get24_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.consultar_using_get24 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.consultar_using_get24" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas-detalhes/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PessoaDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#consultar_using_get24\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apresenta os dados de uma determinada Pessoa
    # Este m\u00E9todo permite que sejam listadas as Pessoas existentes na base de dados do Emissor.
    # @param id ID da Pessoa
    # @param [Hash] opts the optional parameters
    # @return [PessoaResponse]
    def consultar_using_get25(id, opts = {})
      data, _status_code, _headers = consultar_using_get25_with_http_info(id, opts)
      return data
    end

    # Apresenta os dados de uma determinada Pessoa
    # Este m\u00E9todo permite que sejam listadas as Pessoas existentes na base de dados do Emissor.
    # @param id ID da Pessoa
    # @param [Hash] opts the optional parameters
    # @return [Array<(PessoaResponse, Fixnum, Hash)>] PessoaResponse data, response status code and response headers
    def consultar_using_get25_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.consultar_using_get25 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.consultar_using_get25" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PessoaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#consultar_using_get25\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apresenta os dados de um determinado Telefone
    # Este m\u00E9todo permite consultar um determinado Telefone a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Telefone (id).
    # @param [Hash] opts the optional parameters
    # @return [TelefoneResponse]
    def consultar_using_get31(id, opts = {})
      data, _status_code, _headers = consultar_using_get31_with_http_info(id, opts)
      return data
    end

    # Apresenta os dados de um determinado Telefone
    # Este m\u00E9todo permite consultar um determinado Telefone a partir do seu c\u00F3digo de identifica\u00E7\u00E3o (id).
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o do Telefone (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(TelefoneResponse, Fixnum, Hash)>] TelefoneResponse data, response status code and response headers
    def consultar_using_get31_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.consultar_using_get31 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.consultar_using_get31" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/telefones/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TelefoneResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#consultar_using_get31\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inativa Adicional de uma Conta
    # Este m\u00E9todo permite que seja inativado um portador Adicional de uma determinada Conta.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o da conta (id).
    # @param id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da pessoa (id).
    # @param [Hash] opts the optional parameters
    # @return [String]
    def inativar_using_post(id, id_pessoa, opts = {})
      data, _status_code, _headers = inativar_using_post_with_http_info(id, id_pessoa, opts)
      return data
    end

    # Inativa Adicional de uma Conta
    # Este m\u00E9todo permite que seja inativado um portador Adicional de uma determinada Conta.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o da conta (id).
    # @param id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da pessoa (id).
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def inativar_using_post_with_http_info(id, id_pessoa, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.inativar_using_post ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.inativar_using_post" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'id_pessoa' is set
      fail ArgumentError, "Missing the required parameter 'id_pessoa' when calling CadastroClienteApi.inativar_using_post" if id_pessoa.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/adicionais/{idPessoa}/inativar".sub('{format}','json').sub('{' + 'id' + '}', id.to_s).sub('{' + 'idPessoa' + '}', id_pessoa.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#inativar_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar s\u00F3cios de uma pessoa jur\u00EDdica
    # Lista os s\u00F3cios vinculados \u00E0 uma Pessoa Jur\u00EDdica cadastrada.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa Jur\u00EDdica
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @return [PagePessoaResponse]
    def listar_socios_using_get(id, opts = {})
      data, _status_code, _headers = listar_socios_using_get_with_http_info(id, opts)
      return data
    end

    # Listar s\u00F3cios de uma pessoa jur\u00EDdica
    # Lista os s\u00F3cios vinculados \u00E0 uma Pessoa Jur\u00EDdica cadastrada.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa Jur\u00EDdica
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @return [Array<(PagePessoaResponse, Fixnum, Hash)>] PagePessoaResponse data, response status code and response headers
    def listar_socios_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.listar_socios_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.listar_socios_using_get" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/clientes-pessoas-juridicas/{id}/socios".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePessoaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#listar_socios_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista os Adicionais de uma Conta
    # Este m\u00E9todo permite que sejam listados portadores Adicionais de uma determinada Conta.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @return [AdicionalResponse]
    def listar_using_get1(id, opts = {})
      data, _status_code, _headers = listar_using_get1_with_http_info(id, opts)
      return data
    end

    # Lista os Adicionais de uma Conta
    # Este m\u00E9todo permite que sejam listados portadores Adicionais de uma determinada Conta.
    # @param id C\u00F3digo de Identifica\u00E7\u00E3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @return [Array<(AdicionalResponse, Fixnum, Hash)>] AdicionalResponse data, response status code and response headers
    def listar_using_get1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.listar_using_get1 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.listar_using_get1" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/adicionais".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AdicionalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#listar_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista os Endere\u00E7os cadastrados para o Emissor
    # Este m\u00E9todo permite que sejam listados os Endere\u00E7os existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @option opts [Integer] :id C\u00F3digo de Identifica\u00E7\u00E3o do Endere\u00E7o (id).
    # @option opts [Integer] :id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa a qual o endere\u00E7o pertence (id)
    # @option opts [Integer] :id_tipo_endereco C\u00F3digo de Identifica\u00E7\u00E3o da Tipo Endere\u00E7o (id)
    # @option opts [String] :cep Apresenta o C\u00F3digo de Endere\u00E7amento Postal (CEP)
    # @option opts [String] :logradouro Apresenta o nome do Logradouro
    # @option opts [Integer] :numero Apresenta o n\u00FAmero do endere\u00E7o
    # @option opts [String] :complemento Apresenta descri\u00E7oes complementares referente ao endere\u00E7o
    # @option opts [String] :ponto_referencia Apresenta a descri\u00E7\u00E3o de ponto de refer\u00EAncia do endere\u00E7o
    # @option opts [String] :bairro Apresenta nome do bairro
    # @option opts [String] :cidade Apresenta nome da cidade
    # @option opts [String] :uf Apresenta sigla da Unidade Federativa
    # @option opts [String] :pais Apresenta nome do Pais
    # @option opts [String] :data_inclusao Apresenta a data em que fora cadastrado o Endere\u00E7o
    # @option opts [String] :data_ultima_atualizacao Data em que fora realizada a \u00FAltima mudan\u00E7a neste registro de endere\u00E7o. Quando n\u00E3o tiver ocorrido mudan\u00E7a, conter\u00E1 a mesma informa\u00E7\u00E3o que o campo dataInclusao
    # @return [PageEnderecoResponse]
    def listar_using_get21(opts = {})
      data, _status_code, _headers = listar_using_get21_with_http_info(opts)
      return data
    end

    # Lista os Endere\u00E7os cadastrados para o Emissor
    # Este m\u00E9todo permite que sejam listados os Endere\u00E7os existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @option opts [Integer] :id C\u00F3digo de Identifica\u00E7\u00E3o do Endere\u00E7o (id).
    # @option opts [Integer] :id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa a qual o endere\u00E7o pertence (id)
    # @option opts [Integer] :id_tipo_endereco C\u00F3digo de Identifica\u00E7\u00E3o da Tipo Endere\u00E7o (id)
    # @option opts [String] :cep Apresenta o C\u00F3digo de Endere\u00E7amento Postal (CEP)
    # @option opts [String] :logradouro Apresenta o nome do Logradouro
    # @option opts [Integer] :numero Apresenta o n\u00FAmero do endere\u00E7o
    # @option opts [String] :complemento Apresenta descri\u00E7oes complementares referente ao endere\u00E7o
    # @option opts [String] :ponto_referencia Apresenta a descri\u00E7\u00E3o de ponto de refer\u00EAncia do endere\u00E7o
    # @option opts [String] :bairro Apresenta nome do bairro
    # @option opts [String] :cidade Apresenta nome da cidade
    # @option opts [String] :uf Apresenta sigla da Unidade Federativa
    # @option opts [String] :pais Apresenta nome do Pais
    # @option opts [String] :data_inclusao Apresenta a data em que fora cadastrado o Endere\u00E7o
    # @option opts [String] :data_ultima_atualizacao Data em que fora realizada a \u00FAltima mudan\u00E7a neste registro de endere\u00E7o. Quando n\u00E3o tiver ocorrido mudan\u00E7a, conter\u00E1 a mesma informa\u00E7\u00E3o que o campo dataInclusao
    # @return [Array<(PageEnderecoResponse, Fixnum, Hash)>] PageEnderecoResponse data, response status code and response headers
    def listar_using_get21_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.listar_using_get21 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/enderecos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'idPessoa'] = opts[:'id_pessoa'] if opts[:'id_pessoa']
      query_params[:'idTipoEndereco'] = opts[:'id_tipo_endereco'] if opts[:'id_tipo_endereco']
      query_params[:'cep'] = opts[:'cep'] if opts[:'cep']
      query_params[:'logradouro'] = opts[:'logradouro'] if opts[:'logradouro']
      query_params[:'numero'] = opts[:'numero'] if opts[:'numero']
      query_params[:'complemento'] = opts[:'complemento'] if opts[:'complemento']
      query_params[:'pontoReferencia'] = opts[:'ponto_referencia'] if opts[:'ponto_referencia']
      query_params[:'bairro'] = opts[:'bairro'] if opts[:'bairro']
      query_params[:'cidade'] = opts[:'cidade'] if opts[:'cidade']
      query_params[:'uf'] = opts[:'uf'] if opts[:'uf']
      query_params[:'pais'] = opts[:'pais'] if opts[:'pais']
      query_params[:'dataInclusao'] = opts[:'data_inclusao'] if opts[:'data_inclusao']
      query_params[:'dataUltimaAtualizacao'] = opts[:'data_ultima_atualizacao'] if opts[:'data_ultima_atualizacao']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageEnderecoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#listar_using_get21\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista os Detalhes das Pessoas cadastradas no Emissor
    # Este m\u00E9todo permite que sejam listadas od detalhes das Pessoas existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_pessoa C\u00F3digo identificador da pessoa
    # @option opts [String] :nome_mae Apresenta o nome da m\u00E3e da pessoa fisica
    # @option opts [Integer] :id_estado_civil Id Estado civil da pessoa fisica
    # @option opts [String] :id_profissao Profiss\u00E3o da pessoa fisica
    # @option opts [Integer] :id_natureza_ocupacao Id Natureza Ocupa\u00E7\u00E3o da pessoa fisica
    # @option opts [Integer] :id_nacionalidade Id Nacionalidade da pessoa fisica
    # @option opts [Integer] :numero_banco N\u00FAmero do Banco.
    # @option opts [Integer] :numero_agencia N\u00FAmero da ag\u00EAncia.
    # @option opts [String] :numero_conta_corrente N\u00FAmero da conta corrente.
    # @option opts [String] :email Email da pessoa fisica
    # @option opts [String] :nome_empresa Nome que deve ser impresso no cart\u00E3o
    # @return [PagePessoaDetalheResponse]
    def listar_using_get31(opts = {})
      data, _status_code, _headers = listar_using_get31_with_http_info(opts)
      return data
    end

    # Lista os Detalhes das Pessoas cadastradas no Emissor
    # Este m\u00E9todo permite que sejam listadas od detalhes das Pessoas existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @option opts [Integer] :id_pessoa C\u00F3digo identificador da pessoa
    # @option opts [String] :nome_mae Apresenta o nome da m\u00E3e da pessoa fisica
    # @option opts [Integer] :id_estado_civil Id Estado civil da pessoa fisica
    # @option opts [String] :id_profissao Profiss\u00E3o da pessoa fisica
    # @option opts [Integer] :id_natureza_ocupacao Id Natureza Ocupa\u00E7\u00E3o da pessoa fisica
    # @option opts [Integer] :id_nacionalidade Id Nacionalidade da pessoa fisica
    # @option opts [Integer] :numero_banco N\u00FAmero do Banco.
    # @option opts [Integer] :numero_agencia N\u00FAmero da ag\u00EAncia.
    # @option opts [String] :numero_conta_corrente N\u00FAmero da conta corrente.
    # @option opts [String] :email Email da pessoa fisica
    # @option opts [String] :nome_empresa Nome que deve ser impresso no cart\u00E3o
    # @return [Array<(PagePessoaDetalheResponse, Fixnum, Hash)>] PagePessoaDetalheResponse data, response status code and response headers
    def listar_using_get31_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.listar_using_get31 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas-detalhes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'idPessoa'] = opts[:'id_pessoa'] if opts[:'id_pessoa']
      query_params[:'nomeMae'] = opts[:'nome_mae'] if opts[:'nome_mae']
      query_params[:'idEstadoCivil'] = opts[:'id_estado_civil'] if opts[:'id_estado_civil']
      query_params[:'idProfissao'] = opts[:'id_profissao'] if opts[:'id_profissao']
      query_params[:'idNaturezaOcupacao'] = opts[:'id_natureza_ocupacao'] if opts[:'id_natureza_ocupacao']
      query_params[:'idNacionalidade'] = opts[:'id_nacionalidade'] if opts[:'id_nacionalidade']
      query_params[:'numeroBanco'] = opts[:'numero_banco'] if opts[:'numero_banco']
      query_params[:'numeroAgencia'] = opts[:'numero_agencia'] if opts[:'numero_agencia']
      query_params[:'numeroContaCorrente'] = opts[:'numero_conta_corrente'] if opts[:'numero_conta_corrente']
      query_params[:'email'] = opts[:'email'] if opts[:'email']
      query_params[:'nomeEmpresa'] = opts[:'nome_empresa'] if opts[:'nome_empresa']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePessoaDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#listar_using_get31\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista as Pessoas cadastradas no Emissor
    # Este m\u00E9todo permite que sejam listadas as Pessoas existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @option opts [Integer] :id C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa (id).
    # @option opts [String] :nome Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00E3o Social (Nome Empresarial)&#39;.
    # @option opts [String] :tipo C\u00F3digo de identifica\u00E7\u00E3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00EDsica), (\&quot;PJ\&quot;: Pessoa Jur\u00EDdica).
    # @option opts [String] :cpf N\u00FAmero do CPF, quando PF.
    # @option opts [String] :cnpj N\u00FAmero do CNPJ, quando PJ.
    # @option opts [String] :data_nascimento Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ.
    # @option opts [String] :sexo C\u00F3digo de identifica\u00E7\u00E3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00E3o Especificado).
    # @option opts [String] :numero_identidade N\u00FAmero da Identidade
    # @option opts [String] :orgao_expedidor_identidade Org\u00E3o expedidor do RG.
    # @option opts [String] :unidade_federativa_identidade Sigla da Unidade Federativa de onde foi expedido a Identidade
    # @option opts [String] :data_emissao_identidade Data emiss\u00E3o da identidade no formato aaaa-MM-dd
    # @return [PagePessoaResponse]
    def listar_using_get32(opts = {})
      data, _status_code, _headers = listar_using_get32_with_http_info(opts)
      return data
    end

    # Lista as Pessoas cadastradas no Emissor
    # Este m\u00E9todo permite que sejam listadas as Pessoas existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @option opts [Integer] :id C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa (id).
    # @option opts [String] :nome Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00E3o Social (Nome Empresarial)&#39;.
    # @option opts [String] :tipo C\u00F3digo de identifica\u00E7\u00E3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00EDsica), (\&quot;PJ\&quot;: Pessoa Jur\u00EDdica).
    # @option opts [String] :cpf N\u00FAmero do CPF, quando PF.
    # @option opts [String] :cnpj N\u00FAmero do CNPJ, quando PJ.
    # @option opts [String] :data_nascimento Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ.
    # @option opts [String] :sexo C\u00F3digo de identifica\u00E7\u00E3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00E3o Especificado).
    # @option opts [String] :numero_identidade N\u00FAmero da Identidade
    # @option opts [String] :orgao_expedidor_identidade Org\u00E3o expedidor do RG.
    # @option opts [String] :unidade_federativa_identidade Sigla da Unidade Federativa de onde foi expedido a Identidade
    # @option opts [String] :data_emissao_identidade Data emiss\u00E3o da identidade no formato aaaa-MM-dd
    # @return [Array<(PagePessoaResponse, Fixnum, Hash)>] PagePessoaResponse data, response status code and response headers
    def listar_using_get32_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.listar_using_get32 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'nome'] = opts[:'nome'] if opts[:'nome']
      query_params[:'tipo'] = opts[:'tipo'] if opts[:'tipo']
      query_params[:'cpf'] = opts[:'cpf'] if opts[:'cpf']
      query_params[:'cnpj'] = opts[:'cnpj'] if opts[:'cnpj']
      query_params[:'dataNascimento'] = opts[:'data_nascimento'] if opts[:'data_nascimento']
      query_params[:'sexo'] = opts[:'sexo'] if opts[:'sexo']
      query_params[:'numeroIdentidade'] = opts[:'numero_identidade'] if opts[:'numero_identidade']
      query_params[:'orgaoExpedidorIdentidade'] = opts[:'orgao_expedidor_identidade'] if opts[:'orgao_expedidor_identidade']
      query_params[:'unidadeFederativaIdentidade'] = opts[:'unidade_federativa_identidade'] if opts[:'unidade_federativa_identidade']
      query_params[:'dataEmissaoIdentidade'] = opts[:'data_emissao_identidade'] if opts[:'data_emissao_identidade']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePessoaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#listar_using_get32\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lista os Telefones cadastrados no Emissor
    # Este m\u00E9todo permite que sejam listados os Telefones existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @option opts [Integer] :id C\u00F3digo de Identifica\u00E7\u00E3o do Telefone (id).
    # @option opts [Integer] :id_tipo_telefone C\u00F3digo de Identifica\u00E7\u00E3o do Tipo do Telefone (id).
    # @option opts [Integer] :id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa (id) a qual o telefone pertence.
    # @option opts [String] :ddd C\u00F3digo DDD do telefone (id).
    # @option opts [String] :telefone N\u00FAmero do telefone.
    # @option opts [String] :ramal N\u00FAmero do ramal.
    # @option opts [Integer] :status Apresenta o Status do Telefone, onde: &#39;0&#39;: Inativo e &#39;1&#39;: Ativo
    # @return [PageTelefoneResponse]
    def listar_using_get41(opts = {})
      data, _status_code, _headers = listar_using_get41_with_http_info(opts)
      return data
    end

    # Lista os Telefones cadastrados no Emissor
    # Este m\u00E9todo permite que sejam listados os Telefones existentes na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort Tipo de ordena\u00E7\u00E3o dos registros.
    # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
    # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
    # @option opts [Integer] :id C\u00F3digo de Identifica\u00E7\u00E3o do Telefone (id).
    # @option opts [Integer] :id_tipo_telefone C\u00F3digo de Identifica\u00E7\u00E3o do Tipo do Telefone (id).
    # @option opts [Integer] :id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa (id) a qual o telefone pertence.
    # @option opts [String] :ddd C\u00F3digo DDD do telefone (id).
    # @option opts [String] :telefone N\u00FAmero do telefone.
    # @option opts [String] :ramal N\u00FAmero do ramal.
    # @option opts [Integer] :status Apresenta o Status do Telefone, onde: &#39;0&#39;: Inativo e &#39;1&#39;: Ativo
    # @return [Array<(PageTelefoneResponse, Fixnum, Hash)>] PageTelefoneResponse data, response status code and response headers
    def listar_using_get41_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.listar_using_get41 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/telefones".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'id'] = opts[:'id'] if opts[:'id']
      query_params[:'idTipoTelefone'] = opts[:'id_tipo_telefone'] if opts[:'id_tipo_telefone']
      query_params[:'idPessoa'] = opts[:'id_pessoa'] if opts[:'id_pessoa']
      query_params[:'ddd'] = opts[:'ddd'] if opts[:'ddd']
      query_params[:'telefone'] = opts[:'telefone'] if opts[:'telefone']
      query_params[:'ramal'] = opts[:'ramal'] if opts[:'ramal']
      query_params[:'status'] = opts[:'status'] if opts[:'status']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTelefoneResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#listar_using_get41\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cadastro de Conta e Pessoa Fisica
    # Permite realizar o cadastro de uma Conta para um cliente do tipo Pessoa F\u00EDsica, recebendo nesta opera\u00E7\u00E3o todos os dados cadastrais que se fazem necess\u00E1rios para isso. Uma vez criado, poder\u00E1 ser acionado o m\u00E9todo de 'Gera\u00E7\u00E3o de Cart\u00E3o' para o cliente e seus adicionais.
    # @param pessoa_persist pessoaPersist
    # @param [Hash] opts the optional parameters
    # @return [PessoaFisicaAprovadaResponse]
    def salvar_pessoa_fisica_aprovada_using_post(pessoa_persist, opts = {})
      data, _status_code, _headers = salvar_pessoa_fisica_aprovada_using_post_with_http_info(pessoa_persist, opts)
      return data
    end

    # Cadastro de Conta e Pessoa Fisica
    # Permite realizar o cadastro de uma Conta para um cliente do tipo Pessoa F\u00EDsica, recebendo nesta opera\u00E7\u00E3o todos os dados cadastrais que se fazem necess\u00E1rios para isso. Uma vez criado, poder\u00E1 ser acionado o m\u00E9todo de &#39;Gera\u00E7\u00E3o de Cart\u00E3o&#39; para o cliente e seus adicionais.
    # @param pessoa_persist pessoaPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(PessoaFisicaAprovadaResponse, Fixnum, Hash)>] PessoaFisicaAprovadaResponse data, response status code and response headers
    def salvar_pessoa_fisica_aprovada_using_post_with_http_info(pessoa_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.salvar_pessoa_fisica_aprovada_using_post ..."
      end
      
      
      # verify the required parameter 'pessoa_persist' is set
      fail ArgumentError, "Missing the required parameter 'pessoa_persist' when calling CadastroClienteApi.salvar_pessoa_fisica_aprovada_using_post" if pessoa_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/clientes-pessoas-fisicas".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pessoa_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PessoaFisicaAprovadaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#salvar_pessoa_fisica_aprovada_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cadastro de Conta e Pessoa Jur\u00EDdica
    # Cadastro de Conta e Pessoa Jur\u00EDdica Permite realizar o cadastro de uma Conta para um cliente do tipo Pessoa Jur\u00EDdica, recebendo nesta opera\u00E7\u00E3o todos os dados cadastrais que se fazem necess\u00E1rios para isso, inclu\u00EDndo o registro de cada um dos s\u00F3cios. Uma vez criado, poder\u00E1 ser acionado o m\u00E9todo de 'Gera\u00E7\u00E3o de Cart\u00E3o' para o cliente e cada um dos s\u00F3cios vinculados.
    # @param pessoa_persist pessoaPersist
    # @param [Hash] opts the optional parameters
    # @return [PessoaJuridicaAprovadaResponse]
    def salvar_pessoa_juridica_aprovada_using_post(pessoa_persist, opts = {})
      data, _status_code, _headers = salvar_pessoa_juridica_aprovada_using_post_with_http_info(pessoa_persist, opts)
      return data
    end

    # Cadastro de Conta e Pessoa Jur\u00EDdica
    # Cadastro de Conta e Pessoa Jur\u00EDdica Permite realizar o cadastro de uma Conta para um cliente do tipo Pessoa Jur\u00EDdica, recebendo nesta opera\u00E7\u00E3o todos os dados cadastrais que se fazem necess\u00E1rios para isso, inclu\u00EDndo o registro de cada um dos s\u00F3cios. Uma vez criado, poder\u00E1 ser acionado o m\u00E9todo de &#39;Gera\u00E7\u00E3o de Cart\u00E3o&#39; para o cliente e cada um dos s\u00F3cios vinculados.
    # @param pessoa_persist pessoaPersist
    # @param [Hash] opts the optional parameters
    # @return [Array<(PessoaJuridicaAprovadaResponse, Fixnum, Hash)>] PessoaJuridicaAprovadaResponse data, response status code and response headers
    def salvar_pessoa_juridica_aprovada_using_post_with_http_info(pessoa_persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.salvar_pessoa_juridica_aprovada_using_post ..."
      end
      
      
      # verify the required parameter 'pessoa_persist' is set
      fail ArgumentError, "Missing the required parameter 'pessoa_persist' when calling CadastroClienteApi.salvar_pessoa_juridica_aprovada_using_post" if pessoa_persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/clientes-pessoas-juridicas".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pessoa_persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PessoaJuridicaAprovadaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#salvar_pessoa_juridica_aprovada_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza o cadastro de um novo Endere\u00E7o
    # Este m\u00E9todo permite que seja cadastrado um novo Endere\u00E7o na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa a qual o endere\u00E7o pertence (id)
    # @option opts [Integer] :id_tipo_endereco C\u00F3digo de Identifica\u00E7\u00E3o da Tipo Endere\u00E7o (id)
    # @option opts [String] :cep Apresenta o C\u00F3digo de Endere\u00E7amento Postal (CEP) no formaro &#39;58800000&#39;
    # @option opts [String] :logradouro Apresenta o nome do Logradouro
    # @option opts [Integer] :numero Apresenta o n\u00FAmero do endere\u00E7o
    # @option opts [String] :complemento Apresenta descri\u00E7oes complementares referente ao endere\u00E7o
    # @option opts [String] :ponto_referencia Apresenta a descri\u00E7\u00E3o de ponto de refer\u00EAncia do endere\u00E7o
    # @option opts [String] :bairro Apresenta nome do bairro
    # @option opts [String] :cidade Apresenta nome da cidade
    # @option opts [String] :uf Apresenta sigla da Unidade Federativa
    # @option opts [String] :pais Apresenta nome do Pais
    # @return [EnderecoResponse]
    def salvar_using_post12(opts = {})
      data, _status_code, _headers = salvar_using_post12_with_http_info(opts)
      return data
    end

    # Realiza o cadastro de um novo Endere\u00E7o
    # Este m\u00E9todo permite que seja cadastrado um novo Endere\u00E7o na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa a qual o endere\u00E7o pertence (id)
    # @option opts [Integer] :id_tipo_endereco C\u00F3digo de Identifica\u00E7\u00E3o da Tipo Endere\u00E7o (id)
    # @option opts [String] :cep Apresenta o C\u00F3digo de Endere\u00E7amento Postal (CEP) no formaro &#39;58800000&#39;
    # @option opts [String] :logradouro Apresenta o nome do Logradouro
    # @option opts [Integer] :numero Apresenta o n\u00FAmero do endere\u00E7o
    # @option opts [String] :complemento Apresenta descri\u00E7oes complementares referente ao endere\u00E7o
    # @option opts [String] :ponto_referencia Apresenta a descri\u00E7\u00E3o de ponto de refer\u00EAncia do endere\u00E7o
    # @option opts [String] :bairro Apresenta nome do bairro
    # @option opts [String] :cidade Apresenta nome da cidade
    # @option opts [String] :uf Apresenta sigla da Unidade Federativa
    # @option opts [String] :pais Apresenta nome do Pais
    # @return [Array<(EnderecoResponse, Fixnum, Hash)>] EnderecoResponse data, response status code and response headers
    def salvar_using_post12_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.salvar_using_post12 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/enderecos".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idPessoa'] = opts[:'id_pessoa'] if opts[:'id_pessoa']
      query_params[:'idTipoEndereco'] = opts[:'id_tipo_endereco'] if opts[:'id_tipo_endereco']
      query_params[:'cep'] = opts[:'cep'] if opts[:'cep']
      query_params[:'logradouro'] = opts[:'logradouro'] if opts[:'logradouro']
      query_params[:'numero'] = opts[:'numero'] if opts[:'numero']
      query_params[:'complemento'] = opts[:'complemento'] if opts[:'complemento']
      query_params[:'pontoReferencia'] = opts[:'ponto_referencia'] if opts[:'ponto_referencia']
      query_params[:'bairro'] = opts[:'bairro'] if opts[:'bairro']
      query_params[:'cidade'] = opts[:'cidade'] if opts[:'cidade']
      query_params[:'uf'] = opts[:'uf'] if opts[:'uf']
      query_params[:'pais'] = opts[:'pais'] if opts[:'pais']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnderecoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#salvar_using_post12\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inclui a conta como registro para integra\u00E7\u00E3o
    # Este recurso permite incluir uma conta como registro para integra\u00E7\u00E3o.
    # @param id C\u00F3digo de identifica\u00E7\u00E3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [IntegracaoEmissorPersist] :body Descri\u00E7\u00E3o do canal de entrada
    # @return [IntegracaoEmissorResponse]
    def salvar_using_post14(id, opts = {})
      data, _status_code, _headers = salvar_using_post14_with_http_info(id, opts)
      return data
    end

    # Inclui a conta como registro para integra\u00E7\u00E3o
    # Este recurso permite incluir uma conta como registro para integra\u00E7\u00E3o.
    # @param id C\u00F3digo de identifica\u00E7\u00E3o da conta (id).
    # @param [Hash] opts the optional parameters
    # @option opts [IntegracaoEmissorPersist] :body Descri\u00E7\u00E3o do canal de entrada
    # @return [Array<(IntegracaoEmissorResponse, Fixnum, Hash)>] IntegracaoEmissorResponse data, response status code and response headers
    def salvar_using_post14_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.salvar_using_post14 ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling CadastroClienteApi.salvar_using_post14" if id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/contas/{id}/incluir-registro-integracao".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IntegracaoEmissorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#salvar_using_post14\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Salvar os detalhes de uma determinada Pessoa
    # Este m\u00E9todo permite que seja incluido na base do emissor os detalhes de uma determinada Pessoa.
    # @param id_pessoa Apresenta o c\u00F3digo identificador da pessoa
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nome_mae Apresenta o nome da m\u00E3e da pessoa fisica
    # @option opts [Integer] :id_estado_civil Id Estado civil da pessoa fisica
    # @option opts [String] :id_profissao Profiss\u00E3o da pessoa fisica
    # @option opts [Integer] :id_natureza_ocupacao Id Natureza Ocupa\u00E7\u00E3o da pessoa fisica
    # @option opts [Integer] :id_nacionalidade Id Nacionalidade da pessoa fisica
    # @option opts [Integer] :numero_banco N\u00FAmero do banco.
    # @option opts [Integer] :numero_agencia N\u00FAmero da ag\u00EAncia.
    # @option opts [String] :numero_conta_corrente N\u00FAmero da conta corrente.
    # @option opts [String] :email Email da pessoa fisica
    # @option opts [String] :nome_empresa Nome que deve ser impresso no cart\u00E3o
    # @return [PessoaDetalheResponse]
    def salvar_using_post19(id_pessoa, opts = {})
      data, _status_code, _headers = salvar_using_post19_with_http_info(id_pessoa, opts)
      return data
    end

    # Salvar os detalhes de uma determinada Pessoa
    # Este m\u00E9todo permite que seja incluido na base do emissor os detalhes de uma determinada Pessoa.
    # @param id_pessoa Apresenta o c\u00F3digo identificador da pessoa
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nome_mae Apresenta o nome da m\u00E3e da pessoa fisica
    # @option opts [Integer] :id_estado_civil Id Estado civil da pessoa fisica
    # @option opts [String] :id_profissao Profiss\u00E3o da pessoa fisica
    # @option opts [Integer] :id_natureza_ocupacao Id Natureza Ocupa\u00E7\u00E3o da pessoa fisica
    # @option opts [Integer] :id_nacionalidade Id Nacionalidade da pessoa fisica
    # @option opts [Integer] :numero_banco N\u00FAmero do banco.
    # @option opts [Integer] :numero_agencia N\u00FAmero da ag\u00EAncia.
    # @option opts [String] :numero_conta_corrente N\u00FAmero da conta corrente.
    # @option opts [String] :email Email da pessoa fisica
    # @option opts [String] :nome_empresa Nome que deve ser impresso no cart\u00E3o
    # @return [Array<(PessoaDetalheResponse, Fixnum, Hash)>] PessoaDetalheResponse data, response status code and response headers
    def salvar_using_post19_with_http_info(id_pessoa, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.salvar_using_post19 ..."
      end
      
      
      # verify the required parameter 'id_pessoa' is set
      fail ArgumentError, "Missing the required parameter 'id_pessoa' when calling CadastroClienteApi.salvar_using_post19" if id_pessoa.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas-detalhes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idPessoa'] = id_pessoa
      query_params[:'nomeMae'] = opts[:'nome_mae'] if opts[:'nome_mae']
      query_params[:'idEstadoCivil'] = opts[:'id_estado_civil'] if opts[:'id_estado_civil']
      query_params[:'idProfissao'] = opts[:'id_profissao'] if opts[:'id_profissao']
      query_params[:'idNaturezaOcupacao'] = opts[:'id_natureza_ocupacao'] if opts[:'id_natureza_ocupacao']
      query_params[:'idNacionalidade'] = opts[:'id_nacionalidade'] if opts[:'id_nacionalidade']
      query_params[:'numeroBanco'] = opts[:'numero_banco'] if opts[:'numero_banco']
      query_params[:'numeroAgencia'] = opts[:'numero_agencia'] if opts[:'numero_agencia']
      query_params[:'numeroContaCorrente'] = opts[:'numero_conta_corrente'] if opts[:'numero_conta_corrente']
      query_params[:'email'] = opts[:'email'] if opts[:'email']
      query_params[:'nomeEmpresa'] = opts[:'nome_empresa'] if opts[:'nome_empresa']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PessoaDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#salvar_using_post19\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza o cadastro de um nova Pessoa
    # Este m\u00E9todo permite que seja cadastrado uma nova Pessoa na base de dados do Emissor.
    # @param nome Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00E3o Social (Nome Empresarial)&#39;.
    # @param tipo C\u00F3digo de identifica\u00E7\u00E3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00EDsica), (\&quot;PJ\&quot;: Pessoa Jur\u00EDdica).
    # @param data_nascimento Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cpf N\u00FAmero do CPF, quando PF.
    # @option opts [String] :cnpj N\u00FAmero do CNPJ, quando PJ.
    # @option opts [String] :sexo C\u00F3digo de identifica\u00E7\u00E3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00E3o Especificado).
    # @option opts [String] :numero_identidade N\u00FAmero da Identidade.
    # @option opts [String] :orgao_expedidor_identidade Org\u00E3o expedidor do Identidade.
    # @option opts [String] :unidade_federativa_identidade Sigla da Unidade Federativa de onde foi expedido a Identidade
    # @option opts [String] :data_emissao_identidade Data emiss\u00E3o da Identidade.
    # @return [PessoaResponse]
    def salvar_using_post20(nome, tipo, data_nascimento, opts = {})
      data, _status_code, _headers = salvar_using_post20_with_http_info(nome, tipo, data_nascimento, opts)
      return data
    end

    # Realiza o cadastro de um nova Pessoa
    # Este m\u00E9todo permite que seja cadastrado uma nova Pessoa na base de dados do Emissor.
    # @param nome Apresenta o &#39;Nome Completo da PF&#39; ou o &#39;Nome Completo da Raz\u00E3o Social (Nome Empresarial)&#39;.
    # @param tipo C\u00F3digo de identifica\u00E7\u00E3o do tipo da Pessoa, sendo: (\&quot;PF\&quot;: Pessoa F\u00EDsica), (\&quot;PJ\&quot;: Pessoa Jur\u00EDdica).
    # @param data_nascimento Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cpf N\u00FAmero do CPF, quando PF.
    # @option opts [String] :cnpj N\u00FAmero do CNPJ, quando PJ.
    # @option opts [String] :sexo C\u00F3digo de identifica\u00E7\u00E3o do sexo da Pessoa, quando PF, sendo: (\&quot;M\&quot;: Masculino), (\&quot;F\&quot;: Feminino), (\&quot;O\&quot;: Outro), (\&quot;N\&quot;: N\u00E3o Especificado).
    # @option opts [String] :numero_identidade N\u00FAmero da Identidade.
    # @option opts [String] :orgao_expedidor_identidade Org\u00E3o expedidor do Identidade.
    # @option opts [String] :unidade_federativa_identidade Sigla da Unidade Federativa de onde foi expedido a Identidade
    # @option opts [String] :data_emissao_identidade Data emiss\u00E3o da Identidade.
    # @return [Array<(PessoaResponse, Fixnum, Hash)>] PessoaResponse data, response status code and response headers
    def salvar_using_post20_with_http_info(nome, tipo, data_nascimento, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.salvar_using_post20 ..."
      end
      
      
      # verify the required parameter 'nome' is set
      fail ArgumentError, "Missing the required parameter 'nome' when calling CadastroClienteApi.salvar_using_post20" if nome.nil?
      
      
      
      
      
      
      # verify the required parameter 'tipo' is set
      fail ArgumentError, "Missing the required parameter 'tipo' when calling CadastroClienteApi.salvar_using_post20" if tipo.nil?
      
      
      
      
      
      
      # verify the required parameter 'data_nascimento' is set
      fail ArgumentError, "Missing the required parameter 'data_nascimento' when calling CadastroClienteApi.salvar_using_post20" if data_nascimento.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/pessoas".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'nome'] = nome
      query_params[:'tipo'] = tipo
      query_params[:'dataNascimento'] = data_nascimento
      query_params[:'cpf'] = opts[:'cpf'] if opts[:'cpf']
      query_params[:'cnpj'] = opts[:'cnpj'] if opts[:'cnpj']
      query_params[:'sexo'] = opts[:'sexo'] if opts[:'sexo']
      query_params[:'numeroIdentidade'] = opts[:'numero_identidade'] if opts[:'numero_identidade']
      query_params[:'orgaoExpedidorIdentidade'] = opts[:'orgao_expedidor_identidade'] if opts[:'orgao_expedidor_identidade']
      query_params[:'unidadeFederativaIdentidade'] = opts[:'unidade_federativa_identidade'] if opts[:'unidade_federativa_identidade']
      query_params[:'dataEmissaoIdentidade'] = opts[:'data_emissao_identidade'] if opts[:'data_emissao_identidade']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PessoaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#salvar_using_post20\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Realiza o cadastro de um novo Telefone
    # Este m\u00E9todo permite que seja cadastrado um novo Telefone na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_tipo_telefone C\u00F3digo de Identifica\u00E7\u00E3o do Tipo do Telefone (id).
    # @option opts [Integer] :id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa (id) a qual o telefone pertence.
    # @option opts [String] :ddd C\u00F3digo DDD do telefone (id).
    # @option opts [String] :telefone N\u00FAmero do telefone.
    # @option opts [String] :ramal N\u00FAmero do ramal.
    # @return [TelefoneResponse]
    def salvar_using_post23(opts = {})
      data, _status_code, _headers = salvar_using_post23_with_http_info(opts)
      return data
    end

    # Realiza o cadastro de um novo Telefone
    # Este m\u00E9todo permite que seja cadastrado um novo Telefone na base de dados do Emissor.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_tipo_telefone C\u00F3digo de Identifica\u00E7\u00E3o do Tipo do Telefone (id).
    # @option opts [Integer] :id_pessoa C\u00F3digo de Identifica\u00E7\u00E3o da Pessoa (id) a qual o telefone pertence.
    # @option opts [String] :ddd C\u00F3digo DDD do telefone (id).
    # @option opts [String] :telefone N\u00FAmero do telefone.
    # @option opts [String] :ramal N\u00FAmero do ramal.
    # @return [Array<(TelefoneResponse, Fixnum, Hash)>] TelefoneResponse data, response status code and response headers
    def salvar_using_post23_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CadastroClienteApi.salvar_using_post23 ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/telefones".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idTipoTelefone'] = opts[:'id_tipo_telefone'] if opts[:'id_tipo_telefone']
      query_params[:'idPessoa'] = opts[:'id_pessoa'] if opts[:'id_pessoa']
      query_params[:'ddd'] = opts[:'ddd'] if opts[:'ddd']
      query_params[:'telefone'] = opts[:'telefone'] if opts[:'telefone']
      query_params[:'ramal'] = opts[:'ramal'] if opts[:'ramal']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TelefoneResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CadastroClienteApi#salvar_using_post23\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
