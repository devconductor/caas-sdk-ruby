=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require "uri"

module Pier

  class GlobaltagnotificacaoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # {{{email_resource_alterar_configuracao}}}
    # {{{email_resource_alterar_configuracao_notes}}}
    # @param id {{{email_resource_alterar_configuracao_param_id}}}
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [ConfiguracaoEmailResponse]
    def alterar_configuracao_using_put(id, persist, opts = {})
      data, _status_code, _headers = alterar_configuracao_using_put_with_http_info(id, persist, opts)
      return data
    end

    # {{{email_resource_alterar_configuracao}}}
    # {{{email_resource_alterar_configuracao_notes}}}
    # @param id {{{email_resource_alterar_configuracao_param_id}}}
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfiguracaoEmailResponse, Fixnum, Hash)>] ConfiguracaoEmailResponse data, response status code and response headers
    def alterar_configuracao_using_put_with_http_info(id, persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.alterar_configuracao_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagnotificacaoApi.alterar_configuracao_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'persist' is set
      fail ArgumentError, "Missing the required parameter 'persist' when calling GlobaltagnotificacaoApi.alterar_configuracao_using_put" if persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/configuracoes-email/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfiguracaoEmailResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#alterar_configuracao_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{notificacao_resource_alterar_template_notificacao}}}
    # {{{notificacao_resource_alterar_template_notificacao_notes}}}
    # @param id {{{notificacao_resource_alterar_template_notificacao_param_id}}}
    # @param conteudo {{{notificacao_resource_alterar_template_notificacao_param_conteudo}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_configuracao_email {{{template_notificacao_persist_id_configuracao_email_value}}}
    # @option opts [String] :tipo_layout {{{template_notificacao_persist_tipo_layout_value}}}
    # @option opts [String] :tipo_notificacao {{{template_notificacao_persist_tipo_notificacao_value}}}
    # @option opts [String] :remetente {{{template_notificacao_persist_remetente_value}}}
    # @option opts [String] :assunto {{{template_notificacao_persist_assunto_value}}}
    # @option opts [BOOLEAN] :template_padrao {{{template_notificacao_persist_template_padrao_value}}}
    # @return [TemplateNotificacaoDetalheResponse]
    def alterar_template_notificacao_using_put(id, conteudo, opts = {})
      data, _status_code, _headers = alterar_template_notificacao_using_put_with_http_info(id, conteudo, opts)
      return data
    end

    # {{{notificacao_resource_alterar_template_notificacao}}}
    # {{{notificacao_resource_alterar_template_notificacao_notes}}}
    # @param id {{{notificacao_resource_alterar_template_notificacao_param_id}}}
    # @param conteudo {{{notificacao_resource_alterar_template_notificacao_param_conteudo}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_configuracao_email {{{template_notificacao_persist_id_configuracao_email_value}}}
    # @option opts [String] :tipo_layout {{{template_notificacao_persist_tipo_layout_value}}}
    # @option opts [String] :tipo_notificacao {{{template_notificacao_persist_tipo_notificacao_value}}}
    # @option opts [String] :remetente {{{template_notificacao_persist_remetente_value}}}
    # @option opts [String] :assunto {{{template_notificacao_persist_assunto_value}}}
    # @option opts [BOOLEAN] :template_padrao {{{template_notificacao_persist_template_padrao_value}}}
    # @return [Array<(TemplateNotificacaoDetalheResponse, Fixnum, Hash)>] TemplateNotificacaoDetalheResponse data, response status code and response headers
    def alterar_template_notificacao_using_put_with_http_info(id, conteudo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.alterar_template_notificacao_using_put ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagnotificacaoApi.alterar_template_notificacao_using_put" if id.nil?
      
      
      
      
      
      
      # verify the required parameter 'conteudo' is set
      fail ArgumentError, "Missing the required parameter 'conteudo' when calling GlobaltagnotificacaoApi.alterar_template_notificacao_using_put" if conteudo.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'tipo_layout'] && !['RECUPERAR_SENHA', 'FATURA_POR_EMAIL', 'VALIDAR_DISPOSITIVO', 'NOTIFICACAO_EMAIL'].include?(opts[:'tipo_layout'])
        fail ArgumentError, 'invalid value for "tipo_layout", must be one of RECUPERAR_SENHA, FATURA_POR_EMAIL, VALIDAR_DISPOSITIVO, NOTIFICACAO_EMAIL'
      end
      
      
      
      
      
      
      
      if opts[:'tipo_notificacao'] && !['SMS', 'PUSH_APNS', 'PUSH_FCM', 'PUSH_GCM', 'EMAIL'].include?(opts[:'tipo_notificacao'])
        fail ArgumentError, 'invalid value for "tipo_notificacao", must be one of SMS, PUSH_APNS, PUSH_FCM, PUSH_GCM, EMAIL'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/templates-notificacoes/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'idConfiguracaoEmail'] = opts[:'id_configuracao_email'] if opts[:'id_configuracao_email']
      query_params[:'tipoLayout'] = opts[:'tipo_layout'] if opts[:'tipo_layout']
      query_params[:'tipoNotificacao'] = opts[:'tipo_notificacao'] if opts[:'tipo_notificacao']
      query_params[:'remetente'] = opts[:'remetente'] if opts[:'remetente']
      query_params[:'assunto'] = opts[:'assunto'] if opts[:'assunto']
      query_params[:'templatePadrao'] = opts[:'template_padrao'] if opts[:'template_padrao']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(conteudo)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TemplateNotificacaoDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#alterar_template_notificacao_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{notificacao_resource_atualizar_s_m_s}}}
    # {{{notificacao_resource_atualizar_s_m_s_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nsu {{{notificacao_resource_atualizar_s_m_s_param_nsu}}}
    # @option opts [String] :status {{{notificacao_resource_atualizar_s_m_s_param_status}}}
    # @option opts [String] :data {{{notificacao_resource_atualizar_s_m_s_param_data}}}
    # @option opts [String] :texto_status {{{notificacao_resource_atualizar_s_m_s_param_texto_status}}}
    # @option opts [String] :operadora {{{notificacao_resource_atualizar_s_m_s_param_operadora}}}
    # @return [NotificacaoSMSResponse]
    def atualizar_sms_using_post(opts = {})
      data, _status_code, _headers = atualizar_sms_using_post_with_http_info(opts)
      return data
    end

    # {{{notificacao_resource_atualizar_s_m_s}}}
    # {{{notificacao_resource_atualizar_s_m_s_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nsu {{{notificacao_resource_atualizar_s_m_s_param_nsu}}}
    # @option opts [String] :status {{{notificacao_resource_atualizar_s_m_s_param_status}}}
    # @option opts [String] :data {{{notificacao_resource_atualizar_s_m_s_param_data}}}
    # @option opts [String] :texto_status {{{notificacao_resource_atualizar_s_m_s_param_texto_status}}}
    # @option opts [String] :operadora {{{notificacao_resource_atualizar_s_m_s_param_operadora}}}
    # @return [Array<(NotificacaoSMSResponse, Fixnum, Hash)>] NotificacaoSMSResponse data, response status code and response headers
    def atualizar_sms_using_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.atualizar_sms_using_post ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/notificacoes/sms/atualizar-status".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'nsu'] = opts[:'nsu'] if opts[:'nsu']
      query_params[:'status'] = opts[:'status'] if opts[:'status']
      query_params[:'data'] = opts[:'data'] if opts[:'data']
      query_params[:'texto_status'] = opts[:'texto_status'] if opts[:'texto_status']
      query_params[:'operadora'] = opts[:'operadora'] if opts[:'operadora']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificacaoSMSResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#atualizar_sms_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{email_resource_consultar_configuracao}}}
    # {{{email_resource_consultar_configuracao_notes}}}
    # @param id {{{email_resource_consultar_configuracao_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [ConfiguracaoEmailResponse]
    def consultar_configuracao_using_get(id, opts = {})
      data, _status_code, _headers = consultar_configuracao_using_get_with_http_info(id, opts)
      return data
    end

    # {{{email_resource_consultar_configuracao}}}
    # {{{email_resource_consultar_configuracao_notes}}}
    # @param id {{{email_resource_consultar_configuracao_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfiguracaoEmailResponse, Fixnum, Hash)>] ConfiguracaoEmailResponse data, response status code and response headers
    def consultar_configuracao_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.consultar_configuracao_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagnotificacaoApi.consultar_configuracao_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/configuracoes-email/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfiguracaoEmailResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#consultar_configuracao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{codigo_seguranca_resource_consultar_por_email}}}
    # {{{codigo_seguranca_resource_consultar_por_email_notes}}}
    # @param id {{{codigo_seguranca_resource_consultar_por_email_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [CodigoSegurancaResponse]
    def consultar_por_email_using_get(id, opts = {})
      data, _status_code, _headers = consultar_por_email_using_get_with_http_info(id, opts)
      return data
    end

    # {{{codigo_seguranca_resource_consultar_por_email}}}
    # {{{codigo_seguranca_resource_consultar_por_email_notes}}}
    # @param id {{{codigo_seguranca_resource_consultar_por_email_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodigoSegurancaResponse, Fixnum, Hash)>] CodigoSegurancaResponse data, response status code and response headers
    def consultar_por_email_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.consultar_por_email_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagnotificacaoApi.consultar_por_email_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/codigos-seguranca-email/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CodigoSegurancaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#consultar_por_email_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{codigo_seguranca_resource_consultar_por_s_m_s}}}
    # {{{codigo_seguranca_resource_consultar_por_s_m_s_notes}}}
    # @param id {{{codigo_seguranca_resource_consultar_por_s_m_s_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [CodigoSegurancaResponse]
    def consultar_por_sms_using_get(id, opts = {})
      data, _status_code, _headers = consultar_por_sms_using_get_with_http_info(id, opts)
      return data
    end

    # {{{codigo_seguranca_resource_consultar_por_s_m_s}}}
    # {{{codigo_seguranca_resource_consultar_por_s_m_s_notes}}}
    # @param id {{{codigo_seguranca_resource_consultar_por_s_m_s_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(CodigoSegurancaResponse, Fixnum, Hash)>] CodigoSegurancaResponse data, response status code and response headers
    def consultar_por_sms_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.consultar_por_sms_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagnotificacaoApi.consultar_por_sms_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/codigos-seguranca-sms/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CodigoSegurancaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#consultar_por_sms_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{notificacao_resource_consultar_template_notificacao}}}
    # {{{notificacao_resource_consultar_template_notificacao_notes}}}
    # @param id {{{notificacao_resource_consultar_template_notificacao_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [TemplateNotificacaoDetalheResponse]
    def consultar_template_notificacao_using_get(id, opts = {})
      data, _status_code, _headers = consultar_template_notificacao_using_get_with_http_info(id, opts)
      return data
    end

    # {{{notificacao_resource_consultar_template_notificacao}}}
    # {{{notificacao_resource_consultar_template_notificacao_notes}}}
    # @param id {{{notificacao_resource_consultar_template_notificacao_param_id}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplateNotificacaoDetalheResponse, Fixnum, Hash)>] TemplateNotificacaoDetalheResponse data, response status code and response headers
    def consultar_template_notificacao_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.consultar_template_notificacao_using_get ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling GlobaltagnotificacaoApi.consultar_template_notificacao_using_get" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/templates-notificacoes/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TemplateNotificacaoDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#consultar_template_notificacao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{codigo_seguranca_resource_gerar_token_e_m_a_i_l}}}
    # {{{codigo_seguranca_resource_gerar_token_e_m_a_i_l_notes}}}
    # @param email email
    # @param [Hash] opts the optional parameters
    # @return [String]
    def gerar_token_email_using_post(email, opts = {})
      data, _status_code, _headers = gerar_token_email_using_post_with_http_info(email, opts)
      return data
    end

    # {{{codigo_seguranca_resource_gerar_token_e_m_a_i_l}}}
    # {{{codigo_seguranca_resource_gerar_token_e_m_a_i_l_notes}}}
    # @param email email
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def gerar_token_email_using_post_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.gerar_token_email_using_post ..."
      end
      
      
      # verify the required parameter 'email' is set
      fail ArgumentError, "Missing the required parameter 'email' when calling GlobaltagnotificacaoApi.gerar_token_email_using_post" if email.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/notificacoes-email/gerar-codigo-seguranca".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#gerar_token_email_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{codigo_seguranca_resource_gerar_token_s_m_s}}}
    # {{{codigo_seguranca_resource_gerar_token_s_m_s_notes}}}
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [String]
    def gerar_token_sms_using_post(persist, opts = {})
      data, _status_code, _headers = gerar_token_sms_using_post_with_http_info(persist, opts)
      return data
    end

    # {{{codigo_seguranca_resource_gerar_token_s_m_s}}}
    # {{{codigo_seguranca_resource_gerar_token_s_m_s_notes}}}
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def gerar_token_sms_using_post_with_http_info(persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.gerar_token_sms_using_post ..."
      end
      
      
      # verify the required parameter 'persist' is set
      fail ArgumentError, "Missing the required parameter 'persist' when calling GlobaltagnotificacaoApi.gerar_token_sms_using_post" if persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/notificacoes-sms/gerar-codigo-seguranca".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#gerar_token_sms_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{email_resource_listar_configuracao}}}
    # {{{email_resource_listar_configuracao_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageConfiguracaoEmailResponse]
    def listar_configuracao_using_get(opts = {})
      data, _status_code, _headers = listar_configuracao_using_get_with_http_info(opts)
      return data
    end

    # {{{email_resource_listar_configuracao}}}
    # {{{email_resource_listar_configuracao_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageConfiguracaoEmailResponse, Fixnum, Hash)>] PageConfiguracaoEmailResponse data, response status code and response headers
    def listar_configuracao_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.listar_configuracao_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/configuracoes-email".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageConfiguracaoEmailResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#listar_configuracao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{codigo_seguranca_resource_listar_por_email}}}
    # {{{codigo_seguranca_resource_listar_por_email_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageCodigoSegurancaResponse]
    def listar_por_email_using_get(opts = {})
      data, _status_code, _headers = listar_por_email_using_get_with_http_info(opts)
      return data
    end

    # {{{codigo_seguranca_resource_listar_por_email}}}
    # {{{codigo_seguranca_resource_listar_por_email_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageCodigoSegurancaResponse, Fixnum, Hash)>] PageCodigoSegurancaResponse data, response status code and response headers
    def listar_por_email_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.listar_por_email_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/codigos-seguranca-email".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCodigoSegurancaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#listar_por_email_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{codigo_seguranca_resource_listar_por_s_m_s}}}
    # {{{codigo_seguranca_resource_listar_por_s_m_s_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageCodigoSegurancaResponse]
    def listar_por_sms_using_get(opts = {})
      data, _status_code, _headers = listar_por_sms_using_get_with_http_info(opts)
      return data
    end

    # {{{codigo_seguranca_resource_listar_por_s_m_s}}}
    # {{{codigo_seguranca_resource_listar_por_s_m_s_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageCodigoSegurancaResponse, Fixnum, Hash)>] PageCodigoSegurancaResponse data, response status code and response headers
    def listar_por_sms_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.listar_por_sms_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/codigos-seguranca-sms".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCodigoSegurancaResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#listar_por_sms_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{notificacao_resource_listar_push}}}
    # {{{notificacao_resource_listar_push_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :data_envio {{{notificacao_push_request_data_envio_value}}}
    # @option opts [String] :tipo_evento {{{notificacao_push_request_tipo_evento_value}}}
    # @option opts [String] :status {{{notificacao_push_request_status_value}}}
    # @option opts [String] :plataforma {{{notificacao_push_request_plataforma_value}}}
    # @option opts [String] :protocolo {{{notificacao_push_request_protocolo_value}}}
    # @return [PagePushResponse]
    def listar_push_using_get(opts = {})
      data, _status_code, _headers = listar_push_using_get_with_http_info(opts)
      return data
    end

    # {{{notificacao_resource_listar_push}}}
    # {{{notificacao_resource_listar_push_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :data_envio {{{notificacao_push_request_data_envio_value}}}
    # @option opts [String] :tipo_evento {{{notificacao_push_request_tipo_evento_value}}}
    # @option opts [String] :status {{{notificacao_push_request_status_value}}}
    # @option opts [String] :plataforma {{{notificacao_push_request_plataforma_value}}}
    # @option opts [String] :protocolo {{{notificacao_push_request_protocolo_value}}}
    # @return [Array<(PagePushResponse, Fixnum, Hash)>] PagePushResponse data, response status code and response headers
    def listar_push_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.listar_push_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'tipo_evento'] && !['RISCO_FRAUDE', 'CODIGO_SEGURANCA', 'OUTROS'].include?(opts[:'tipo_evento'])
        fail ArgumentError, 'invalid value for "tipo_evento", must be one of RISCO_FRAUDE, CODIGO_SEGURANCA, OUTROS'
      end
      
      
      
      
      
      
      
      if opts[:'status'] && !['PENDENTE', 'ENCAMINHADO', 'ENVIADO', 'RESPONDIDO', 'ERRO', 'ERRO_RESPOSTA', 'SUCESSO_RESPOSTA'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of PENDENTE, ENCAMINHADO, ENVIADO, RESPONDIDO, ERRO, ERRO_RESPOSTA, SUCESSO_RESPOSTA'
      end
      
      
      
      
      
      
      
      if opts[:'plataforma'] && !['APNS', 'FCM', 'GCM'].include?(opts[:'plataforma'])
        fail ArgumentError, 'invalid value for "plataforma", must be one of APNS, FCM, GCM'
      end
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/notificacoes/push".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'dataEnvio'] = opts[:'data_envio'] if opts[:'data_envio']
      query_params[:'tipoEvento'] = opts[:'tipo_evento'] if opts[:'tipo_evento']
      query_params[:'status'] = opts[:'status'] if opts[:'status']
      query_params[:'plataforma'] = opts[:'plataforma'] if opts[:'plataforma']
      query_params[:'protocolo'] = opts[:'protocolo'] if opts[:'protocolo']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePushResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#listar_push_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{notificacao_resource_listar_s_m_s}}}
    # {{{notificacao_resource_listar_s_m_s_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :data_inclusao {{{notificacao_s_m_s_request_data_inclusao_value}}}
    # @option opts [String] :tipo_evento {{{notificacao_s_m_s_request_tipo_evento_value}}}
    # @option opts [String] :status {{{notificacao_s_m_s_request_status_value}}}
    # @option opts [String] :operadora {{{notificacao_s_m_s_request_operadora_value}}}
    # @option opts [String] :protocolo {{{notificacao_s_m_s_request_protocolo_value}}}
    # @option opts [Integer] :nsu {{{notificacao_s_m_s_request_nsu_value}}}
    # @return [PageSMSResponse]
    def listar_sms_using_get(opts = {})
      data, _status_code, _headers = listar_sms_using_get_with_http_info(opts)
      return data
    end

    # {{{notificacao_resource_listar_s_m_s}}}
    # {{{notificacao_resource_listar_s_m_s_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @option opts [String] :data_inclusao {{{notificacao_s_m_s_request_data_inclusao_value}}}
    # @option opts [String] :tipo_evento {{{notificacao_s_m_s_request_tipo_evento_value}}}
    # @option opts [String] :status {{{notificacao_s_m_s_request_status_value}}}
    # @option opts [String] :operadora {{{notificacao_s_m_s_request_operadora_value}}}
    # @option opts [String] :protocolo {{{notificacao_s_m_s_request_protocolo_value}}}
    # @option opts [Integer] :nsu {{{notificacao_s_m_s_request_nsu_value}}}
    # @return [Array<(PageSMSResponse, Fixnum, Hash)>] PageSMSResponse data, response status code and response headers
    def listar_sms_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.listar_sms_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'tipo_evento'] && !['RISCO_FRAUDE', 'CODIGO_SEGURANCA', 'OUTROS'].include?(opts[:'tipo_evento'])
        fail ArgumentError, 'invalid value for "tipo_evento", must be one of RISCO_FRAUDE, CODIGO_SEGURANCA, OUTROS'
      end
      
      
      
      
      
      
      
      if opts[:'status'] && !['PENDENTE', 'ENCAMINHADO', 'ENVIADO', 'RESPONDIDO', 'ERRO', 'ERRO_RESPOSTA', 'SUCESSO_RESPOSTA'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of PENDENTE, ENCAMINHADO, ENVIADO, RESPONDIDO, ERRO, ERRO_RESPOSTA, SUCESSO_RESPOSTA'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/notificacoes/sms".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']
      query_params[:'dataInclusao'] = opts[:'data_inclusao'] if opts[:'data_inclusao']
      query_params[:'tipoEvento'] = opts[:'tipo_evento'] if opts[:'tipo_evento']
      query_params[:'status'] = opts[:'status'] if opts[:'status']
      query_params[:'operadora'] = opts[:'operadora'] if opts[:'operadora']
      query_params[:'protocolo'] = opts[:'protocolo'] if opts[:'protocolo']
      query_params[:'nsu'] = opts[:'nsu'] if opts[:'nsu']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageSMSResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#listar_sms_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{notificacao_resource_listar_template_notificacao}}}
    # {{{notificacao_resource_listar_template_notificacao_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [PageTemplateNotificacaoResponse]
    def listar_template_notificacao_using_get(opts = {})
      data, _status_code, _headers = listar_template_notificacao_using_get_with_http_info(opts)
      return data
    end

    # {{{notificacao_resource_listar_template_notificacao}}}
    # {{{notificacao_resource_listar_template_notificacao_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
    # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
    # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
    # @return [Array<(PageTemplateNotificacaoResponse, Fixnum, Hash)>] PageTemplateNotificacaoResponse data, response status code and response headers
    def listar_template_notificacao_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.listar_template_notificacao_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/templates-notificacoes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if opts[:'sort']
      query_params[:'page'] = opts[:'page'] if opts[:'page']
      query_params[:'limit'] = opts[:'limit'] if opts[:'limit']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageTemplateNotificacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#listar_template_notificacao_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{enum_resource_listar_tipos_layouts}}}
    # {{{enum_resource_listar_tipos_layouts_notes}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def listar_tipos_layouts_using_get(opts = {})
      data, _status_code, _headers = listar_tipos_layouts_using_get_with_http_info(opts)
      return data
    end

    # {{{enum_resource_listar_tipos_layouts}}}
    # {{{enum_resource_listar_tipos_layouts_notes}}}
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def listar_tipos_layouts_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.listar_tipos_layouts_using_get ..."
      end
      
      # resource path
      local_var_path = "/api/tipos-layouts".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#listar_tipos_layouts_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{notificacao_resource_notificacao_email}}}
    # {{{notificacao_resource_notificacao_email_notes}}}
    # @param request request
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def notificacao_email_using_post(request, opts = {})
      data, _status_code, _headers = notificacao_email_using_post_with_http_info(request, opts)
      return data
    end

    # {{{notificacao_resource_notificacao_email}}}
    # {{{notificacao_resource_notificacao_email_notes}}}
    # @param request request
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def notificacao_email_using_post_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.notificacao_email_using_post ..."
      end
      
      
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling GlobaltagnotificacaoApi.notificacao_email_using_post" if request.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/notificacoes-email".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#notificacao_email_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{codigo_seguranca_resource_reenviar_token_s_m_s}}}
    # {{{codigo_seguranca_resource_reenviar_token_s_m_s_notes}}}
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [String]
    def reenviar_token_sms_using_post(persist, opts = {})
      data, _status_code, _headers = reenviar_token_sms_using_post_with_http_info(persist, opts)
      return data
    end

    # {{{codigo_seguranca_resource_reenviar_token_s_m_s}}}
    # {{{codigo_seguranca_resource_reenviar_token_s_m_s_notes}}}
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def reenviar_token_sms_using_post_with_http_info(persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.reenviar_token_sms_using_post ..."
      end
      
      
      # verify the required parameter 'persist' is set
      fail ArgumentError, "Missing the required parameter 'persist' when calling GlobaltagnotificacaoApi.reenviar_token_sms_using_post" if persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/notificacoes-sms/reenviar-codigo-seguranca".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#reenviar_token_sms_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{notificacao_resource_responder_s_m_s_get}}}
    # {{{notificacao_resource_responder_s_m_s_get_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nsu {{{notificacao_resource_responder_s_m_s_get_param_nsu}}}
    # @option opts [String] :data {{{notificacao_resource_responder_s_m_s_get_param_data}}}
    # @option opts [String] :resposta {{{notificacao_resource_responder_s_m_s_get_param_resposta}}}
    # @return [NotificacaoSMSResponse]
    def responder_sms_get_using_get(opts = {})
      data, _status_code, _headers = responder_sms_get_using_get_with_http_info(opts)
      return data
    end

    # {{{notificacao_resource_responder_s_m_s_get}}}
    # {{{notificacao_resource_responder_s_m_s_get_notes}}}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :nsu {{{notificacao_resource_responder_s_m_s_get_param_nsu}}}
    # @option opts [String] :data {{{notificacao_resource_responder_s_m_s_get_param_data}}}
    # @option opts [String] :resposta {{{notificacao_resource_responder_s_m_s_get_param_resposta}}}
    # @return [Array<(NotificacaoSMSResponse, Fixnum, Hash)>] NotificacaoSMSResponse data, response status code and response headers
    def responder_sms_get_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.responder_sms_get_using_get ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/notificacoes/sms/responder".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'nsu'] = opts[:'nsu'] if opts[:'nsu']
      query_params[:'data'] = opts[:'data'] if opts[:'data']
      query_params[:'resposta'] = opts[:'resposta'] if opts[:'resposta']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificacaoSMSResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#responder_sms_get_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{email_resource_salvar_configuracao}}}
    # {{{email_resource_salvar_configuracao_notes}}}
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [ConfiguracaoEmailResponse]
    def salvar_configuracao_using_post(persist, opts = {})
      data, _status_code, _headers = salvar_configuracao_using_post_with_http_info(persist, opts)
      return data
    end

    # {{{email_resource_salvar_configuracao}}}
    # {{{email_resource_salvar_configuracao_notes}}}
    # @param persist persist
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfiguracaoEmailResponse, Fixnum, Hash)>] ConfiguracaoEmailResponse data, response status code and response headers
    def salvar_configuracao_using_post_with_http_info(persist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.salvar_configuracao_using_post ..."
      end
      
      
      # verify the required parameter 'persist' is set
      fail ArgumentError, "Missing the required parameter 'persist' when calling GlobaltagnotificacaoApi.salvar_configuracao_using_post" if persist.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/configuracoes-email".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(persist)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConfiguracaoEmailResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#salvar_configuracao_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{notificacao_resource_salvar_push_f_c_m}}}
    # {{{notificacao_resource_salvar_push_f_c_m_notes}}}
    # @param push_persists pushPersists
    # @param [Hash] opts the optional parameters
    # @return [NotificacaoResponse]
    def salvar_push_fcm_using_post(push_persists, opts = {})
      data, _status_code, _headers = salvar_push_fcm_using_post_with_http_info(push_persists, opts)
      return data
    end

    # {{{notificacao_resource_salvar_push_f_c_m}}}
    # {{{notificacao_resource_salvar_push_f_c_m_notes}}}
    # @param push_persists pushPersists
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificacaoResponse, Fixnum, Hash)>] NotificacaoResponse data, response status code and response headers
    def salvar_push_fcm_using_post_with_http_info(push_persists, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.salvar_push_fcm_using_post ..."
      end
      
      
      # verify the required parameter 'push_persists' is set
      fail ArgumentError, "Missing the required parameter 'push_persists' when calling GlobaltagnotificacaoApi.salvar_push_fcm_using_post" if push_persists.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/notificacoes/push/fcm".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(push_persists)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#salvar_push_fcm_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{notificacao_resource_salvar_push_g_c_m}}}
    # {{{notificacao_resource_salvar_push_g_c_m_notes}}}
    # @param push_persists pushPersists
    # @param [Hash] opts the optional parameters
    # @return [NotificacaoResponse]
    def salvar_push_gcm_using_post(push_persists, opts = {})
      data, _status_code, _headers = salvar_push_gcm_using_post_with_http_info(push_persists, opts)
      return data
    end

    # {{{notificacao_resource_salvar_push_g_c_m}}}
    # {{{notificacao_resource_salvar_push_g_c_m_notes}}}
    # @param push_persists pushPersists
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificacaoResponse, Fixnum, Hash)>] NotificacaoResponse data, response status code and response headers
    def salvar_push_gcm_using_post_with_http_info(push_persists, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.salvar_push_gcm_using_post ..."
      end
      
      
      # verify the required parameter 'push_persists' is set
      fail ArgumentError, "Missing the required parameter 'push_persists' when calling GlobaltagnotificacaoApi.salvar_push_gcm_using_post" if push_persists.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/notificacoes/push/gcm".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(push_persists)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#salvar_push_gcm_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{notificacao_resource_salvar_push}}}
    # {{{notificacao_resource_salvar_push_notes}}}
    # @param push_persists pushPersists
    # @param [Hash] opts the optional parameters
    # @return [NotificacaoResponse]
    def salvar_push_using_post(push_persists, opts = {})
      data, _status_code, _headers = salvar_push_using_post_with_http_info(push_persists, opts)
      return data
    end

    # {{{notificacao_resource_salvar_push}}}
    # {{{notificacao_resource_salvar_push_notes}}}
    # @param push_persists pushPersists
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificacaoResponse, Fixnum, Hash)>] NotificacaoResponse data, response status code and response headers
    def salvar_push_using_post_with_http_info(push_persists, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.salvar_push_using_post ..."
      end
      
      
      # verify the required parameter 'push_persists' is set
      fail ArgumentError, "Missing the required parameter 'push_persists' when calling GlobaltagnotificacaoApi.salvar_push_using_post" if push_persists.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/notificacoes/push/apns".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(push_persists)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#salvar_push_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{notificacao_resource_salvar_s_m_s}}}
    # {{{notificacao_resource_salvar_s_m_s_notes}}}
    # @param lista_sms listaSMS
    # @param [Hash] opts the optional parameters
    # @return [NotificacaoResponse]
    def salvar_sms_using_post(lista_sms, opts = {})
      data, _status_code, _headers = salvar_sms_using_post_with_http_info(lista_sms, opts)
      return data
    end

    # {{{notificacao_resource_salvar_s_m_s}}}
    # {{{notificacao_resource_salvar_s_m_s_notes}}}
    # @param lista_sms listaSMS
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificacaoResponse, Fixnum, Hash)>] NotificacaoResponse data, response status code and response headers
    def salvar_sms_using_post_with_http_info(lista_sms, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.salvar_sms_using_post ..."
      end
      
      
      # verify the required parameter 'lista_sms' is set
      fail ArgumentError, "Missing the required parameter 'lista_sms' when calling GlobaltagnotificacaoApi.salvar_sms_using_post" if lista_sms.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/notificacoes/sms".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(lista_sms)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificacaoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#salvar_sms_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{notificacao_resource_salvar_template_notificacao}}}
    # {{{notificacao_resource_salvar_template_notificacao_notes}}}
    # @param conteudo {{{notificacao_resource_salvar_template_notificacao_param_conteudo}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_configuracao_email {{{template_notificacao_persist_id_configuracao_email_value}}}
    # @option opts [String] :tipo_layout {{{template_notificacao_persist_tipo_layout_value}}}
    # @option opts [String] :tipo_notificacao {{{template_notificacao_persist_tipo_notificacao_value}}}
    # @option opts [String] :remetente {{{template_notificacao_persist_remetente_value}}}
    # @option opts [String] :assunto {{{template_notificacao_persist_assunto_value}}}
    # @option opts [BOOLEAN] :template_padrao {{{template_notificacao_persist_template_padrao_value}}}
    # @return [TemplateNotificacaoDetalheResponse]
    def salvar_template_notificacao_using_post(conteudo, opts = {})
      data, _status_code, _headers = salvar_template_notificacao_using_post_with_http_info(conteudo, opts)
      return data
    end

    # {{{notificacao_resource_salvar_template_notificacao}}}
    # {{{notificacao_resource_salvar_template_notificacao_notes}}}
    # @param conteudo {{{notificacao_resource_salvar_template_notificacao_param_conteudo}}}
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id_configuracao_email {{{template_notificacao_persist_id_configuracao_email_value}}}
    # @option opts [String] :tipo_layout {{{template_notificacao_persist_tipo_layout_value}}}
    # @option opts [String] :tipo_notificacao {{{template_notificacao_persist_tipo_notificacao_value}}}
    # @option opts [String] :remetente {{{template_notificacao_persist_remetente_value}}}
    # @option opts [String] :assunto {{{template_notificacao_persist_assunto_value}}}
    # @option opts [BOOLEAN] :template_padrao {{{template_notificacao_persist_template_padrao_value}}}
    # @return [Array<(TemplateNotificacaoDetalheResponse, Fixnum, Hash)>] TemplateNotificacaoDetalheResponse data, response status code and response headers
    def salvar_template_notificacao_using_post_with_http_info(conteudo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.salvar_template_notificacao_using_post ..."
      end
      
      
      # verify the required parameter 'conteudo' is set
      fail ArgumentError, "Missing the required parameter 'conteudo' when calling GlobaltagnotificacaoApi.salvar_template_notificacao_using_post" if conteudo.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'tipo_layout'] && !['RECUPERAR_SENHA', 'FATURA_POR_EMAIL', 'VALIDAR_DISPOSITIVO', 'NOTIFICACAO_EMAIL'].include?(opts[:'tipo_layout'])
        fail ArgumentError, 'invalid value for "tipo_layout", must be one of RECUPERAR_SENHA, FATURA_POR_EMAIL, VALIDAR_DISPOSITIVO, NOTIFICACAO_EMAIL'
      end
      
      
      
      
      
      
      
      if opts[:'tipo_notificacao'] && !['SMS', 'PUSH_APNS', 'PUSH_FCM', 'PUSH_GCM', 'EMAIL'].include?(opts[:'tipo_notificacao'])
        fail ArgumentError, 'invalid value for "tipo_notificacao", must be one of SMS, PUSH_APNS, PUSH_FCM, PUSH_GCM, EMAIL'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/templates-notificacoes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'idConfiguracaoEmail'] = opts[:'id_configuracao_email'] if opts[:'id_configuracao_email']
      query_params[:'tipoLayout'] = opts[:'tipo_layout'] if opts[:'tipo_layout']
      query_params[:'tipoNotificacao'] = opts[:'tipo_notificacao'] if opts[:'tipo_notificacao']
      query_params[:'remetente'] = opts[:'remetente'] if opts[:'remetente']
      query_params[:'assunto'] = opts[:'assunto'] if opts[:'assunto']
      query_params[:'templatePadrao'] = opts[:'template_padrao'] if opts[:'template_padrao']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(conteudo)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TemplateNotificacaoDetalheResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#salvar_template_notificacao_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{codigo_seguranca_resource_validar_token_e_m_a_i_l}}}
    # {{{codigo_seguranca_resource_validar_token_e_m_a_i_l_notes}}}
    # @param request request
    # @param [Hash] opts the optional parameters
    # @return [String]
    def validar_token_email_using_post(request, opts = {})
      data, _status_code, _headers = validar_token_email_using_post_with_http_info(request, opts)
      return data
    end

    # {{{codigo_seguranca_resource_validar_token_e_m_a_i_l}}}
    # {{{codigo_seguranca_resource_validar_token_e_m_a_i_l_notes}}}
    # @param request request
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def validar_token_email_using_post_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.validar_token_email_using_post ..."
      end
      
      
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling GlobaltagnotificacaoApi.validar_token_email_using_post" if request.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/notificacoes-email/validar-codigo-seguranca".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#validar_token_email_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # {{{codigo_seguranca_resource_validar_token_s_m_s}}}
    # {{{codigo_seguranca_resource_validar_token_s_m_s_notes}}}
    # @param request request
    # @param [Hash] opts the optional parameters
    # @return [String]
    def validar_token_sms_using_post(request, opts = {})
      data, _status_code, _headers = validar_token_sms_using_post_with_http_info(request, opts)
      return data
    end

    # {{{codigo_seguranca_resource_validar_token_s_m_s}}}
    # {{{codigo_seguranca_resource_validar_token_s_m_s_notes}}}
    # @param request request
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def validar_token_sms_using_post_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobaltagnotificacaoApi.validar_token_sms_using_post ..."
      end
      
      
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling GlobaltagnotificacaoApi.validar_token_sms_using_post" if request.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/notificacoes-sms/validar-codigo-seguranca".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobaltagnotificacaoApi#validar_token_sms_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
