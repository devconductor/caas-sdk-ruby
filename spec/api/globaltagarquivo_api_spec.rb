=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'spec_helper'
require 'json'

# Unit tests for Pier::GlobaltagarquivoApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GlobaltagarquivoApi' do
  before do
    # run before each test
    @instance = Pier::GlobaltagarquivoApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlobaltagarquivoApi' do
    it 'should create an instact of GlobaltagarquivoApi' do
      @instance.should be_a(Pier::GlobaltagarquivoApi)
    end
  end


  # unit tests for consultar_using_get4
  # {{{arquivo_resource_consultar}}}
  # {{{arquivo_resource_consultar_notes}}}
  # @param id {{{arquivo_resource_consultar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @return [ArquivoDetalheResponse]
  describe 'consultar_using_get4 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for integrar_using_post
  # {{{arquivo_resource_integrar}}}
  # {{{arquivo_resource_integrar_notes}}}
  # @param integrar_arquivo_request integrarArquivoRequest
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'integrar_using_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_por_numero_receita_federal_using_get
  # {{{arquivo_a_u_d_resource_listar_por_numero_receita_federal}}}
  # {{{arquivo_a_u_d_resource_listar_por_numero_receita_federal_notes}}}
  # @param numero_receita_federal {{{arquivo_a_u_d_resource_listar_por_numero_receita_federal_param_numero_receita_federal}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
  # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
  # @return [PageArquivoAUDResponse]
  describe 'listar_por_numero_receita_federal_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_status_arquivos_using_get
  # {{{arquivo_resource_listar_status_arquivos}}}
  # {{{arquivo_resource_listar_status_arquivos_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :nome {{{status_arquivo_request_nome_value}}}
  # @option opts [String] :descricao {{{status_arquivo_request_descricao_value}}}
  # @return [PageStatusArquivoResponse]
  describe 'listar_status_arquivos_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_tipos_arquivos_using_get
  # {{{arquivo_resource_listar_tipos_arquivos}}}
  # {{{arquivo_resource_listar_tipos_arquivos_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :nome {{{tipo_arquivo_request_nome_value}}}
  # @option opts [String] :descricao {{{tipo_arquivo_request_descricao_value}}}
  # @return [PageTipoArquivoResponse]
  describe 'listar_tipos_arquivos_using_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get5
  # {{{arquivo_a_u_d_resource_listar}}}
  # {{{arquivo_a_u_d_resource_listar_notes}}}
  # @param id {{{arquivo_a_u_d_resource_listar_param_id}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page P\u00E1gina solicitada (Default = 0)
  # @option opts [Integer] :limit Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
  # @return [PageArquivoAUDResponse]
  describe 'listar_using_get5 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for listar_using_get6
  # {{{arquivo_resource_listar}}}
  # {{{arquivo_resource_listar_notes}}}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :sort {{{global_menssagem_sort_sort}}}
  # @option opts [Integer] :page {{{global_menssagem_sort_page_value}}}
  # @option opts [Integer] :limit {{{global_menssagem_sort_limit}}}
  # @option opts [String] :nome {{{arquivo_request_nome_value}}}
  # @option opts [Integer] :id_tipo_arquivo {{{arquivo_request_id_tipo_arquivo_value}}}
  # @option opts [Integer] :id_status_arquivo {{{arquivo_request_id_status_arquivo_value}}}
  # @option opts [String] :extensao {{{arquivo_request_extensao_value}}}
  # @return [PageArquivoResponse]
  describe 'listar_using_get6 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


  # unit tests for salvar_using_post1
  # {{{arquivo_resource_salvar}}}
  # {{{arquivo_resource_salvar_notes}}}
  # @param arquivo_persist arquivoPersist
  # @param [Hash] opts the optional parameters
  # @return [ArquivoDetalheResponse]
  describe 'salvar_using_post1 test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end


end

