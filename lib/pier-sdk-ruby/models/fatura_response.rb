=begin
PIER Labs


Gest\u00C3\u00A3o de pagamento eletr\u00C3\u00B4nicos como servi\u00C3\u00A7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'date'

module Pier
  # Fatura
  class FaturaResponse
    # C\u00C3\u00B3digo identificador da fatura.
    attr_accessor :id

    # C\u00C3\u00B3digo identificador da conta.
    attr_accessor :id_conta

    # C\u00C3\u00B3digo identificador do produto.
    attr_accessor :id_produto

    # Data de vencimento da fatura.
    attr_accessor :data_vencimento

    # Saldo da fatura anterior.
    attr_accessor :saldo_fatura_anterior

    # Saldo total da Multa lan\u00C3\u00A7ada na Fatura atual.
    attr_accessor :saldo_multa

    # Saldo total das compras lan\u00C3\u00A7adas na fatura atual.
    attr_accessor :saldo_compras

    # Saldo total dos pagamentos lan\u00C3\u00A7ados na fatura atual.
    attr_accessor :saldo_pagamentos

    # Saldo total das tarifas lan\u00C3\u00A7adas na fatura atual.
    attr_accessor :saldo_tarifas

    # Saldo total dos d\u00C3\u00A9bitos lan\u00C3\u00A7ados na fatura atual.
    attr_accessor :saldo_debitos

    # Saldo total dos cr\u00C3\u00A9dito lan\u00C3\u00A7ados na fatura atual.
    attr_accessor :saldo_creditos

    # Salto total devedor da fatura atual.
    attr_accessor :saldo_atual_final

    # Valor m\u00C3\u00ADnimo para pagamento da fatura.
    attr_accessor :valor_minimo_fatura

    # Quando ativa, indica que fora emitida uma fatura.
    attr_accessor :flag_emite_fatura


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'id',
        
        :'id_conta' => :'idConta',
        
        :'id_produto' => :'idProduto',
        
        :'data_vencimento' => :'dataVencimento',
        
        :'saldo_fatura_anterior' => :'saldoFaturaAnterior',
        
        :'saldo_multa' => :'saldoMulta',
        
        :'saldo_compras' => :'saldoCompras',
        
        :'saldo_pagamentos' => :'saldoPagamentos',
        
        :'saldo_tarifas' => :'saldoTarifas',
        
        :'saldo_debitos' => :'saldoDebitos',
        
        :'saldo_creditos' => :'saldoCreditos',
        
        :'saldo_atual_final' => :'saldoAtualFinal',
        
        :'valor_minimo_fatura' => :'valorMinimoFatura',
        
        :'flag_emite_fatura' => :'flagEmiteFatura'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'id' => :'Integer',
        
        :'id_conta' => :'Integer',
        
        :'id_produto' => :'Integer',
        
        :'data_vencimento' => :'DateTime',
        
        :'saldo_fatura_anterior' => :'Float',
        
        :'saldo_multa' => :'Float',
        
        :'saldo_compras' => :'Float',
        
        :'saldo_pagamentos' => :'Float',
        
        :'saldo_tarifas' => :'Float',
        
        :'saldo_debitos' => :'Float',
        
        :'saldo_creditos' => :'Float',
        
        :'saldo_atual_final' => :'Float',
        
        :'valor_minimo_fatura' => :'Float',
        
        :'flag_emite_fatura' => :'Integer'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'id']
        
        
        self.id = attributes[:'id']
        
      
      end

      
      if attributes[:'idConta']
        
        
        self.id_conta = attributes[:'idConta']
        
      
      end

      
      if attributes[:'idProduto']
        
        
        self.id_produto = attributes[:'idProduto']
        
      
      end

      
      if attributes[:'dataVencimento']
        
        
        self.data_vencimento = attributes[:'dataVencimento']
        
      
      end

      
      if attributes[:'saldoFaturaAnterior']
        
        
        self.saldo_fatura_anterior = attributes[:'saldoFaturaAnterior']
        
      
      end

      
      if attributes[:'saldoMulta']
        
        
        self.saldo_multa = attributes[:'saldoMulta']
        
      
      end

      
      if attributes[:'saldoCompras']
        
        
        self.saldo_compras = attributes[:'saldoCompras']
        
      
      end

      
      if attributes[:'saldoPagamentos']
        
        
        self.saldo_pagamentos = attributes[:'saldoPagamentos']
        
      
      end

      
      if attributes[:'saldoTarifas']
        
        
        self.saldo_tarifas = attributes[:'saldoTarifas']
        
      
      end

      
      if attributes[:'saldoDebitos']
        
        
        self.saldo_debitos = attributes[:'saldoDebitos']
        
      
      end

      
      if attributes[:'saldoCreditos']
        
        
        self.saldo_creditos = attributes[:'saldoCreditos']
        
      
      end

      
      if attributes[:'saldoAtualFinal']
        
        
        self.saldo_atual_final = attributes[:'saldoAtualFinal']
        
      
      end

      
      if attributes[:'valorMinimoFatura']
        
        
        self.valor_minimo_fatura = attributes[:'valorMinimoFatura']
        
      
      end

      
      if attributes[:'flagEmiteFatura']
        
        
        self.flag_emite_fatura = attributes[:'flagEmiteFatura']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          id_conta == o.id_conta &&
          id_produto == o.id_produto &&
          data_vencimento == o.data_vencimento &&
          saldo_fatura_anterior == o.saldo_fatura_anterior &&
          saldo_multa == o.saldo_multa &&
          saldo_compras == o.saldo_compras &&
          saldo_pagamentos == o.saldo_pagamentos &&
          saldo_tarifas == o.saldo_tarifas &&
          saldo_debitos == o.saldo_debitos &&
          saldo_creditos == o.saldo_creditos &&
          saldo_atual_final == o.saldo_atual_final &&
          valor_minimo_fatura == o.valor_minimo_fatura &&
          flag_emite_fatura == o.flag_emite_fatura
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, id_conta, id_produto, data_vencimento, saldo_fatura_anterior, saldo_multa, saldo_compras, saldo_pagamentos, saldo_tarifas, saldo_debitos, saldo_creditos, saldo_atual_final, valor_minimo_fatura, flag_emite_fatura].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end


end
