=begin
PIER Labs


Gest\u00E3o de pagamento eletr\u00F4nicos como servi\u00E7o


OpenAPI spec version: 0.0.1
Contact: pierlabs@conductor.com.br
Generated by: https://github.com/swagger-api/swagger-codegen.git


License: Apache 2.0
http://www.apache.org/licenses/LICENSE-2.0.html



Terms of Service: http://pierlabs.io/terms/


=end

require 'date'

module Pier
  # {{{tipo_debito_recorrente_response_description}}}
  class TipoDebitoRecorrenteResponse
    attr_accessor :flag_anuidade_bonificada

    # {{{tipo_debito_recorrente_response_id_value}}}
    attr_accessor :id

    # {{{tipo_debito_recorrente_response_descricao_value}}}
    attr_accessor :nome

    # {{{tipo_debito_recorrente_response_valor_value}}}
    attr_accessor :valor

    # {{{tipo_debito_recorrente_response_flag_ativo_value}}}
    attr_accessor :flag_ativo

    # {{{tipo_debito_recorrente_response_valor_bonus_value}}}
    attr_accessor :valor_bonus

    # {{{tipo_debito_recorrente_response_numero_parcelas_value}}}
    attr_accessor :numero_parcelas

    # {{{tipo_debito_recorrente_response_flag_adere_automatico_value}}}
    attr_accessor :flag_adere_automatico

    # {{{tipo_debito_recorrente_response_flag_gera_numero_sorte_value}}}
    attr_accessor :flag_gera_numero_sorte

    # {{{tipo_debito_recorrente_response_faixa_etaria_value}}}
    attr_accessor :faixa_etaria

    # {{{tipo_debito_recorrente_response_flag_seguro_value}}}
    attr_accessor :flag_seguro

    # {{{tipo_debito_recorrente_response_sorteios_mensais_value}}}
    attr_accessor :sorteios_mensais

    # {{{tipo_debito_recorrente_response_flag_adesao_automatica_value}}}
    attr_accessor :flag_adesao_automatica

    # {{{tipo_debito_recorrente_response_flag_dependente_value}}}
    attr_accessor :flag_dependente

    # {{{tipo_debito_recorrente_response_quantidade_dependente_value}}}
    attr_accessor :quantidade_dependente

    # {{{tipo_debito_recorrente_response_id_termo_seguro_servico_value}}}
    attr_accessor :id_termo_seguro_servico

    # {{{tipo_debito_recorrente_response_idade_minima_value}}}
    attr_accessor :idade_minima

    # {{{tipo_debito_recorrente_response_idade_maxima_value}}}
    attr_accessor :idade_maxima

    # {{{tipo_debito_recorrente_response_flag_debito_incondicional_value}}}
    attr_accessor :flag_debito_incondicional

    # {{{tipo_debito_recorrente_response_flag_extrato_incondicional_value}}}
    attr_accessor :flag_extrato_incondicional

    # {{{tipo_debito_recorrente_response_flag_estorno_automatico_value}}}
    attr_accessor :flag_estorno_automatico

    # {{{tipo_debito_recorrente_response_valor_repassado_seguradora_value}}}
    attr_accessor :valor_repassado_seguradora

    # {{{tipo_debito_recorrente_response_flag_lanca_transacao_value}}}
    attr_accessor :flag_lanca_transacao

    # {{{tipo_debito_recorrente_response_flag_transferencia_automatica_value}}}
    attr_accessor :flag_transferencia_automatica

    # {{{tipo_debito_recorrente_response_id_produto_value}}}
    attr_accessor :id_produto

    # {{{tipo_debito_recorrente_response_id_grupo_debito_recorrente_value}}}
    attr_accessor :id_grupo_debito_recorrente

    # {{{tipo_debito_recorrente_response_quantidade_tentativas_cobranca_value}}}
    attr_accessor :quantidade_tentativas_cobranca

    # {{{tipo_debito_recorrente_response_id_ajuste_value}}}
    attr_accessor :id_ajuste


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'flag_anuidade_bonificada' => :'flagAnuidadeBonificada',
        
        :'id' => :'id',
        
        :'nome' => :'nome',
        
        :'valor' => :'valor',
        
        :'flag_ativo' => :'flagAtivo',
        
        :'valor_bonus' => :'valorBonus',
        
        :'numero_parcelas' => :'numeroParcelas',
        
        :'flag_adere_automatico' => :'flagAdereAutomatico',
        
        :'flag_gera_numero_sorte' => :'flagGeraNumeroSorte',
        
        :'faixa_etaria' => :'faixaEtaria',
        
        :'flag_seguro' => :'flagSeguro',
        
        :'sorteios_mensais' => :'sorteiosMensais',
        
        :'flag_adesao_automatica' => :'flagAdesaoAutomatica',
        
        :'flag_dependente' => :'flagDependente',
        
        :'quantidade_dependente' => :'quantidadeDependente',
        
        :'id_termo_seguro_servico' => :'idTermoSeguroServico',
        
        :'idade_minima' => :'idadeMinima',
        
        :'idade_maxima' => :'idadeMaxima',
        
        :'flag_debito_incondicional' => :'flagDebitoIncondicional',
        
        :'flag_extrato_incondicional' => :'flagExtratoIncondicional',
        
        :'flag_estorno_automatico' => :'flagEstornoAutomatico',
        
        :'valor_repassado_seguradora' => :'valorRepassadoSeguradora',
        
        :'flag_lanca_transacao' => :'flagLancaTransacao',
        
        :'flag_transferencia_automatica' => :'flagTransferenciaAutomatica',
        
        :'id_produto' => :'idProduto',
        
        :'id_grupo_debito_recorrente' => :'idGrupoDebitoRecorrente',
        
        :'quantidade_tentativas_cobranca' => :'quantidadeTentativasCobranca',
        
        :'id_ajuste' => :'idAjuste'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        
        :'flag_anuidade_bonificada' => :'BOOLEAN',
        
        :'id' => :'Integer',
        
        :'nome' => :'String',
        
        :'valor' => :'Float',
        
        :'flag_ativo' => :'BOOLEAN',
        
        :'valor_bonus' => :'Float',
        
        :'numero_parcelas' => :'Integer',
        
        :'flag_adere_automatico' => :'BOOLEAN',
        
        :'flag_gera_numero_sorte' => :'BOOLEAN',
        
        :'faixa_etaria' => :'String',
        
        :'flag_seguro' => :'BOOLEAN',
        
        :'sorteios_mensais' => :'String',
        
        :'flag_adesao_automatica' => :'BOOLEAN',
        
        :'flag_dependente' => :'BOOLEAN',
        
        :'quantidade_dependente' => :'Integer',
        
        :'id_termo_seguro_servico' => :'Integer',
        
        :'idade_minima' => :'Integer',
        
        :'idade_maxima' => :'Integer',
        
        :'flag_debito_incondicional' => :'BOOLEAN',
        
        :'flag_extrato_incondicional' => :'BOOLEAN',
        
        :'flag_estorno_automatico' => :'BOOLEAN',
        
        :'valor_repassado_seguradora' => :'Float',
        
        :'flag_lanca_transacao' => :'BOOLEAN',
        
        :'flag_transferencia_automatica' => :'BOOLEAN',
        
        :'id_produto' => :'Integer',
        
        :'id_grupo_debito_recorrente' => :'Integer',
        
        :'quantidade_tentativas_cobranca' => :'Integer',
        
        :'id_ajuste' => :'Integer'
        
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      
      if attributes[:'flagAnuidadeBonificada']
        
        
        self.flag_anuidade_bonificada = attributes[:'flagAnuidadeBonificada']
        
      
      end

      
      if attributes[:'id']
        
        
        self.id = attributes[:'id']
        
      
      end

      
      if attributes[:'nome']
        
        
        self.nome = attributes[:'nome']
        
      
      end

      
      if attributes[:'valor']
        
        
        self.valor = attributes[:'valor']
        
      
      end

      
      if attributes[:'flagAtivo']
        
        
        self.flag_ativo = attributes[:'flagAtivo']
        
      
      end

      
      if attributes[:'valorBonus']
        
        
        self.valor_bonus = attributes[:'valorBonus']
        
      
      end

      
      if attributes[:'numeroParcelas']
        
        
        self.numero_parcelas = attributes[:'numeroParcelas']
        
      
      end

      
      if attributes[:'flagAdereAutomatico']
        
        
        self.flag_adere_automatico = attributes[:'flagAdereAutomatico']
        
      
      end

      
      if attributes[:'flagGeraNumeroSorte']
        
        
        self.flag_gera_numero_sorte = attributes[:'flagGeraNumeroSorte']
        
      
      end

      
      if attributes[:'faixaEtaria']
        
        
        self.faixa_etaria = attributes[:'faixaEtaria']
        
      
      end

      
      if attributes[:'flagSeguro']
        
        
        self.flag_seguro = attributes[:'flagSeguro']
        
      
      end

      
      if attributes[:'sorteiosMensais']
        
        
        self.sorteios_mensais = attributes[:'sorteiosMensais']
        
      
      end

      
      if attributes[:'flagAdesaoAutomatica']
        
        
        self.flag_adesao_automatica = attributes[:'flagAdesaoAutomatica']
        
      
      end

      
      if attributes[:'flagDependente']
        
        
        self.flag_dependente = attributes[:'flagDependente']
        
      
      end

      
      if attributes[:'quantidadeDependente']
        
        
        self.quantidade_dependente = attributes[:'quantidadeDependente']
        
      
      end

      
      if attributes[:'idTermoSeguroServico']
        
        
        self.id_termo_seguro_servico = attributes[:'idTermoSeguroServico']
        
      
      end

      
      if attributes[:'idadeMinima']
        
        
        self.idade_minima = attributes[:'idadeMinima']
        
      
      end

      
      if attributes[:'idadeMaxima']
        
        
        self.idade_maxima = attributes[:'idadeMaxima']
        
      
      end

      
      if attributes[:'flagDebitoIncondicional']
        
        
        self.flag_debito_incondicional = attributes[:'flagDebitoIncondicional']
        
      
      end

      
      if attributes[:'flagExtratoIncondicional']
        
        
        self.flag_extrato_incondicional = attributes[:'flagExtratoIncondicional']
        
      
      end

      
      if attributes[:'flagEstornoAutomatico']
        
        
        self.flag_estorno_automatico = attributes[:'flagEstornoAutomatico']
        
      
      end

      
      if attributes[:'valorRepassadoSeguradora']
        
        
        self.valor_repassado_seguradora = attributes[:'valorRepassadoSeguradora']
        
      
      end

      
      if attributes[:'flagLancaTransacao']
        
        
        self.flag_lanca_transacao = attributes[:'flagLancaTransacao']
        
      
      end

      
      if attributes[:'flagTransferenciaAutomatica']
        
        
        self.flag_transferencia_automatica = attributes[:'flagTransferenciaAutomatica']
        
      
      end

      
      if attributes[:'idProduto']
        
        
        self.id_produto = attributes[:'idProduto']
        
      
      end

      
      if attributes[:'idGrupoDebitoRecorrente']
        
        
        self.id_grupo_debito_recorrente = attributes[:'idGrupoDebitoRecorrente']
        
      
      end

      
      if attributes[:'quantidadeTentativasCobranca']
        
        
        self.quantidade_tentativas_cobranca = attributes[:'quantidadeTentativasCobranca']
        
      
      end

      
      if attributes[:'idAjuste']
        
        
        self.id_ajuste = attributes[:'idAjuste']
        
      
      end

      
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      
      
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    end

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared 
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          flag_anuidade_bonificada == o.flag_anuidade_bonificada &&
          id == o.id &&
          nome == o.nome &&
          valor == o.valor &&
          flag_ativo == o.flag_ativo &&
          valor_bonus == o.valor_bonus &&
          numero_parcelas == o.numero_parcelas &&
          flag_adere_automatico == o.flag_adere_automatico &&
          flag_gera_numero_sorte == o.flag_gera_numero_sorte &&
          faixa_etaria == o.faixa_etaria &&
          flag_seguro == o.flag_seguro &&
          sorteios_mensais == o.sorteios_mensais &&
          flag_adesao_automatica == o.flag_adesao_automatica &&
          flag_dependente == o.flag_dependente &&
          quantidade_dependente == o.quantidade_dependente &&
          id_termo_seguro_servico == o.id_termo_seguro_servico &&
          idade_minima == o.idade_minima &&
          idade_maxima == o.idade_maxima &&
          flag_debito_incondicional == o.flag_debito_incondicional &&
          flag_extrato_incondicional == o.flag_extrato_incondicional &&
          flag_estorno_automatico == o.flag_estorno_automatico &&
          valor_repassado_seguradora == o.valor_repassado_seguradora &&
          flag_lanca_transacao == o.flag_lanca_transacao &&
          flag_transferencia_automatica == o.flag_transferencia_automatica &&
          id_produto == o.id_produto &&
          id_grupo_debito_recorrente == o.id_grupo_debito_recorrente &&
          quantidade_tentativas_cobranca == o.quantidade_tentativas_cobranca &&
          id_ajuste == o.id_ajuste
    end

    # @see the `==` method
    # @param [Object] Object to be compared 
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [flag_anuidade_bonificada, id, nome, valor, flag_ativo, valor_bonus, numero_parcelas, flag_adere_automatico, flag_gera_numero_sorte, faixa_etaria, flag_seguro, sorteios_mensais, flag_adesao_automatica, flag_dependente, quantidade_dependente, id_termo_seguro_servico, idade_minima, idade_maxima, flag_debito_incondicional, flag_extrato_incondicional, flag_estorno_automatico, valor_repassado_seguradora, flag_lanca_transacao, flag_transferencia_automatica, id_produto, id_grupo_debito_recorrente, quantidade_tentativas_cobranca, id_ajuste].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Pier.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value 
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end


end
